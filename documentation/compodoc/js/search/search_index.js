var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.306,1,2.071]],["body/controllers/AppController.html",[0,2.154,1,2.774,2,1.27,3,0.248,4,0.248,5,0.211,6,2.6,7,2.015,8,0.032,9,0.954,10,2.774,11,4.28,12,4.28,13,3.641,14,0.504,15,1.487,16,4.41,17,2.015,18,2.6,19,3.118,20,0.911,21,4.164,22,4.28,23,1.267,24,3.109,25,0.606,26,3.109,27,4.28,28,2,29,1.08,30,0.939,31,2.857,32,0.554,33,2.932,34,2.6,35,3.118,36,2.015,37,1.815,38,2.6,39,3.109,40,0.248,41,0.015,42,3.109,43,1.901,44,1.749,45,1.815,46,3.109,47,2.015,48,1.27,49,1.506,50,2.265,51,1.815,52,2.6,53,1.648,54,4.28,55,3.109,56,3.109,57,3.109,58,0.015,59,0.02,60,0.015]],["title/modules/AppModule.html",[61,0.569,62,2.071]],["body/modules/AppModule.html",[1,2.997,2,1.624,3,0.223,4,0.223,5,0.19,8,0.032,9,0.546,10,2.576,15,0.972,20,0.596,25,0.546,29,0.972,30,1.053,32,0.498,33,2.93,34,2.34,40,0.223,41,0.013,48,1.143,58,0.013,59,0.019,60,0.013,61,0.948,62,4.078,63,0.897,64,1.355,65,1.633,66,1.633,67,1.355,68,2.7,69,1.243,70,2.34,71,2.34,72,2.34,73,2.455,74,3.226,75,3.226,76,3.226,77,3.226,78,2.321,79,1.633,80,1.633,81,2.798,82,3.976,83,3.976,84,1.766,85,4.625,86,3.976,87,5.036,88,2.798,89,3.976,90,1.355,91,1.143,92,1.355,93,4.625,94,2.34,95,3.976,96,2.798,97,2.798,98,2.798,99,1.813,100,2.798,101,2.798,102,2.798,103,2.798,104,2.039,105,2.798,106,2.798]],["title/injectables/AppService.html",[33,1.694,107,1.11]],["body/injectables/AppService.html",[3,0.283,4,0.283,5,0.241,8,0.031,9,0.691,13,3.629,14,0.574,15,1.623,16,4.651,21,3.405,23,1.048,25,0.911,28,1.909,29,1.23,30,0.833,31,3.466,32,0.631,33,2.478,38,2.963,40,0.283,41,0.017,43,2.323,44,2.137,45,2.728,52,2.963,58,0.017,59,0.022,60,0.017,107,1.623,108,1.878,109,2.963,110,3.405,111,2.728,112,1.498,113,3.542,114,4.674,115,3.81,116,2.295,117,4.674,118,3.542,119,2.963,120,2.963,121,2.295]],["title/classes/City.html",[41,0.015,122,1.694]],["body/classes/City.html",[3,0.258,4,0.258,5,0.22,8,0.032,9,0.631,14,0.524,20,1.231,25,1.128,40,0.258,41,0.015,58,0.015,59,0.021,60,0.015,91,2.291,112,1.41,122,2.973,123,1.437,124,2.706,125,2.357,126,3.235,127,3.235,128,5.607,129,4.179,130,3.273,131,4.311,132,3.64,133,3.192,134,3.235,135,3.235,136,3.678,137,2.597,138,2.019,139,3.235,140,3.235,141,3.235,142,3.235,143,2.801,144,3.235,145,3.235,146,3.235,147,2.096,148,2.706,149,3.235,150,3.235,151,3.235]],["title/modules/ConfigurationModule.html",[61,0.569,73,1.419]],["body/modules/ConfigurationModule.html",[3,0.352,4,0.352,5,0.3,8,0.031,30,1.031,32,0.785,40,0.352,41,0.021,58,0.021,59,0.025,60,0.021,61,0.956,63,1.413,73,2.385,84,1.958,152,4.408,153,2.573,154,1.801,155,2.135,156,2.856,157,2.337,158,4.408,159,4.408,160,4.408]],["title/classes/Ephemeride.html",[41,0.015,161,1.694]],["body/classes/Ephemeride.html",[3,0.189,4,0.189,5,0.161,8,0.032,9,0.46,14,0.383,20,1.245,23,1.04,25,1.141,40,0.189,41,0.011,58,0.011,59,0.017,60,0.011,112,1.127,122,1.863,123,1.049,130,2.901,131,3.621,132,3.621,133,3.003,137,1.702,138,2.23,143,2.834,147,1.53,161,2.465,162,1.975,163,2.361,164,1.975,165,2.361,166,4.357,167,4.357,168,2.361,169,3.51,170,5.094,171,3.514,172,4.197,173,4.197,174,4.197,175,2.361,176,2.277,177,2.277,178,2.361,179,3.51,180,2.56,181,2.361,182,3.514,183,3.514,184,3.888,185,3.514,186,3.514,187,3.514,188,2.361,189,2.361,190,2.361,191,2.361,192,2.361,193,4.649,194,3.514,195,2.361,196,3.514,197,3.514,198,3.514,199,2.361,200,4.649,201,2.361,202,1.975,203,2.361,204,1.975,205,1.975,206,1.975,207,2.361,208,2.361,209,2.361,210,2.361,211,2.361,212,2.361,213,2.361,214,2.361]],["title/classes/Forecast.html",[41,0.015,215,1.865]],["body/classes/Forecast.html",[3,0.21,4,0.21,5,0.179,8,0.032,9,0.514,14,0.427,20,1.24,23,1.45,25,1.136,40,0.21,41,0.013,58,0.013,59,0.018,60,0.013,112,1.221,123,1.17,129,3.739,130,3.033,131,3.785,132,3.257,133,3.265,136,3.184,137,2.623,138,1.844,143,2.821,147,1.707,148,2.203,161,2.018,169,3.739,170,4.67,176,2.467,177,2.467,179,3.739,180,2.773,202,3.184,204,2.203,205,2.203,206,2.203,215,2.61,216,2.203,217,2.634,218,1.919,219,5.196,220,5.196,221,3.739,222,2.634,223,2.634,224,2.634,225,2.634,226,2.634,227,2.634,228,3.807,229,2.634,230,3.568,231,2.634,232,2.634,233,3.184,234,3.807,235,3.807,236,3.807,237,3.807,238,2.203,239,2.203,240,2.634]],["title/classes/Hello.html",[13,1.865,41,0.015]],["body/classes/Hello.html",[3,0.345,4,0.345,5,0.294,8,0.031,9,0.843,13,3.65,14,0.701,20,0.92,21,4.555,25,0.843,40,0.345,41,0.021,58,0.021,59,0.025,60,0.021,112,1.701,119,3.615,123,1.92,125,3.149,138,1.997,143,2.093,241,3.615,242,4.323,243,4.323,244,4.323]],["title/modules/HttpModule.html",[61,0.569,245,1.694]],["body/modules/HttpModule.html",[3,0.253,4,0.253,5,0.216,8,0.032,15,1.101,25,0.618,28,2.02,29,1.101,30,0.773,31,2.532,32,0.565,40,0.253,41,0.015,43,1.409,44,1.296,45,2.886,49,1.536,53,2.819,58,0.015,59,0.021,60,0.015,61,0.773,63,1.017,104,2.31,153,1.851,154,1.296,176,2.811,180,2.31,184,2.652,245,2.622,246,3.171,247,2.811,248,4.057,249,3.171,250,2.622,251,2.31,252,1.536,253,3.171,254,3.171,255,3.628,256,4.338,257,3.103,258,2.31,259,3.171,260,3.171,261,3.171,262,3.171,263,5.317,264,3.171,265,2.532,266,3.171,267,3.171,268,3.171,269,3.171,270,3.171,271,3.171,272,3.171,273,3.171,274,3.171,275,3.171,276,3.171,277,3.171,278,3.171,279,3.171,280,3.171,281,3.171,282,1.681,283,3.171,284,3.171,285,2.31,286,3.171]],["title/modules/LogModule.html",[61,0.569,74,1.865]],["body/modules/LogModule.html",[3,0.375,4,0.285,5,0.319,8,0.032,30,1.032,32,0.635,40,0.285,41,0.017,45,2.739,47,2.31,58,0.017,59,0.022,60,0.017,61,0.836,63,1.143,69,1.584,74,2.739,84,1.584,115,2.597,153,2.081,154,1.457,164,2.982,252,2.7,265,2.081,285,2.597,287,3.565,288,3.565,289,3.565,290,2.597,291,3.822,292,2.982,293,3.565,294,3.565,295,2.597,296,3.565,297,3.565,298,3.565,299,3.565,300,3.565,301,3.565,302,3.565,303,3.565,304,3.565,305,3.565,306,3.565,307,2.982,308,2.982,309,3.565,310,3.565,311,4.693,312,3.565,313,3.565,314,3.565,315,3.565]],["title/injectables/LoggerMiddleware.html",[99,2.071,107,1.11]],["body/injectables/LoggerMiddleware.html",[3,0.264,4,0.264,5,0.225,8,0.031,9,0.646,14,0.537,15,1.552,20,0.705,25,0.646,29,1.15,30,0.796,32,0.59,40,0.264,41,0.016,48,2.066,58,0.016,59,0.021,60,0.016,90,1.604,91,1.353,92,1.604,94,2.77,99,2.895,104,2.413,107,1.552,108,1.756,110,3.255,255,4.871,257,3.4,258,3.255,316,2.77,317,5.414,318,4.468,319,3.737,320,4.468,321,4.468,322,5.414,323,6.134,324,5.414,325,3.312,326,4.468,327,2.895,328,4.468,329,4.468,330,4.468,331,4.468,332,2.77,333,3.312,334,3.312,335,2.413,336,3.312,337,3.312]],["title/classes/Measurement.html",[41,0.015,338,1.694]],["body/classes/Measurement.html",[3,0.293,4,0.293,5,0.25,8,0.031,9,0.716,14,0.595,20,1.132,25,1.038,40,0.293,41,0.017,58,0.017,59,0.023,60,0.017,112,1.534,116,3.885,123,1.63,133,3.179,143,2.577,230,3.485,338,2.821,339,3.07,340,3.291,341,3.885,342,3.885,343,3.67,344,4.784,345,3.67,346,4.784,347,3.67,348,4.001,349,4.001,350,3.67,351,3.07,352,3.67]],["title/classes/Meteo.html",[23,0.946,41,0.015]],["body/classes/Meteo.html",[3,0.261,4,0.261,5,0.223,8,0.031,9,0.638,14,0.531,20,1.198,23,1.666,25,1.098,40,0.261,41,0.016,58,0.016,59,0.021,60,0.016,112,1.421,116,2.872,123,1.454,125,2.384,133,3.077,137,2.147,138,2.028,143,2.727,166,4.854,167,4.854,176,3.648,177,3.491,221,4.506,230,3.229,233,3.707,239,2.737,340,2.934,348,4.204,349,3.707,351,2.737,353,2.737,354,2.384,355,3.273,356,3.273,357,3.273,358,3.273,359,3.273,360,3.273,361,3.273,362,2.737,363,3.273,364,3.273]],["title/controllers/MeteoController.html",[0,1.306,365,2.071]],["body/controllers/MeteoController.html",[0,1.462,2,0.747,3,0.146,4,0.146,5,0.124,7,1.185,8,0.031,9,1.119,14,0.296,15,1.003,17,2.635,18,3.4,19,3.721,20,1.188,23,1.677,25,0.793,28,1.661,29,1.412,30,0.878,32,0.326,35,3.225,36,1.185,37,1.067,40,0.146,41,0.009,43,0.812,44,0.747,48,1.809,49,0.886,50,2.962,53,1.898,58,0.009,59,0.014,60,0.009,90,1.969,91,2.393,92,1.969,122,3.406,130,1.686,137,1.399,138,2.102,161,2.495,215,2.747,218,3.922,354,2.104,365,1.871,366,1.529,367,2.888,368,2.704,369,2.888,370,2.415,371,2.888,372,2.415,373,1.829,374,5.584,375,2.888,376,1.829,377,1.829,378,2.708,379,1.829,380,1.829,381,1.829,382,1.829,383,2.888,384,2.888,385,1.829,386,1.829,387,1.829,388,1.829,389,1.829,390,1.529,391,1.529,392,2.104,393,1.529,394,1.529,395,1.529,396,1.529,397,1.898,398,1.529,399,1.829,400,1.067,401,1.067,402,1.332,403,1.829,404,1.829,405,1.829,406,4.066,407,1.829,408,1.829,409,3.579,410,2.089,411,1.829,412,2.888,413,1.829,414,1.829,415,1.829,416,1.829,417,1.829,418,1.829]],["title/modules/MeteoHttpModule.html",[61,0.569,419,1.865]],["body/modules/MeteoHttpModule.html",[3,0.313,4,0.313,5,0.266,8,0.031,30,0.977,31,2.285,32,0.697,40,0.313,41,0.019,47,2.536,58,0.019,59,0.024,60,0.019,61,0.888,63,1.255,69,1.739,84,2.215,153,3.203,154,1.599,157,2.075,245,2.909,248,2.852,250,2.075,251,3.632,252,2.798,295,2.852,335,2.852,368,1.896,400,2.285,401,2.285,419,2.91,420,3.274,421,3.274,422,3.274,423,3.914,424,3.274,425,3.274,426,3.274,427,2.852,428,3.274]],["title/modules/MeteoModule.html",[61,0.569,75,1.865]],["body/modules/MeteoModule.html",[2,1.988,3,0.301,4,0.301,5,0.256,8,0.031,30,1.05,32,0.671,40,0.301,41,0.018,58,0.018,59,0.023,60,0.018,61,0.96,63,1.208,64,1.825,65,2.2,66,2.2,67,1.825,68,3.146,69,1.674,73,1.674,75,3.634,78,2.841,79,2.2,80,2.2,84,2.162,157,1.998,365,3.493,397,3.202,398,3.152,419,3.525,420,3.152,429,3.152,430,3.152,431,3.152,432,3.769,433,2.746,434,3.769]],["title/injectables/MeteoService.html",[107,1.11,397,1.694]],["body/injectables/MeteoService.html",[3,0.136,4,0.136,5,0.116,8,0.032,9,0.762,14,0.277,15,0.949,20,0.971,23,1.521,25,0.89,28,1.597,29,1.358,30,0.813,32,0.304,40,0.136,41,0.008,43,1.9,44,1.117,48,1.865,49,1.324,51,1.595,53,2.641,58,0.008,59,0.013,60,0.008,90,2.072,91,1.959,92,2.072,107,0.949,108,0.904,111,2.908,112,0.876,122,2.542,130,3.431,137,2.698,138,2.126,147,2.772,154,0.697,161,1.813,215,0.996,218,1.991,247,3.553,250,2.542,252,2.413,257,2.282,265,1.595,282,1.449,285,3.326,327,2.533,354,1.991,368,2.656,370,2.286,372,2.286,378,2.641,393,1.427,394,1.427,395,1.427,396,1.427,397,1.449,410,2.282,435,1.427,436,3.419,437,2.733,438,3.91,439,1.243,440,2.733,441,2.286,442,2.733,443,3.91,444,1.771,445,3.63,446,2.733,447,1.706,448,4.982,449,4.278,450,2.733,451,1.706,452,2.733,453,2.733,454,1.706,455,2.733,456,1.706,457,1.706,458,1.706,459,1.706,460,3.27,461,2.848,462,1.706,463,1.706,464,3.419,465,1.706,466,1.706,467,1.706,468,1.706,469,2.733,470,1.706,471,2.733]],["title/classes/MeteoStats.html",[41,0.015,472,1.865]],["body/classes/MeteoStats.html",[3,0.305,4,0.305,5,0.26,8,0.031,9,0.745,14,0.619,20,1.045,23,1.694,25,0.957,30,0.681,40,0.305,41,0.018,58,0.018,59,0.023,60,0.018,112,1.574,123,1.697,133,2.603,143,1.85,177,3.181,338,3.371,340,2.866,341,3.181,342,3.181,472,2.866,473,4.537,474,3.195,475,3.577,476,4.909,477,5.425,478,3.821,479,3.821,480,4.909,481,3.821,482,3.821]],["title/controllers/StationController.html",[0,1.306,483,2.071]],["body/controllers/StationController.html",[0,1.547,2,0.815,3,0.159,4,0.159,5,0.136,7,1.293,8,0.032,9,0.9,14,0.323,15,1.074,17,3.162,19,2.252,20,0.907,23,1.689,25,0.952,28,1.994,29,1.695,30,0.822,32,0.355,35,2.252,36,1.293,37,1.164,40,0.159,41,0.009,44,0.815,48,1.742,50,1.453,58,0.009,59,0.015,60,0.009,90,1.497,91,1.547,92,1.497,121,3.5,138,1.837,338,2.699,340,1.805,341,2.003,342,2.003,368,2.928,378,3.025,390,1.668,391,1.668,392,2.252,400,1.164,401,1.164,402,1.453,410,2.848,483,2.003,484,1.668,485,3.092,486,3.566,487,3.566,488,2.586,489,4.081,490,2.586,491,3.092,492,1.995,493,4.081,494,3.092,495,1.995,496,2.586,497,1.668,498,3.092,499,1.995,500,3.566,501,3.555,502,4.211,503,3.566,504,3.566,505,2.586,506,1.995,507,1.995,508,3.092,509,1.995,510,1.995,511,2.693,512,3.092,513,1.995,514,2.252,515,2.586,516,1.995,517,1.668,518,1.668,519,1.668,520,2.007,521,1.668,522,1.995,523,1.995,524,1.995,525,1.995,526,1.995,527,1.995,528,1.995,529,1.995,530,1.995,531,1.995,532,1.995,533,1.995,534,1.995]],["title/modules/StationHttpModule.html",[61,0.569,155,1.548]],["body/modules/StationHttpModule.html",[3,0.313,4,0.313,5,0.266,8,0.031,30,0.977,31,2.285,32,0.697,40,0.313,41,0.019,47,2.536,58,0.019,59,0.024,60,0.019,61,0.888,63,1.255,69,1.739,84,2.215,153,3.203,154,1.599,155,2.415,156,2.536,157,2.075,245,2.909,248,2.852,250,2.075,251,3.632,252,2.798,295,2.852,335,2.852,368,1.896,400,2.285,401,2.285,421,3.274,422,3.274,424,3.274,425,3.274,426,3.274,427,2.852,428,3.274,535,3.914]],["title/modules/StationModule.html",[61,0.569,76,1.865]],["body/modules/StationModule.html",[2,1.988,3,0.301,4,0.301,5,0.256,8,0.031,30,1.05,32,0.671,40,0.301,41,0.018,58,0.018,59,0.023,60,0.018,61,0.96,63,1.208,64,1.825,65,2.2,66,2.2,67,1.825,68,3.146,69,1.674,73,1.674,76,3.634,78,2.841,79,2.2,80,2.2,84,2.162,155,2.925,156,2.442,157,1.998,433,2.746,483,3.493,520,3.202,521,3.152,536,3.152,537,3.152,538,3.152,539,3.769,540,3.769]],["title/injectables/StationService.html",[107,1.11,520,1.694]],["body/injectables/StationService.html",[3,0.125,4,0.125,5,0.106,8,0.032,9,0.725,10,1.652,14,0.254,15,0.885,20,0.985,23,1.428,25,1.024,28,1.672,29,1.524,30,0.662,32,0.279,40,0.125,41,0.007,43,2.456,44,1.042,48,1.672,49,1.801,51,2.17,53,2.17,58,0.007,59,0.012,60,0.007,90,1.562,91,1.318,92,1.562,107,0.885,108,0.83,111,2.562,112,0.817,120,3.11,121,3.126,138,2.081,154,0.639,247,3.745,250,2.453,252,2.336,257,2.389,265,1.488,282,1.352,327,1.652,338,1.71,340,1.488,341,1.652,342,1.652,368,2.799,378,2.839,410,2.562,439,1.14,444,2.409,445,3.514,461,2.982,486,3.11,487,3.11,488,2.132,489,3.67,490,2.132,493,4.034,496,3.11,497,2.132,500,3.11,501,3.197,502,4.028,503,3.11,504,3.11,505,2.132,511,2.389,514,1.857,515,2.697,517,1.309,518,1.309,519,1.309,520,1.352,541,1.309,542,2.549,543,3.225,544,3.225,545,3.225,546,2.697,547,3.718,548,2.549,549,2.709,550,2.132,551,1.565,552,1.565,553,2.549,554,1.565,555,1.565,556,2.549,557,1.565,558,2.549,559,1.565,560,3.718,561,2.549,562,1.565,563,3.718,564,1.565,565,1.565,566,1.309,567,1.309,568,1.565,569,1.565,570,1.565,571,1.565,572,1.565,573,1.565,574,1.565,575,1.565,576,1.565,577,1.565,578,1.565,579,1.565,580,1.565,581,1.565,582,1.565]],["title/controllers/StatsController.html",[0,1.306,583,2.071]],["body/controllers/StatsController.html",[0,2.063,2,1.349,3,0.264,4,0.264,5,0.224,7,2.14,8,0.032,9,0.87,14,0.535,15,1.549,17,2.89,25,0.87,28,1.822,29,1.549,30,0.963,32,0.588,36,2.14,37,1.927,40,0.264,41,0.016,43,1.467,44,1.349,48,1.349,49,1.599,58,0.016,59,0.021,60,0.016,91,1.349,378,2.867,392,3.249,400,1.927,401,1.927,402,2.406,441,2.762,472,1.927,475,4.239,583,2.89,584,2.762,585,3.302,586,4.459,587,4.459,588,4.522,589,4.522,590,4.459,591,3.302,592,3.729,593,4.459,594,3.302,595,3.729,596,2.762,597,2.762,598,2.994,599,2.762,600,3.302,601,3.302,602,3.302,603,3.302]],["title/modules/StatsModule.html",[61,0.569,77,1.865]],["body/modules/StatsModule.html",[2,1.988,3,0.301,4,0.301,5,0.256,8,0.031,30,1.05,32,0.671,40,0.301,41,0.018,58,0.018,59,0.023,60,0.018,61,0.96,63,1.208,64,1.825,65,2.2,66,2.2,67,1.825,68,3.146,69,1.674,73,1.674,77,3.634,78,2.841,79,2.2,80,2.2,84,2.162,155,2.925,156,2.442,157,1.998,433,2.746,583,3.493,598,3.202,599,3.152,604,3.152,605,3.769,606,3.152,607,3.769,608,3.769]],["title/injectables/StatsService.html",[107,1.11,598,1.694]],["body/injectables/StatsService.html",[3,0.176,4,0.176,5,0.15,8,0.032,9,0.651,10,2.165,14,0.358,15,1.16,20,1.027,25,1.029,28,1.365,29,1.16,30,0.718,32,0.393,40,0.176,41,0.01,43,2.65,44,2.438,48,1.365,49,2.177,51,2.965,53,2.383,58,0.01,59,0.016,60,0.01,90,1.069,91,0.902,92,1.069,107,1.16,108,1.17,111,2.965,112,1.071,138,2.045,154,0.902,247,3.291,250,2.797,252,2.631,257,1.95,265,1.95,282,1.771,327,2.165,368,2.46,378,2.383,410,1.95,439,1.608,444,2.165,445,3.958,460,2.794,461,2.434,472,1.289,475,3.7,546,3.371,549,2.434,550,2.794,566,2.794,567,1.846,588,3.759,589,3.759,592,3.759,595,2.794,596,1.846,597,1.846,598,1.771,609,1.846,610,3.341,611,3.341,612,4.031,613,4.031,614,4.031,615,3.341,616,2.208,617,2.208,618,3.341,619,2.208,620,4.495,621,3.341,622,2.208,623,2.208,624,2.208,625,2.208,626,2.208,627,2.208,628,2.208,629,2.208,630,2.208,631,2.208]],["title/interfaces/SwitchState.html",[511,1.865,632,2.071]],["body/interfaces/SwitchState.html",[3,0.344,4,0.344,5,0.293,8,0.031,9,0.84,14,0.698,20,0.916,40,0.344,58,0.02,59,0.025,60,0.02,112,1.697,501,4.47,502,3.856,511,3.089,514,3.137,632,2.79,633,4.306,634,3.601,635,3.601,636,4.306,637,5.293,638,5.293,639,5.293]],["title/coverage.html",[640,3.647]],["body/coverage.html",[0,2.198,1,2.115,5,0.222,6,2.729,8,0.031,13,1.905,20,0.695,23,0.966,33,1.73,41,0.028,45,1.905,58,0.015,59,0.021,60,0.015,67,1.581,99,2.115,107,1.954,109,2.729,122,1.73,124,2.729,161,1.73,162,2.729,215,1.905,216,2.729,241,2.729,316,2.729,338,1.73,339,2.729,353,2.729,365,2.115,366,2.729,397,1.73,435,2.729,472,1.905,473,2.729,474,2.729,483,2.115,484,2.729,511,1.905,520,1.73,541,2.729,583,2.115,584,2.729,598,1.73,609,2.729,632,2.115,634,2.729,635,2.729,640,2.729,641,2.729,642,3.264,643,3.264,644,6.489,645,5.381,646,5.019,647,3.223,648,3.264,649,4.424,650,3.264,651,2.729,652,3.264,653,5.019,654,4.424,655,3.264,656,3.264,657,3.264,658,3.264,659,3.264,660,3.264]],["title/dependencies.html",[64,1.861,661,2.669]],["body/dependencies.html",[8,0.031,32,0.776,37,2.543,58,0.021,59,0.025,60,0.021,64,2.11,154,1.78,290,3.174,291,3.883,292,3.643,332,4.458,662,5.76,663,4.356,664,4.356,665,4.356,666,4.356,667,4.356,668,4.356,669,4.356,670,4.356,671,4.356,672,4.356,673,4.356,674,4.356,675,4.356,676,4.356,677,4.356]],["title/miscellaneous/functions.html",[678,1.729,679,3.214]],["body/miscellaneous/functions.html",[8,0.027,14,0.793,58,0.023,59,0.027,60,0.023,67,2.93,282,2.592,307,4.089,308,4.089,647,3.562,678,3.168,679,4.089,680,4.089]],["title/index.html",[14,0.433,681,2.669,682,2.669]],["body/index.html",[8,0.03,23,1.444,51,3.151,58,0.018,59,0.023,60,0.018,110,2.755,111,2.207,121,3.16,137,1.832,245,2.005,258,3.553,282,2.586,290,2.755,291,4.155,319,3.163,444,2.451,549,2.755,641,4.079,683,4.877,684,4.877,685,3.782,686,3.782,687,3.782,688,4.877,689,3.782,690,3.782,691,3.782,692,3.782,693,4.877,694,4.877,695,5.399,696,3.782,697,3.782,698,3.782,699,3.782,700,3.782,701,3.782,702,3.782,703,3.782,704,4.877,705,3.782,706,3.782,707,3.782,708,3.782,709,4.877,710,3.782,711,3.782,712,3.782,713,3.782,714,3.782,715,3.782,716,3.782,717,3.782,718,3.782,719,3.782]],["title/modules.html",[63,1.398]],["body/modules.html",[8,0.025,58,0.021,59,0.025,60,0.021,62,2.801,63,1.386,73,1.92,74,2.523,75,2.523,76,2.523,77,2.523,155,2.093,245,2.292,419,2.523,720,5.985,721,5.985,722,5.985,723,6.445,724,6.143,725,6.143]],["title/overview.html",[726,3.647]],["body/overview.html",[2,1.416,8,0.03,33,2.743,58,0.016,59,0.022,60,0.016,61,0.617,62,4.158,63,1.111,64,1.678,65,2.023,66,2.023,67,1.678,68,2.023,69,1.539,70,2.898,71,2.898,72,2.898,73,2.298,74,3.02,75,3.515,76,3.515,77,3.515,78,2.689,79,2.023,80,2.023,108,1.837,123,1.539,155,2.67,238,2.898,362,2.898,397,2.743,419,3.02,427,2.525,429,2.898,430,2.898,431,2.898,520,2.743,536,2.898,537,2.898,538,2.898,598,2.743,604,2.898,606,2.898,632,2.246,726,2.898,727,3.466,728,3.466]],["title/miscellaneous/variables.html",[678,1.729,729,3.214]],["body/miscellaneous/variables.html",[8,0.029,14,0.766,58,0.022,59,0.027,60,0.022,115,3.442,116,3.061,647,3.442,651,4.988,678,3.061,680,3.951,729,3.951,730,4.724,731,4.724,732,4.724,733,4.724,734,4.724,735,4.724,736,4.724]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/City.html":{},"modules/ConfigurationModule.html":{},"classes/Ephemeride.html":{},"classes/Forecast.html":{},"classes/Hello.html":{},"modules/HttpModule.html":{},"modules/LogModule.html":{},"injectables/LoggerMiddleware.html":{},"classes/Measurement.html":{},"classes/Meteo.html":{},"controllers/MeteoController.html":{},"modules/MeteoHttpModule.html":{},"modules/MeteoModule.html":{},"injectables/MeteoService.html":{},"classes/MeteoStats.html":{},"controllers/StationController.html":{},"modules/StationHttpModule.html":{},"modules/StationModule.html":{},"injectables/StationService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"interfaces/SwitchState.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":179,"title":{},"body":{"classes/Ephemeride.html":{},"classes/Forecast.html":{}}}],["0.1.13",{"_index":672,"title":{},"body":{"dependencies.html":{}}}],["0.6.3",{"_index":663,"title":{},"body":{"dependencies.html":{}}}],["02",{"_index":205,"title":{},"body":{"classes/Ephemeride.html":{},"classes/Forecast.html":{}}}],["06:00",{"_index":363,"title":{},"body":{"classes/Meteo.html":{}}}],["07t00:00:00+0100",{"_index":206,"title":{},"body":{"classes/Ephemeride.html":{},"classes/Forecast.html":{}}}],["08:23",{"_index":207,"title":{},"body":{"classes/Ephemeride.html":{}}}],["09:54",{"_index":209,"title":{},"body":{"classes/Ephemeride.html":{}}}],["1",{"_index":362,"title":{},"body":{"classes/Meteo.html":{},"overview.html":{}}}],["1.4.0",{"_index":669,"title":{},"body":{"dependencies.html":{}}}],["1.6819",{"_index":203,"title":{},"body":{"classes/Ephemeride.html":{}}}],["1/1",{"_index":649,"title":{},"body":{"coverage.html":{}}}],["10/10",{"_index":655,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":644,"title":{},"body":{"coverage.html":{}}}],["11",{"_index":239,"title":{},"body":{"classes/Forecast.html":{},"classes/Meteo.html":{}}}],["12/12",{"_index":654,"title":{},"body":{"coverage.html":{}}}],["17",{"_index":240,"title":{},"body":{"classes/Forecast.html":{}}}],["18",{"_index":361,"title":{},"body":{"classes/Meteo.html":{}}}],["18:17",{"_index":208,"title":{},"body":{"classes/Ephemeride.html":{}}}],["2",{"_index":637,"title":{},"body":{"interfaces/SwitchState.html":{}}}],["2.3941",{"_index":150,"title":{},"body":{"classes/City.html":{}}}],["2/2",{"_index":645,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":351,"title":{},"body":{"classes/Measurement.html":{},"classes/Meteo.html":{}}}],["20.05",{"_index":350,"title":{},"body":{"classes/Measurement.html":{}}}],["200",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"controllers/MeteoController.html":{},"controllers/StationController.html":{}}}],["2020",{"_index":360,"title":{},"body":{"classes/Meteo.html":{}}}],["2021",{"_index":204,"title":{},"body":{"classes/Ephemeride.html":{},"classes/Forecast.html":{}}}],["2156464561231",{"_index":482,"title":{},"body":{"classes/MeteoStats.html":{}}}],["21:00",{"_index":364,"title":{},"body":{"classes/Meteo.html":{}}}],["25.4",{"_index":212,"title":{},"body":{"classes/Ephemeride.html":{}}}],["3",{"_index":210,"title":{},"body":{"classes/Ephemeride.html":{}}}],["3.3.3",{"_index":677,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":646,"title":{},"body":{"coverage.html":{}}}],["35.50",{"_index":352,"title":{},"body":{"classes/Measurement.html":{}}}],["4",{"_index":238,"title":{},"body":{"classes/Forecast.html":{},"overview.html":{}}}],["4.1.6",{"_index":676,"title":{},"body":{"dependencies.html":{}}}],["4.4.1",{"_index":668,"title":{},"body":{"dependencies.html":{}}}],["4.7.12",{"_index":666,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":657,"title":{},"body":{"coverage.html":{}}}],["48.112",{"_index":202,"title":{},"body":{"classes/Ephemeride.html":{},"classes/Forecast.html":{}}}],["48.7883",{"_index":149,"title":{},"body":{"classes/City.html":{}}}],["5",{"_index":427,"title":{},"body":{"modules/MeteoHttpModule.html":{},"modules/StationHttpModule.html":{},"overview.html":{}}}],["5/5",{"_index":652,"title":{},"body":{"coverage.html":{}}}],["56",{"_index":151,"title":{},"body":{"classes/City.html":{}}}],["6.6.3",{"_index":673,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":656,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":728,"title":{},"body":{"overview.html":{}}}],["7.5.1",{"_index":662,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":653,"title":{},"body":{"coverage.html":{}}}],["7000",{"_index":425,"title":{},"body":{"modules/MeteoHttpModule.html":{},"modules/StationHttpModule.html":{}}}],["8/8",{"_index":658,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":731,"title":{},"body":{"miscellaneous/variables.html":{}}}],["9",{"_index":727,"title":{},"body":{"overview.html":{}}}],["94081",{"_index":147,"title":{},"body":{"classes/City.html":{},"classes/Ephemeride.html":{},"classes/Forecast.html":{},"injectables/MeteoService.html":{}}}],["94400",{"_index":148,"title":{},"body":{"classes/City.html":{},"classes/Forecast.html":{}}}],["according",{"_index":384,"title":{},"body":{"controllers/MeteoController.html":{}}}],["actual",{"_index":374,"title":{},"body":{"controllers/MeteoController.html":{}}}],["add",{"_index":254,"title":{},"body":{"modules/HttpModule.html":{}}}],["advanced",{"_index":697,"title":{},"body":{"index.html":{}}}],["age",{"_index":194,"title":{},"body":{"classes/Ephemeride.html":{}}}],["alls",{"_index":611,"title":{},"body":{"injectables/StatsService.html":{}}}],["altitude",{"_index":128,"title":{},"body":{"classes/City.html":{}}}],["another",{"_index":736,"title":{},"body":{"miscellaneous/variables.html":{}}}],["anything",{"_index":12,"title":{},"body":{"controllers/AppController.html":{}}}],["api",{"_index":51,"title":{},"body":{"controllers/AppController.html":{},"injectables/MeteoService.html":{},"injectables/StationService.html":{},"injectables/StatsService.html":{},"index.html":{}}}],["api'})@get",{"_index":24,"title":{},"body":{"controllers/AppController.html":{}}}],["apiheader",{"_index":392,"title":{},"body":{"controllers/MeteoController.html":{},"controllers/StationController.html":{},"controllers/StatsController.html":{}}}],["apiresponse",{"_index":35,"title":{},"body":{"controllers/AppController.html":{},"controllers/MeteoController.html":{},"controllers/StationController.html":{}}}],["apiresponse({status",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"controllers/MeteoController.html":{}}}],["apitags",{"_index":36,"title":{},"body":{"controllers/AppController.html":{},"controllers/MeteoController.html":{},"controllers/StationController.html":{},"controllers/StatsController.html":{}}}],["apitags('hello",{"_index":39,"title":{},"body":{"controllers/AppController.html":{}}}],["apitags('meteo",{"_index":399,"title":{},"body":{"controllers/MeteoController.html":{}}}],["apitags('station",{"_index":522,"title":{},"body":{"controllers/StationController.html":{}}}],["apitags('stats",{"_index":600,"title":{},"body":{"controllers/StatsController.html":{}}}],["app",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["app.controller",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":34,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":308,"title":{},"body":{"modules/LogModule.html":{},"miscellaneous/functions.html":{}}}],["apply(loggermiddleware",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["appmodule",{"_index":62,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":33,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["async",{"_index":368,"title":{},"body":{"controllers/MeteoController.html":{},"modules/MeteoHttpModule.html":{},"injectables/MeteoService.html":{},"controllers/StationController.html":{},"modules/StationHttpModule.html":{},"injectables/StationService.html":{},"injectables/StatsService.html":{}}}],["authorization",{"_index":400,"title":{},"body":{"controllers/MeteoController.html":{},"modules/MeteoHttpModule.html":{},"controllers/StationController.html":{},"modules/StationHttpModule.html":{},"controllers/StatsController.html":{}}}],["available",{"_index":725,"title":{},"body":{"modules.html":{}}}],["await",{"_index":410,"title":{},"body":{"controllers/MeteoController.html":{},"injectables/MeteoService.html":{},"controllers/StationController.html":{},"injectables/StationService.html":{},"injectables/StatsService.html":{}}}],["axios",{"_index":260,"title":{},"body":{"modules/HttpModule.html":{}}}],["axios.interceptors.request.use((config",{"_index":262,"title":{},"body":{"modules/HttpModule.html":{}}}],["axios.interceptors.response.use",{"_index":266,"title":{},"body":{"modules/HttpModule.html":{}}}],["back",{"_index":683,"title":{},"body":{"index.html":{}}}],["basehttpmodule",{"_index":251,"title":{},"body":{"modules/HttpModule.html":{},"modules/MeteoHttpModule.html":{},"modules/StationHttpModule.html":{}}}],["basehttpmodule.registerasync",{"_index":422,"title":{},"body":{"modules/MeteoHttpModule.html":{},"modules/StationHttpModule.html":{}}}],["bearer",{"_index":401,"title":{},"body":{"controllers/MeteoController.html":{},"modules/MeteoHttpModule.html":{},"controllers/StationController.html":{},"modules/StationHttpModule.html":{},"controllers/StatsController.html":{}}}],["before",{"_index":186,"title":{},"body":{"classes/Ephemeride.html":{}}}],["body",{"_index":390,"title":{},"body":{"controllers/MeteoController.html":{},"controllers/StationController.html":{}}}],["bootstrap",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"modules/MeteoModule.html":{},"modules/StationModule.html":{},"modules/StatsModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":723,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":720,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":618,"title":{},"body":{"injectables/StatsService.html":{}}}],["bucketdaily",{"_index":612,"title":{},"body":{"injectables/StatsService.html":{}}}],["bucketh24",{"_index":613,"title":{},"body":{"injectables/StatsService.html":{}}}],["buckets",{"_index":620,"title":{},"body":{"injectables/StatsService.html":{}}}],["c",{"_index":230,"title":{},"body":{"classes/Forecast.html":{},"classes/Measurement.html":{},"classes/Meteo.html":{}}}],["call",{"_index":327,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/MeteoService.html":{},"injectables/StationService.html":{},"injectables/StatsService.html":{}}}],["called",{"_index":610,"title":{},"body":{"injectables/StatsService.html":{}}}],["cf",{"_index":234,"title":{},"body":{"classes/Forecast.html":{}}}],["choose",{"_index":735,"title":{},"body":{"miscellaneous/variables.html":{}}}],["city",{"_index":122,"title":{"classes/City.html":{}},"body":{"classes/City.html":{},"classes/Ephemeride.html":{},"controllers/MeteoController.html":{},"injectables/MeteoService.html":{},"coverage.html":{}}}],["city's",{"_index":375,"title":{},"body":{"controllers/MeteoController.html":{}}}],["city\\'s",{"_index":412,"title":{},"body":{"controllers/MeteoController.html":{}}}],["citydetail",{"_index":409,"title":{},"body":{"controllers/MeteoController.html":{}}}],["class",{"_index":41,"title":{"classes/City.html":{},"classes/Ephemeride.html":{},"classes/Forecast.html":{},"classes/Hello.html":{},"classes/Measurement.html":{},"classes/Meteo.html":{},"classes/MeteoStats.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/City.html":{},"modules/ConfigurationModule.html":{},"classes/Ephemeride.html":{},"classes/Forecast.html":{},"classes/Hello.html":{},"modules/HttpModule.html":{},"modules/LogModule.html":{},"injectables/LoggerMiddleware.html":{},"classes/Measurement.html":{},"classes/Meteo.html":{},"controllers/MeteoController.html":{},"modules/MeteoHttpModule.html":{},"modules/MeteoModule.html":{},"injectables/MeteoService.html":{},"classes/MeteoStats.html":{},"controllers/StationController.html":{},"modules/StationHttpModule.html":{},"modules/StationModule.html":{},"injectables/StationService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"coverage.html":{}}}],["classes",{"_index":123,"title":{},"body":{"classes/City.html":{},"classes/Ephemeride.html":{},"classes/Forecast.html":{},"classes/Hello.html":{},"classes/Measurement.html":{},"classes/Meteo.html":{},"classes/MeteoStats.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_meteomodule",{"_index":429,"title":{},"body":{"modules/MeteoModule.html":{},"overview.html":{}}}],["cluster_meteomodule_imports",{"_index":430,"title":{},"body":{"modules/MeteoModule.html":{},"overview.html":{}}}],["cluster_meteomodule_providers",{"_index":431,"title":{},"body":{"modules/MeteoModule.html":{},"overview.html":{}}}],["cluster_stationmodule",{"_index":536,"title":{},"body":{"modules/StationModule.html":{},"overview.html":{}}}],["cluster_stationmodule_imports",{"_index":537,"title":{},"body":{"modules/StationModule.html":{},"overview.html":{}}}],["cluster_stationmodule_providers",{"_index":538,"title":{},"body":{"modules/StationModule.html":{},"overview.html":{}}}],["cluster_statsmodule",{"_index":604,"title":{},"body":{"modules/StatsModule.html":{},"overview.html":{}}}],["cluster_statsmodule_imports",{"_index":605,"title":{},"body":{"modules/StatsModule.html":{}}}],["cluster_statsmodule_providers",{"_index":606,"title":{},"body":{"modules/StatsModule.html":{},"overview.html":{}}}],["code",{"_index":137,"title":{},"body":{"classes/City.html":{},"classes/Ephemeride.html":{},"classes/Forecast.html":{},"classes/Meteo.html":{},"controllers/MeteoController.html":{},"injectables/MeteoService.html":{},"index.html":{}}}],["command",{"_index":542,"title":{},"body":{"injectables/StationService.html":{}}}],["communicating",{"_index":685,"title":{},"body":{"index.html":{}}}],["compared",{"_index":185,"title":{},"body":{"classes/Ephemeride.html":{}}}],["compodoc",{"_index":709,"title":{},"body":{"index.html":{}}}],["concept",{"_index":443,"title":{},"body":{"injectables/MeteoService.html":{}}}],["concept.com/documentation#code",{"_index":236,"title":{},"body":{"classes/Forecast.html":{}}}],["config",{"_index":265,"title":{},"body":{"modules/HttpModule.html":{},"modules/LogModule.html":{},"injectables/MeteoService.html":{},"injectables/StationService.html":{},"injectables/StatsService.html":{}}}],["config.method.touppercase",{"_index":271,"title":{},"body":{"modules/HttpModule.html":{}}}],["config.url",{"_index":272,"title":{},"body":{"modules/HttpModule.html":{}}}],["config['metadata",{"_index":263,"title":{},"body":{"modules/HttpModule.html":{}}}],["config['metadata'].enddate.gettime",{"_index":268,"title":{},"body":{"modules/HttpModule.html":{}}}],["config['metadata'].startdate.gettime",{"_index":269,"title":{},"body":{"modules/HttpModule.html":{}}}],["configmodule",{"_index":153,"title":{},"body":{"modules/ConfigurationModule.html":{},"modules/HttpModule.html":{},"modules/LogModule.html":{},"modules/MeteoHttpModule.html":{},"modules/StationHttpModule.html":{}}}],["configmodule.forroot",{"_index":158,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["configservice",{"_index":252,"title":{},"body":{"modules/HttpModule.html":{},"modules/LogModule.html":{},"modules/MeteoHttpModule.html":{},"injectables/MeteoService.html":{},"modules/StationHttpModule.html":{},"injectables/StationService.html":{},"injectables/StatsService.html":{}}}],["configservice.get('logger_file",{"_index":311,"title":{},"body":{"modules/LogModule.html":{}}}],["configservice.get('meteo_api_bearer",{"_index":423,"title":{},"body":{"modules/MeteoHttpModule.html":{}}}],["configservice.get('thinger_io_api_bearer",{"_index":535,"title":{},"body":{"modules/StationHttpModule.html":{}}}],["configuration/configuration.module",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["configurationmodule",{"_index":73,"title":{"modules/ConfigurationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ConfigurationModule.html":{},"modules/MeteoModule.html":{},"modules/StationModule.html":{},"modules/StatsModule.html":{},"modules.html":{},"overview.html":{}}}],["configure",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["configure(consumer",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["connected",{"_index":120,"title":{},"body":{"injectables/AppService.html":{},"injectables/StationService.html":{}}}],["console",{"_index":300,"title":{},"body":{"modules/LogModule.html":{}}}],["console.log(req.method",{"_index":333,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["console.log(url",{"_index":468,"title":{},"body":{"injectables/MeteoService.html":{}}}],["const",{"_index":53,"title":{},"body":{"controllers/AppController.html":{},"modules/HttpModule.html":{},"controllers/MeteoController.html":{},"injectables/MeteoService.html":{},"injectables/StationService.html":{},"injectables/StatsService.html":{}}}],["constructor",{"_index":49,"title":{},"body":{"controllers/AppController.html":{},"modules/HttpModule.html":{},"controllers/MeteoController.html":{},"injectables/MeteoService.html":{},"injectables/StationService.html":{},"controllers/StatsController.html":{},"injectables/StatsService.html":{}}}],["constructor(httpservice",{"_index":439,"title":{},"body":{"injectables/MeteoService.html":{},"injectables/StationService.html":{},"injectables/StatsService.html":{}}}],["constructor(private",{"_index":524,"title":{},"body":{"controllers/StationController.html":{}}}],["consumer",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["consumers",{"_index":89,"title":{},"body":{"modules/AppModule.html":{}}}],["contoller",{"_index":42,"title":{},"body":{"controllers/AppController.html":{}}}],["control",{"_index":485,"title":{},"body":{"controllers/StationController.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/MeteoController.html":{},"controllers/StationController.html":{},"controllers/StatsController.html":{}},"body":{"controllers/AppController.html":{},"controllers/MeteoController.html":{},"controllers/StationController.html":{},"controllers/StatsController.html":{},"coverage.html":{}}}],["controller('meteo",{"_index":403,"title":{},"body":{"controllers/MeteoController.html":{}}}],["controller('station",{"_index":523,"title":{},"body":{"controllers/StationController.html":{}}}],["controller('station/stats",{"_index":601,"title":{},"body":{"controllers/StatsController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/MeteoController.html":{},"modules/MeteoModule.html":{},"controllers/StationController.html":{},"modules/StationModule.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"overview.html":{}}}],["coverage",{"_index":640,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["cp",{"_index":129,"title":{},"body":{"classes/City.html":{},"classes/Forecast.html":{}}}],["croissant",{"_index":214,"title":{},"body":{"classes/Ephemeride.html":{}}}],["current",{"_index":500,"title":{},"body":{"controllers/StationController.html":{},"injectables/StationService.html":{}}}],["daily",{"_index":592,"title":{},"body":{"controllers/StatsController.html":{},"injectables/StatsService.html":{}}}],["date",{"_index":176,"title":{},"body":{"classes/Ephemeride.html":{},"classes/Forecast.html":{},"modules/HttpModule.html":{},"classes/Meteo.html":{}}}],["datetime",{"_index":169,"title":{},"body":{"classes/Ephemeride.html":{},"classes/Forecast.html":{}}}],["day",{"_index":170,"title":{},"body":{"classes/Ephemeride.html":{},"classes/Forecast.html":{}}}],["declarations",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"modules/MeteoModule.html":{},"modules/StationModule.html":{},"modules/StatsModule.html":{},"overview.html":{}}}],["decorators",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"controllers/MeteoController.html":{},"controllers/StationController.html":{},"controllers/StatsController.html":{}}}],["default",{"_index":115,"title":{},"body":{"injectables/AppService.html":{},"modules/LogModule.html":{},"miscellaneous/variables.html":{}}}],["define",{"_index":732,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defined",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/City.html":{},"classes/Ephemeride.html":{},"classes/Forecast.html":{},"classes/Hello.html":{},"modules/HttpModule.html":{},"injectables/LoggerMiddleware.html":{},"classes/Measurement.html":{},"classes/Meteo.html":{},"controllers/MeteoController.html":{},"injectables/MeteoService.html":{},"classes/MeteoStats.html":{},"controllers/StationController.html":{},"injectables/StationService.html":{},"controllers/StatsController.html":{},"injectables/StatsService.html":{}}}],["deleted",{"_index":305,"title":{},"body":{"modules/LogModule.html":{}}}],["dependencies",{"_index":64,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/MeteoModule.html":{},"modules/StationModule.html":{},"modules/StatsModule.html":{},"dependencies.html":{},"overview.html":{}}}],["dernier",{"_index":213,"title":{},"body":{"classes/Ephemeride.html":{}}}],["description",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/City.html":{},"classes/Ephemeride.html":{},"classes/Forecast.html":{},"classes/Hello.html":{},"injectables/LoggerMiddleware.html":{},"classes/Measurement.html":{},"classes/Meteo.html":{},"controllers/MeteoController.html":{},"injectables/MeteoService.html":{},"classes/MeteoStats.html":{},"controllers/StationController.html":{},"injectables/StationService.html":{},"controllers/StatsController.html":{},"injectables/StatsService.html":{},"interfaces/SwitchState.html":{}}}],["detail",{"_index":218,"title":{},"body":{"classes/Forecast.html":{},"controllers/MeteoController.html":{},"injectables/MeteoService.html":{}}}],["device",{"_index":560,"title":{},"body":{"injectables/StationService.html":{}}}],["deviceid",{"_index":543,"title":{},"body":{"injectables/StationService.html":{}}}],["devices",{"_index":496,"title":{},"body":{"controllers/StationController.html":{},"injectables/StationService.html":{}}}],["devicesurl",{"_index":544,"title":{},"body":{"injectables/StationService.html":{}}}],["diff_duration_day",{"_index":171,"title":{},"body":{"classes/Ephemeride.html":{}}}],["diff_duration_day:number",{"_index":211,"title":{},"body":{"classes/Ephemeride.html":{}}}],["doc",{"_index":690,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":641,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["documentations",{"_index":687,"title":{},"body":{"index.html":{}}}],["documented",{"_index":708,"title":{},"body":{"index.html":{}}}],["don't",{"_index":277,"title":{},"body":{"modules/HttpModule.html":{}}}],["duration",{"_index":184,"title":{},"body":{"classes/Ephemeride.html":{},"modules/HttpModule.html":{}}}],["duration_day",{"_index":172,"title":{},"body":{"classes/Ephemeride.html":{}}}],["duration}ms",{"_index":273,"title":{},"body":{"modules/HttpModule.html":{}}}],["each",{"_index":306,"title":{},"body":{"modules/LogModule.html":{}}}],["enable",{"_index":367,"title":{},"body":{"controllers/MeteoController.html":{}}}],["end",{"_index":684,"title":{},"body":{"index.html":{}}}],["enddate",{"_index":267,"title":{},"body":{"modules/HttpModule.html":{}}}],["ended",{"_index":329,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["entity",{"_index":125,"title":{},"body":{"classes/City.html":{},"classes/Hello.html":{},"classes/Meteo.html":{}}}],["env",{"_index":733,"title":{},"body":{"miscellaneous/variables.html":{}}}],["epehemeride",{"_index":163,"title":{},"body":{"classes/Ephemeride.html":{}}}],["ephemeride",{"_index":161,"title":{"classes/Ephemeride.html":{}},"body":{"classes/Ephemeride.html":{},"classes/Forecast.html":{},"controllers/MeteoController.html":{},"injectables/MeteoService.html":{},"coverage.html":{}}}],["ephemeride'})@get('ephemeride/:city",{"_index":376,"title":{},"body":{"controllers/MeteoController.html":{}}}],["err",{"_index":275,"title":{},"body":{"modules/HttpModule.html":{}}}],["ex",{"_index":449,"title":{},"body":{"injectables/MeteoService.html":{}}}],["example",{"_index":143,"title":{},"body":{"classes/City.html":{},"classes/Ephemeride.html":{},"classes/Forecast.html":{},"classes/Hello.html":{},"classes/Measurement.html":{},"classes/Meteo.html":{},"classes/MeteoStats.html":{}}}],["example/blob/master/src/http/http.module.ts",{"_index":719,"title":{},"body":{"index.html":{}}}],["export",{"_index":40,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/City.html":{},"modules/ConfigurationModule.html":{},"classes/Ephemeride.html":{},"classes/Forecast.html":{},"classes/Hello.html":{},"modules/HttpModule.html":{},"modules/LogModule.html":{},"injectables/LoggerMiddleware.html":{},"classes/Measurement.html":{},"classes/Meteo.html":{},"controllers/MeteoController.html":{},"modules/MeteoHttpModule.html":{},"modules/MeteoModule.html":{},"injectables/MeteoService.html":{},"classes/MeteoStats.html":{},"controllers/StationController.html":{},"modules/StationHttpModule.html":{},"modules/StationModule.html":{},"injectables/StationService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"interfaces/SwitchState.html":{}}}],["exports",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"modules/LogModule.html":{},"modules/MeteoHttpModule.html":{},"modules/MeteoModule.html":{},"modules/StationHttpModule.html":{},"modules/StationModule.html":{},"modules/StatsModule.html":{},"overview.html":{}}}],["exposed",{"_index":712,"title":{},"body":{"index.html":{}}}],["express",{"_index":332,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"dependencies.html":{}}}],["extends",{"_index":428,"title":{},"body":{"modules/MeteoHttpModule.html":{},"modules/StationHttpModule.html":{}}}],["failed",{"_index":281,"title":{},"body":{"modules/HttpModule.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/City.html":{},"modules/ConfigurationModule.html":{},"classes/Ephemeride.html":{},"classes/Forecast.html":{},"classes/Hello.html":{},"modules/HttpModule.html":{},"modules/LogModule.html":{},"injectables/LoggerMiddleware.html":{},"classes/Measurement.html":{},"classes/Meteo.html":{},"controllers/MeteoController.html":{},"modules/MeteoHttpModule.html":{},"modules/MeteoModule.html":{},"injectables/MeteoService.html":{},"classes/MeteoStats.html":{},"controllers/StationController.html":{},"modules/StationHttpModule.html":{},"modules/StationModule.html":{},"injectables/StationService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"interfaces/SwitchState.html":{},"coverage.html":{}}}],["filename",{"_index":310,"title":{},"body":{"modules/LogModule.html":{}}}],["first",{"_index":180,"title":{},"body":{"classes/Ephemeride.html":{},"classes/Forecast.html":{},"modules/HttpModule.html":{}}}],["flags",{"_index":314,"title":{},"body":{"modules/LogModule.html":{}}}],["forecast",{"_index":215,"title":{"classes/Forecast.html":{}},"body":{"classes/Forecast.html":{},"controllers/MeteoController.html":{},"injectables/MeteoService.html":{},"coverage.html":{}}}],["forecast'})@get('forecasts/:city",{"_index":380,"title":{},"body":{"controllers/MeteoController.html":{}}}],["forecasts",{"_index":452,"title":{},"body":{"injectables/MeteoService.html":{}}}],["forget",{"_index":278,"title":{},"body":{"modules/HttpModule.html":{}}}],["format",{"_index":296,"title":{},"body":{"modules/LogModule.html":{}}}],["formats",{"_index":703,"title":{},"body":{"index.html":{}}}],["forroutes",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["french",{"_index":198,"title":{},"body":{"classes/Ephemeride.html":{}}}],["function",{"_index":648,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":679,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["gain",{"_index":182,"title":{},"body":{"classes/Ephemeride.html":{}}}],["get(':city",{"_index":407,"title":{},"body":{"controllers/MeteoController.html":{}}}],["get('city/:city",{"_index":404,"title":{},"body":{"controllers/MeteoController.html":{}}}],["get('daily",{"_index":590,"title":{},"body":{"controllers/StatsController.html":{}}}],["get('device",{"_index":491,"title":{},"body":{"controllers/StationController.html":{}}}],["get('device/:resource/state",{"_index":498,"title":{},"body":{"controllers/StationController.html":{}}}],["get('device/mesurement",{"_index":529,"title":{},"body":{"controllers/StationController.html":{}}}],["get('device/mesurement')@apiresponse({status",{"_index":506,"title":{},"body":{"controllers/StationController.html":{}}}],["get('devices",{"_index":494,"title":{},"body":{"controllers/StationController.html":{}}}],["get('ephemeride/:city",{"_index":413,"title":{},"body":{"controllers/MeteoController.html":{}}}],["get('forecasts/:city",{"_index":416,"title":{},"body":{"controllers/MeteoController.html":{}}}],["get('realtime",{"_index":593,"title":{},"body":{"controllers/StatsController.html":{}}}],["getdailystats",{"_index":588,"title":{},"body":{"controllers/StatsController.html":{},"injectables/StatsService.html":{}}}],["getdevice",{"_index":486,"title":{},"body":{"controllers/StationController.html":{},"injectables/StationService.html":{}}}],["getdevices",{"_index":487,"title":{},"body":{"controllers/StationController.html":{},"injectables/StationService.html":{}}}],["getephemeride",{"_index":437,"title":{},"body":{"injectables/MeteoService.html":{}}}],["getephemeride(insee",{"_index":446,"title":{},"body":{"injectables/MeteoService.html":{}}}],["getephemride",{"_index":369,"title":{},"body":{"controllers/MeteoController.html":{}}}],["getephemride(@param('city",{"_index":414,"title":{},"body":{"controllers/MeteoController.html":{}}}],["getephemride(city",{"_index":373,"title":{},"body":{"controllers/MeteoController.html":{}}}],["getforecasts",{"_index":370,"title":{},"body":{"controllers/MeteoController.html":{},"injectables/MeteoService.html":{}}}],["getforecasts(@param('city",{"_index":417,"title":{},"body":{"controllers/MeteoController.html":{}}}],["getforecasts(city",{"_index":379,"title":{},"body":{"controllers/MeteoController.html":{}}}],["getforecasts(insee",{"_index":450,"title":{},"body":{"injectables/MeteoService.html":{}}}],["gethello",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getlacolisation",{"_index":371,"title":{},"body":{"controllers/MeteoController.html":{}}}],["getlacolisation(@param('city",{"_index":405,"title":{},"body":{"controllers/MeteoController.html":{}}}],["getlacolisation(city",{"_index":382,"title":{},"body":{"controllers/MeteoController.html":{}}}],["getmeteo",{"_index":372,"title":{},"body":{"controllers/MeteoController.html":{},"injectables/MeteoService.html":{}}}],["getmeteo(@param('city",{"_index":408,"title":{},"body":{"controllers/MeteoController.html":{}}}],["getmeteo(city",{"_index":387,"title":{},"body":{"controllers/MeteoController.html":{}}}],["getmeteo(insee",{"_index":453,"title":{},"body":{"injectables/MeteoService.html":{}}}],["getmeteomeasurement",{"_index":547,"title":{},"body":{"injectables/StationService.html":{}}}],["getrealtimestats",{"_index":589,"title":{},"body":{"controllers/StatsController.html":{},"injectables/StatsService.html":{}}}],["getstate",{"_index":488,"title":{},"body":{"controllers/StationController.html":{},"injectables/StationService.html":{}}}],["getstate(@param('resource",{"_index":527,"title":{},"body":{"controllers/StationController.html":{}}}],["getstate(resource",{"_index":497,"title":{},"body":{"controllers/StationController.html":{},"injectables/StationService.html":{}}}],["getting",{"_index":681,"title":{"index.html":{}},"body":{}}],["github",{"_index":699,"title":{},"body":{"index.html":{}}}],["graph",{"_index":724,"title":{},"body":{"modules.html":{}}}],["h24",{"_index":621,"title":{},"body":{"injectables/StatsService.html":{}}}],["hardly",{"_index":11,"title":{},"body":{"controllers/AppController.html":{}}}],["headers",{"_index":335,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"modules/MeteoHttpModule.html":{},"modules/StationHttpModule.html":{}}}],["heater",{"_index":503,"title":{},"body":{"controllers/StationController.html":{},"injectables/StationService.html":{}}}],["hello",{"_index":13,"title":{"classes/Hello.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/Hello.html":{},"coverage.html":{}}}],["hello.entity",{"_index":38,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["hellomessage",{"_index":54,"title":{},"body":{"controllers/AppController.html":{}}}],["hellomessage.message",{"_index":57,"title":{},"body":{"controllers/AppController.html":{}}}],["helmet",{"_index":667,"title":{},"body":{"dependencies.html":{}}}],["here",{"_index":242,"title":{},"body":{"classes/Hello.html":{}}}],["hour",{"_index":200,"title":{},"body":{"classes/Ephemeride.html":{}}}],["hpa",{"_index":346,"title":{},"body":{"classes/Measurement.html":{}}}],["http",{"_index":282,"title":{},"body":{"modules/HttpModule.html":{},"injectables/MeteoService.html":{},"injectables/StationService.html":{},"injectables/StatsService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["http.module",{"_index":157,"title":{},"body":{"modules/ConfigurationModule.html":{},"modules/MeteoHttpModule.html":{},"modules/MeteoModule.html":{},"modules/StationHttpModule.html":{},"modules/StationModule.html":{},"modules/StatsModule.html":{}}}],["http.module.ts",{"_index":421,"title":{},"body":{"modules/MeteoHttpModule.html":{},"modules/StationHttpModule.html":{}}}],["httpmodule",{"_index":245,"title":{"modules/HttpModule.html":{}},"body":{"modules/HttpModule.html":{},"modules/MeteoHttpModule.html":{},"modules/StationHttpModule.html":{},"index.html":{},"modules.html":{}}}],["https://api.meteo",{"_index":235,"title":{},"body":{"classes/Forecast.html":{}}}],["https://compodoc.app",{"_index":711,"title":{},"body":{"index.html":{}}}],["https://developer.aliyun.com/mirror/npm/package/nest",{"_index":705,"title":{},"body":{"index.html":{}}}],["https://docs.nestjs.com",{"_index":692,"title":{},"body":{"index.html":{}}}],["https://docs.nestjs.com/openapi/introduction",{"_index":715,"title":{},"body":{"index.html":{}}}],["https://docs.nestjs.com/recipes/documentation",{"_index":710,"title":{},"body":{"index.html":{}}}],["https://github.com/paztek/nestjs",{"_index":718,"title":{},"body":{"index.html":{}}}],["https://github.com/winstonjs/winston",{"_index":700,"title":{},"body":{"index.html":{}}}],["https://github.com/winstonjs/winston#combining",{"_index":702,"title":{},"body":{"index.html":{}}}],["https://github.com/winstonjs/winston/blob/master/docs/transports.md",{"_index":701,"title":{},"body":{"index.html":{}}}],["https://www.npmjs.com/package/morgan",{"_index":696,"title":{},"body":{"index.html":{}}}],["https://www.npmjs.com/package/nest",{"_index":698,"title":{},"body":{"index.html":{}}}],["httpservice",{"_index":250,"title":{},"body":{"modules/HttpModule.html":{},"modules/MeteoHttpModule.html":{},"injectables/MeteoService.html":{},"modules/StationHttpModule.html":{},"injectables/StationService.html":{},"injectables/StatsService.html":{}}}],["humidity",{"_index":342,"title":{},"body":{"classes/Measurement.html":{},"classes/MeteoStats.html":{},"controllers/StationController.html":{},"injectables/StationService.html":{}}}],["id",{"_index":561,"title":{},"body":{"injectables/StationService.html":{}}}],["identifier",{"_index":642,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"modules/HttpModule.html":{},"injectables/LoggerMiddleware.html":{}}}],["import",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/ConfigurationModule.html":{},"modules/HttpModule.html":{},"modules/LogModule.html":{},"injectables/LoggerMiddleware.html":{},"controllers/MeteoController.html":{},"modules/MeteoHttpModule.html":{},"modules/MeteoModule.html":{},"injectables/MeteoService.html":{},"classes/MeteoStats.html":{},"controllers/StationController.html":{},"modules/StationHttpModule.html":{},"modules/StationModule.html":{},"injectables/StationService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{}}}],["imports",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"modules/ConfigurationModule.html":{},"modules/LogModule.html":{},"modules/MeteoHttpModule.html":{},"modules/MeteoModule.html":{},"modules/StationHttpModule.html":{},"modules/StationModule.html":{},"modules/StatsModule.html":{}}}],["imports:[configmodule",{"_index":294,"title":{},"body":{"modules/LogModule.html":{}}}],["index",{"_index":14,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/City.html":{},"classes/Ephemeride.html":{},"classes/Forecast.html":{},"classes/Hello.html":{},"injectables/LoggerMiddleware.html":{},"classes/Measurement.html":{},"classes/Meteo.html":{},"controllers/MeteoController.html":{},"injectables/MeteoService.html":{},"classes/MeteoStats.html":{},"controllers/StationController.html":{},"injectables/StationService.html":{},"controllers/StatsController.html":{},"injectables/StatsService.html":{},"interfaces/SwitchState.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/City.html":{},"modules/ConfigurationModule.html":{},"classes/Ephemeride.html":{},"classes/Forecast.html":{},"classes/Hello.html":{},"modules/HttpModule.html":{},"modules/LogModule.html":{},"injectables/LoggerMiddleware.html":{},"classes/Measurement.html":{},"classes/Meteo.html":{},"controllers/MeteoController.html":{},"modules/MeteoHttpModule.html":{},"modules/MeteoModule.html":{},"injectables/MeteoService.html":{},"classes/MeteoStats.html":{},"controllers/StationController.html":{},"modules/StationHttpModule.html":{},"modules/StationModule.html":{},"injectables/StationService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"interfaces/SwitchState.html":{}}}],["informations",{"_index":165,"title":{},"body":{"classes/Ephemeride.html":{}}}],["infos",{"_index":259,"title":{},"body":{"modules/HttpModule.html":{}}}],["inject",{"_index":47,"title":{},"body":{"controllers/AppController.html":{},"modules/LogModule.html":{},"modules/MeteoHttpModule.html":{},"modules/StationHttpModule.html":{}}}],["injectable",{"_index":107,"title":{"injectables/AppService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/MeteoService.html":{},"injectables/StationService.html":{},"injectables/StatsService.html":{}},"body":{"injectables/AppService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/MeteoService.html":{},"injectables/StationService.html":{},"injectables/StatsService.html":{},"coverage.html":{}}}],["injectables",{"_index":108,"title":{},"body":{"injectables/AppService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/MeteoService.html":{},"injectables/StationService.html":{},"injectables/StatsService.html":{},"overview.html":{}}}],["insee",{"_index":130,"title":{},"body":{"classes/City.html":{},"classes/Ephemeride.html":{},"classes/Forecast.html":{},"controllers/MeteoController.html":{},"injectables/MeteoService.html":{}}}],["insse",{"_index":465,"title":{},"body":{"injectables/MeteoService.html":{}}}],["insterface",{"_index":636,"title":{},"body":{"interfaces/SwitchState.html":{}}}],["interceptor",{"_index":256,"title":{},"body":{"modules/HttpModule.html":{}}}],["interface",{"_index":632,"title":{"interfaces/SwitchState.html":{}},"body":{"interfaces/SwitchState.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":633,"title":{},"body":{"interfaces/SwitchState.html":{}}}],["iot",{"_index":549,"title":{},"body":{"injectables/StationService.html":{},"injectables/StatsService.html":{},"index.html":{}}}],["isglobal",{"_index":159,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["json.stringify(req.headers),'status",{"_index":336,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["json.stringify(response.data",{"_index":274,"title":{},"body":{"modules/HttpModule.html":{}}}],["know",{"_index":354,"title":{},"body":{"classes/Meteo.html":{},"controllers/MeteoController.html":{},"injectables/MeteoService.html":{}}}],["latitude",{"_index":131,"title":{},"body":{"classes/City.html":{},"classes/Ephemeride.html":{},"classes/Forecast.html":{}}}],["led",{"_index":504,"title":{},"body":{"controllers/StationController.html":{},"injectables/StationService.html":{}}}],["legend",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"modules/MeteoModule.html":{},"modules/StationModule.html":{},"modules/StatsModule.html":{},"overview.html":{}}}],["lib",{"_index":196,"title":{},"body":{"classes/Ephemeride.html":{}}}],["line",{"_index":279,"title":{},"body":{"modules/HttpModule.html":{}}}],["list",{"_index":553,"title":{},"body":{"injectables/StationService.html":{}}}],["localisation",{"_index":383,"title":{},"body":{"controllers/MeteoController.html":{}}}],["localise",{"_index":438,"title":{},"body":{"injectables/MeteoService.html":{}}}],["localise(city",{"_index":455,"title":{},"body":{"injectables/MeteoService.html":{}}}],["log",{"_index":258,"title":{},"body":{"modules/HttpModule.html":{},"injectables/LoggerMiddleware.html":{},"index.html":{}}}],["log.info",{"_index":312,"title":{},"body":{"modules/LogModule.html":{}}}],["log/log.module",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["logger",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"modules/HttpModule.html":{},"modules/MeteoHttpModule.html":{},"modules/StationHttpModule.html":{}}}],["logger('axios",{"_index":253,"title":{},"body":{"modules/HttpModule.html":{}}}],["logger(appcontroller.name",{"_index":46,"title":{},"body":{"controllers/AppController.html":{}}}],["logger(appservice.name",{"_index":117,"title":{},"body":{"injectables/AppService.html":{}}}],["logger.error(err",{"_index":276,"title":{},"body":{"modules/HttpModule.html":{}}}],["logger.log(`request",{"_index":270,"title":{},"body":{"modules/HttpModule.html":{}}}],["logger.middleware",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["loggermiddleware",{"_index":99,"title":{"injectables/LoggerMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/LoggerMiddleware.html":{},"coverage.html":{}}}],["logging",{"_index":319,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"index.html":{}}}],["logmodule",{"_index":74,"title":{"modules/LogModule.html":{}},"body":{"modules/AppModule.html":{},"modules/LogModule.html":{},"modules.html":{},"overview.html":{}}}],["longitudde",{"_index":228,"title":{},"body":{"classes/Forecast.html":{}}}],["longitude",{"_index":132,"title":{},"body":{"classes/City.html":{},"classes/Ephemeride.html":{},"classes/Forecast.html":{}}}],["loss",{"_index":183,"title":{},"body":{"classes/Ephemeride.html":{}}}],["makes",{"_index":280,"title":{},"body":{"modules/HttpModule.html":{}}}],["matching",{"_index":59,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/City.html":{},"modules/ConfigurationModule.html":{},"classes/Ephemeride.html":{},"classes/Forecast.html":{},"classes/Hello.html":{},"modules/HttpModule.html":{},"modules/LogModule.html":{},"injectables/LoggerMiddleware.html":{},"classes/Measurement.html":{},"classes/Meteo.html":{},"controllers/MeteoController.html":{},"modules/MeteoHttpModule.html":{},"modules/MeteoModule.html":{},"injectables/MeteoService.html":{},"classes/MeteoStats.html":{},"controllers/StationController.html":{},"modules/StationHttpModule.html":{},"modules/StationModule.html":{},"injectables/StationService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"interfaces/SwitchState.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["maxredirects",{"_index":426,"title":{},"body":{"modules/MeteoHttpModule.html":{},"modules/StationHttpModule.html":{}}}],["measurement",{"_index":338,"title":{"classes/Measurement.html":{}},"body":{"classes/Measurement.html":{},"classes/MeteoStats.html":{},"controllers/StationController.html":{},"injectables/StationService.html":{},"coverage.html":{}}}],["message",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/Hello.html":{}}}],["metadata",{"_index":671,"title":{},"body":{"dependencies.html":{}}}],["meteo",{"_index":23,"title":{"classes/Meteo.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/Ephemeride.html":{},"classes/Forecast.html":{},"classes/Meteo.html":{},"controllers/MeteoController.html":{},"injectables/MeteoService.html":{},"classes/MeteoStats.html":{},"controllers/StationController.html":{},"injectables/StationService.html":{},"coverage.html":{},"index.html":{}}}],["meteo'})@get(':city",{"_index":388,"title":{},"body":{"controllers/MeteoController.html":{}}}],["meteo.controller",{"_index":434,"title":{},"body":{"modules/MeteoModule.html":{}}}],["meteo.service",{"_index":398,"title":{},"body":{"controllers/MeteoController.html":{},"modules/MeteoModule.html":{}}}],["meteo/meteo.module",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["meteocontroller",{"_index":365,"title":{"controllers/MeteoController.html":{}},"body":{"controllers/MeteoController.html":{},"modules/MeteoModule.html":{},"coverage.html":{}}}],["meteohttpmodule",{"_index":419,"title":{"modules/MeteoHttpModule.html":{}},"body":{"modules/MeteoHttpModule.html":{},"modules/MeteoModule.html":{},"modules.html":{},"overview.html":{}}}],["meteomodule",{"_index":75,"title":{"modules/MeteoModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MeteoModule.html":{},"modules.html":{},"overview.html":{}}}],["meteoservice",{"_index":397,"title":{"injectables/MeteoService.html":{}},"body":{"controllers/MeteoController.html":{},"modules/MeteoModule.html":{},"injectables/MeteoService.html":{},"coverage.html":{},"overview.html":{}}}],["meteostats",{"_index":472,"title":{"classes/MeteoStats.html":{}},"body":{"classes/MeteoStats.html":{},"controllers/StatsController.html":{},"injectables/StatsService.html":{},"coverage.html":{}}}],["method",{"_index":114,"title":{},"body":{"injectables/AppService.html":{}}}],["methods",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/HttpModule.html":{},"injectables/LoggerMiddleware.html":{},"controllers/MeteoController.html":{},"injectables/MeteoService.html":{},"controllers/StationController.html":{},"injectables/StationService.html":{},"controllers/StatsController.html":{},"injectables/StatsService.html":{}}}],["middle",{"_index":317,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["middleware",{"_index":326,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["middlewareconsumer",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["minutes",{"_index":187,"title":{},"body":{"classes/Ephemeride.html":{}}}],["miscellaneous",{"_index":678,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["models/city.entity",{"_index":393,"title":{},"body":{"controllers/MeteoController.html":{},"injectables/MeteoService.html":{}}}],["models/ephemeride.entity",{"_index":394,"title":{},"body":{"controllers/MeteoController.html":{},"injectables/MeteoService.html":{}}}],["models/forecast.entity",{"_index":395,"title":{},"body":{"controllers/MeteoController.html":{},"injectables/MeteoService.html":{}}}],["models/mesurement.entity",{"_index":519,"title":{},"body":{"controllers/StationController.html":{},"injectables/StationService.html":{}}}],["models/meteo",{"_index":596,"title":{},"body":{"controllers/StatsController.html":{},"injectables/StatsService.html":{}}}],["models/meteo.entity",{"_index":396,"title":{},"body":{"controllers/MeteoController.html":{},"injectables/MeteoService.html":{}}}],["models/switch",{"_index":517,"title":{},"body":{"controllers/StationController.html":{},"injectables/StationService.html":{}}}],["module",{"_index":61,"title":{"modules/AppModule.html":{},"modules/ConfigurationModule.html":{},"modules/HttpModule.html":{},"modules/LogModule.html":{},"modules/MeteoHttpModule.html":{},"modules/MeteoModule.html":{},"modules/StationHttpModule.html":{},"modules/StationModule.html":{},"modules/StatsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ConfigurationModule.html":{},"modules/HttpModule.html":{},"modules/LogModule.html":{},"modules/MeteoHttpModule.html":{},"modules/MeteoModule.html":{},"modules/StationHttpModule.html":{},"modules/StationModule.html":{},"modules/StatsModule.html":{},"overview.html":{}}}],["modules",{"_index":63,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/ConfigurationModule.html":{},"modules/HttpModule.html":{},"modules/LogModule.html":{},"modules/MeteoHttpModule.html":{},"modules/MeteoModule.html":{},"modules/StationHttpModule.html":{},"modules/StationModule.html":{},"modules/StatsModule.html":{},"modules.html":{},"overview.html":{}}}],["moeteoapiurl",{"_index":436,"title":{},"body":{"injectables/MeteoService.html":{}}}],["moon",{"_index":193,"title":{},"body":{"classes/Ephemeride.html":{}}}],["moon_age",{"_index":173,"title":{},"body":{"classes/Ephemeride.html":{}}}],["moon_phase",{"_index":174,"title":{},"body":{"classes/Ephemeride.html":{}}}],["morgan",{"_index":693,"title":{},"body":{"index.html":{}}}],["name",{"_index":91,"title":{},"body":{"modules/AppModule.html":{},"classes/City.html":{},"injectables/LoggerMiddleware.html":{},"controllers/MeteoController.html":{},"injectables/MeteoService.html":{},"controllers/StationController.html":{},"injectables/StationService.html":{},"controllers/StatsController.html":{},"injectables/StatsService.html":{}}}],["name'})@get('city/:city",{"_index":385,"title":{},"body":{"controllers/MeteoController.html":{}}}],["need",{"_index":441,"title":{},"body":{"injectables/MeteoService.html":{},"controllers/StatsController.html":{}}}],["nest",{"_index":290,"title":{},"body":{"modules/LogModule.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs",{"_index":688,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/ConfigurationModule.html":{},"modules/HttpModule.html":{},"modules/LogModule.html":{},"injectables/LoggerMiddleware.html":{},"controllers/MeteoController.html":{},"modules/MeteoHttpModule.html":{},"modules/MeteoModule.html":{},"injectables/MeteoService.html":{},"controllers/StationController.html":{},"modules/StationHttpModule.html":{},"modules/StationModule.html":{},"injectables/StationService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":154,"title":{},"body":{"modules/ConfigurationModule.html":{},"modules/HttpModule.html":{},"modules/LogModule.html":{},"modules/MeteoHttpModule.html":{},"injectables/MeteoService.html":{},"modules/StationHttpModule.html":{},"injectables/StationService.html":{},"injectables/StatsService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":664,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":665,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":37,"title":{},"body":{"controllers/AppController.html":{},"controllers/MeteoController.html":{},"controllers/StationController.html":{},"controllers/StatsController.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":331,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["nestmodule",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["netsjs",{"_index":691,"title":{},"body":{"index.html":{}}}],["new",{"_index":45,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"modules/HttpModule.html":{},"modules/LogModule.html":{},"coverage.html":{}}}],["next",{"_index":323,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["nextfunction",{"_index":324,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["npmjs",{"_index":694,"title":{},"body":{"index.html":{}}}],["null",{"_index":464,"title":{},"body":{"injectables/MeteoService.html":{}}}],["number",{"_index":133,"title":{},"body":{"classes/City.html":{},"classes/Ephemeride.html":{},"classes/Forecast.html":{},"classes/Measurement.html":{},"classes/Meteo.html":{},"classes/MeteoStats.html":{}}}],["official",{"_index":689,"title":{},"body":{"index.html":{}}}],["one",{"_index":328,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["onmoduleinit",{"_index":248,"title":{},"body":{"modules/HttpModule.html":{},"modules/MeteoHttpModule.html":{},"modules/StationHttpModule.html":{}}}],["on|off",{"_index":556,"title":{},"body":{"injectables/StationService.html":{}}}],["open",{"_index":714,"title":{},"body":{"index.html":{}}}],["openapi",{"_index":713,"title":{},"body":{"index.html":{}}}],["optional",{"_index":92,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerMiddleware.html":{},"controllers/MeteoController.html":{},"injectables/MeteoService.html":{},"controllers/StationController.html":{},"injectables/StationService.html":{},"injectables/StatsService.html":{}}}],["options",{"_index":313,"title":{},"body":{"modules/LogModule.html":{}}}],["others",{"_index":704,"title":{},"body":{"index.html":{}}}],["out",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"modules/MeteoModule.html":{},"modules/StationModule.html":{},"modules/StatsModule.html":{},"overview.html":{}}}],["output",{"_index":301,"title":{},"body":{"modules/LogModule.html":{}}}],["overview",{"_index":726,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":661,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":695,"title":{},"body":{"index.html":{}}}],["param",{"_index":48,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/LoggerMiddleware.html":{},"controllers/MeteoController.html":{},"injectables/MeteoService.html":{},"controllers/StationController.html":{},"injectables/StationService.html":{},"controllers/StatsController.html":{},"injectables/StatsService.html":{}}}],["param('resource",{"_index":532,"title":{},"body":{"controllers/StationController.html":{}}}],["parameters",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerMiddleware.html":{},"controllers/MeteoController.html":{},"injectables/MeteoService.html":{},"controllers/StationController.html":{},"injectables/StationService.html":{},"injectables/StatsService.html":{}}}],["path",{"_index":563,"title":{},"body":{"injectables/StationService.html":{}}}],["paths",{"_index":550,"title":{},"body":{"injectables/StationService.html":{},"injectables/StatsService.html":{}}}],["percent",{"_index":344,"title":{},"body":{"classes/Measurement.html":{}}}],["phase",{"_index":197,"title":{},"body":{"classes/Ephemeride.html":{}}}],["port",{"_index":651,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["possible",{"_index":638,"title":{},"body":{"interfaces/SwitchState.html":{}}}],["post",{"_index":391,"title":{},"body":{"controllers/MeteoController.html":{},"controllers/StationController.html":{}}}],["post('device/:resource",{"_index":512,"title":{},"body":{"controllers/StationController.html":{}}}],["postal",{"_index":136,"title":{},"body":{"classes/City.html":{},"classes/Forecast.html":{}}}],["precise",{"_index":476,"title":{},"body":{"classes/MeteoStats.html":{}}}],["prefix",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"controllers/MeteoController.html":{},"controllers/StationController.html":{},"controllers/StatsController.html":{}}}],["pressure",{"_index":341,"title":{},"body":{"classes/Measurement.html":{},"classes/MeteoStats.html":{},"controllers/StationController.html":{},"injectables/StationService.html":{}}}],["private",{"_index":43,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"modules/HttpModule.html":{},"controllers/MeteoController.html":{},"injectables/MeteoService.html":{},"injectables/StationService.html":{},"controllers/StatsController.html":{},"injectables/StatsService.html":{}}}],["process.env.port",{"_index":730,"title":{},"body":{"miscellaneous/variables.html":{}}}],["promise",{"_index":378,"title":{},"body":{"controllers/MeteoController.html":{},"injectables/MeteoService.html":{},"controllers/StationController.html":{},"injectables/StationService.html":{},"controllers/StatsController.html":{},"injectables/StatsService.html":{}}}],["promise.reject(err",{"_index":286,"title":{},"body":{"modules/HttpModule.html":{}}}],["properties",{"_index":112,"title":{},"body":{"injectables/AppService.html":{},"classes/City.html":{},"classes/Ephemeride.html":{},"classes/Forecast.html":{},"classes/Hello.html":{},"classes/Measurement.html":{},"classes/Meteo.html":{},"injectables/MeteoService.html":{},"classes/MeteoStats.html":{},"injectables/StationService.html":{},"injectables/StatsService.html":{},"interfaces/SwitchState.html":{}}}],["providers",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"modules/MeteoModule.html":{},"modules/StationModule.html":{},"modules/StatsModule.html":{},"overview.html":{}}}],["public",{"_index":247,"title":{},"body":{"modules/HttpModule.html":{},"injectables/MeteoService.html":{},"injectables/StationService.html":{},"injectables/StatsService.html":{}}}],["put",{"_index":516,"title":{},"body":{"controllers/StationController.html":{}}}],["put('restart",{"_index":508,"title":{},"body":{"controllers/StationController.html":{}}}],["readonly",{"_index":44,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"modules/HttpModule.html":{},"controllers/MeteoController.html":{},"injectables/MeteoService.html":{},"controllers/StationController.html":{},"injectables/StationService.html":{},"controllers/StatsController.html":{},"injectables/StatsService.html":{}}}],["realtime",{"_index":595,"title":{},"body":{"controllers/StatsController.html":{},"injectables/StatsService.html":{}}}],["record",{"_index":303,"title":{},"body":{"modules/LogModule.html":{}}}],["recorded",{"_index":587,"title":{},"body":{"controllers/StatsController.html":{}}}],["redefine",{"_index":717,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":670,"title":{},"body":{"dependencies.html":{}}}],["registered",{"_index":493,"title":{},"body":{"controllers/StationController.html":{},"injectables/StationService.html":{}}}],["remote",{"_index":442,"title":{},"body":{"injectables/MeteoService.html":{}}}],["represent",{"_index":126,"title":{},"body":{"classes/City.html":{}}}],["req",{"_index":330,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["req.url",{"_index":334,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["request",{"_index":255,"title":{},"body":{"modules/HttpModule.html":{},"injectables/LoggerMiddleware.html":{}}}],["requests",{"_index":283,"title":{},"body":{"modules/HttpModule.html":{}}}],["res",{"_index":322,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["res.statuscode",{"_index":337,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["reset",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"modules/MeteoModule.html":{},"modules/StationModule.html":{},"modules/StatsModule.html":{},"overview.html":{}}}],["resolve",{"_index":284,"title":{},"body":{"modules/HttpModule.html":{}}}],["resource",{"_index":502,"title":{},"body":{"controllers/StationController.html":{},"injectables/StationService.html":{},"interfaces/SwitchState.html":{}}}],["resourcesurl",{"_index":545,"title":{},"body":{"injectables/StationService.html":{}}}],["response",{"_index":257,"title":{},"body":{"modules/HttpModule.html":{},"injectables/LoggerMiddleware.html":{},"injectables/MeteoService.html":{},"injectables/StationService.html":{},"injectables/StatsService.html":{}}}],["response.data",{"_index":461,"title":{},"body":{"injectables/MeteoService.html":{},"injectables/StationService.html":{},"injectables/StatsService.html":{}}}],["response.data.cities",{"_index":462,"title":{},"body":{"injectables/MeteoService.html":{}}}],["response.data.cities[0",{"_index":463,"title":{},"body":{"injectables/MeteoService.html":{}}}],["response.data.ephemeride",{"_index":469,"title":{},"body":{"injectables/MeteoService.html":{}}}],["response.data.forecast",{"_index":471,"title":{},"body":{"injectables/MeteoService.html":{}}}],["rest",{"_index":444,"title":{},"body":{"injectables/MeteoService.html":{},"injectables/StationService.html":{},"injectables/StatsService.html":{},"index.html":{}}}],["restart",{"_index":489,"title":{},"body":{"controllers/StationController.html":{},"injectables/StationService.html":{}}}],["result",{"_index":58,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/City.html":{},"modules/ConfigurationModule.html":{},"classes/Ephemeride.html":{},"classes/Forecast.html":{},"classes/Hello.html":{},"modules/HttpModule.html":{},"modules/LogModule.html":{},"injectables/LoggerMiddleware.html":{},"classes/Measurement.html":{},"classes/Meteo.html":{},"controllers/MeteoController.html":{},"modules/MeteoHttpModule.html":{},"modules/MeteoModule.html":{},"injectables/MeteoService.html":{},"classes/MeteoStats.html":{},"controllers/StationController.html":{},"modules/StationHttpModule.html":{},"modules/StationModule.html":{},"injectables/StationService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"interfaces/SwitchState.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":60,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/City.html":{},"modules/ConfigurationModule.html":{},"classes/Ephemeride.html":{},"classes/Forecast.html":{},"classes/Hello.html":{},"modules/HttpModule.html":{},"modules/LogModule.html":{},"injectables/LoggerMiddleware.html":{},"classes/Measurement.html":{},"classes/Meteo.html":{},"controllers/MeteoController.html":{},"modules/MeteoHttpModule.html":{},"modules/MeteoModule.html":{},"injectables/MeteoService.html":{},"classes/MeteoStats.html":{},"controllers/StationController.html":{},"modules/StationHttpModule.html":{},"modules/StationModule.html":{},"injectables/StationService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"interfaces/SwitchState.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":586,"title":{},"body":{"controllers/StatsController.html":{}}}],["return",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"modules/HttpModule.html":{},"controllers/MeteoController.html":{},"injectables/MeteoService.html":{},"controllers/StationController.html":{},"injectables/StationService.html":{},"controllers/StatsController.html":{},"injectables/StatsService.html":{}}}],["returns",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/HttpModule.html":{},"injectables/LoggerMiddleware.html":{},"controllers/MeteoController.html":{},"injectables/MeteoService.html":{},"controllers/StationController.html":{},"injectables/StationService.html":{},"controllers/StatsController.html":{},"injectables/StatsService.html":{}}}],["root",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/StationService.html":{},"injectables/StatsService.html":{}}}],["rooturl",{"_index":546,"title":{},"body":{"injectables/StationService.html":{},"injectables/StatsService.html":{}}}],["rooturlbuckets",{"_index":614,"title":{},"body":{"injectables/StatsService.html":{}}}],["rxjs",{"_index":292,"title":{},"body":{"modules/LogModule.html":{},"dependencies.html":{}}}],["screen",{"_index":505,"title":{},"body":{"controllers/StationController.html":{},"injectables/StationService.html":{}}}],["seine",{"_index":146,"title":{},"body":{"classes/City.html":{}}}],["service",{"_index":111,"title":{},"body":{"injectables/AppService.html":{},"injectables/MeteoService.html":{},"injectables/StationService.html":{},"injectables/StatsService.html":{},"index.html":{}}}],["simple",{"_index":110,"title":{},"body":{"injectables/AppService.html":{},"injectables/LoggerMiddleware.html":{},"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/City.html":{},"modules/ConfigurationModule.html":{},"classes/Ephemeride.html":{},"classes/Forecast.html":{},"classes/Hello.html":{},"modules/HttpModule.html":{},"modules/LogModule.html":{},"injectables/LoggerMiddleware.html":{},"classes/Measurement.html":{},"classes/Meteo.html":{},"controllers/MeteoController.html":{},"modules/MeteoHttpModule.html":{},"modules/MeteoModule.html":{},"injectables/MeteoService.html":{},"classes/MeteoStats.html":{},"controllers/StationController.html":{},"modules/StationHttpModule.html":{},"modules/StationModule.html":{},"injectables/StationService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"interfaces/SwitchState.html":{}}}],["src/.../main.ts",{"_index":680,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:40",{"_index":26,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:33",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":109,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:16",{"_index":118,"title":{},"body":{"injectables/AppService.html":{}}}],["src/app.service.ts:22",{"_index":113,"title":{},"body":{"injectables/AppService.html":{}}}],["src/configuration/configuration.module",{"_index":433,"title":{},"body":{"modules/MeteoModule.html":{},"modules/StationModule.html":{},"modules/StatsModule.html":{}}}],["src/configuration/configuration.module.ts",{"_index":152,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["src/hello.entity.ts",{"_index":241,"title":{},"body":{"classes/Hello.html":{},"coverage.html":{}}}],["src/hello.entity.ts:13",{"_index":244,"title":{},"body":{"classes/Hello.html":{}}}],["src/http/http.module.ts",{"_index":246,"title":{},"body":{"modules/HttpModule.html":{}}}],["src/http/http.module.ts:11",{"_index":249,"title":{},"body":{"modules/HttpModule.html":{}}}],["src/http/meteo",{"_index":420,"title":{},"body":{"modules/MeteoHttpModule.html":{},"modules/MeteoModule.html":{}}}],["src/http/station",{"_index":156,"title":{},"body":{"modules/ConfigurationModule.html":{},"modules/StationHttpModule.html":{},"modules/StationModule.html":{},"modules/StatsModule.html":{}}}],["src/log/log.module.ts",{"_index":287,"title":{},"body":{"modules/LogModule.html":{}}}],["src/logger.middleware.ts",{"_index":316,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"coverage.html":{}}}],["src/logger.middleware.ts:19",{"_index":325,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["src/main.ts",{"_index":647,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/meteo/meteo.controller.ts",{"_index":366,"title":{},"body":{"controllers/MeteoController.html":{},"coverage.html":{}}}],["src/meteo/meteo.controller.ts:40",{"_index":386,"title":{},"body":{"controllers/MeteoController.html":{}}}],["src/meteo/meteo.controller.ts:56",{"_index":389,"title":{},"body":{"controllers/MeteoController.html":{}}}],["src/meteo/meteo.controller.ts:74",{"_index":377,"title":{},"body":{"controllers/MeteoController.html":{}}}],["src/meteo/meteo.controller.ts:92",{"_index":381,"title":{},"body":{"controllers/MeteoController.html":{}}}],["src/meteo/meteo.module.ts",{"_index":432,"title":{},"body":{"modules/MeteoModule.html":{}}}],["src/meteo/meteo.service.ts",{"_index":435,"title":{},"body":{"injectables/MeteoService.html":{},"coverage.html":{}}}],["src/meteo/meteo.service.ts:20",{"_index":440,"title":{},"body":{"injectables/MeteoService.html":{}}}],["src/meteo/meteo.service.ts:44",{"_index":456,"title":{},"body":{"injectables/MeteoService.html":{}}}],["src/meteo/meteo.service.ts:57",{"_index":454,"title":{},"body":{"injectables/MeteoService.html":{}}}],["src/meteo/meteo.service.ts:69",{"_index":447,"title":{},"body":{"injectables/MeteoService.html":{}}}],["src/meteo/meteo.service.ts:82",{"_index":451,"title":{},"body":{"injectables/MeteoService.html":{}}}],["src/meteo/models/city.entity.ts",{"_index":124,"title":{},"body":{"classes/City.html":{},"coverage.html":{}}}],["src/meteo/models/city.entity.ts:10",{"_index":142,"title":{},"body":{"classes/City.html":{}}}],["src/meteo/models/city.entity.ts:16",{"_index":139,"title":{},"body":{"classes/City.html":{}}}],["src/meteo/models/city.entity.ts:22",{"_index":135,"title":{},"body":{"classes/City.html":{}}}],["src/meteo/models/city.entity.ts:28",{"_index":140,"title":{},"body":{"classes/City.html":{}}}],["src/meteo/models/city.entity.ts:34",{"_index":141,"title":{},"body":{"classes/City.html":{}}}],["src/meteo/models/city.entity.ts:40",{"_index":134,"title":{},"body":{"classes/City.html":{}}}],["src/meteo/models/ephemeride.entity.ts",{"_index":162,"title":{},"body":{"classes/Ephemeride.html":{},"coverage.html":{}}}],["src/meteo/models/ephemeride.entity.ts:13",{"_index":190,"title":{},"body":{"classes/Ephemeride.html":{}}}],["src/meteo/models/ephemeride.entity.ts:19",{"_index":191,"title":{},"body":{"classes/Ephemeride.html":{}}}],["src/meteo/models/ephemeride.entity.ts:26",{"_index":189,"title":{},"body":{"classes/Ephemeride.html":{}}}],["src/meteo/models/ephemeride.entity.ts:32",{"_index":178,"title":{},"body":{"classes/Ephemeride.html":{}}}],["src/meteo/models/ephemeride.entity.ts:38",{"_index":175,"title":{},"body":{"classes/Ephemeride.html":{}}}],["src/meteo/models/ephemeride.entity.ts:44",{"_index":199,"title":{},"body":{"classes/Ephemeride.html":{}}}],["src/meteo/models/ephemeride.entity.ts:50",{"_index":201,"title":{},"body":{"classes/Ephemeride.html":{}}}],["src/meteo/models/ephemeride.entity.ts:56",{"_index":188,"title":{},"body":{"classes/Ephemeride.html":{}}}],["src/meteo/models/ephemeride.entity.ts:62",{"_index":181,"title":{},"body":{"classes/Ephemeride.html":{}}}],["src/meteo/models/ephemeride.entity.ts:68",{"_index":192,"title":{},"body":{"classes/Ephemeride.html":{}}}],["src/meteo/models/ephemeride.entity.ts:74",{"_index":195,"title":{},"body":{"classes/Ephemeride.html":{}}}],["src/meteo/models/forecast.entity.ts",{"_index":216,"title":{},"body":{"classes/Forecast.html":{},"coverage.html":{}}}],["src/meteo/models/forecast.entity.ts:13",{"_index":225,"title":{},"body":{"classes/Forecast.html":{}}}],["src/meteo/models/forecast.entity.ts:20",{"_index":222,"title":{},"body":{"classes/Forecast.html":{}}}],["src/meteo/models/forecast.entity.ts:27",{"_index":226,"title":{},"body":{"classes/Forecast.html":{}}}],["src/meteo/models/forecast.entity.ts:34",{"_index":227,"title":{},"body":{"classes/Forecast.html":{}}}],["src/meteo/models/forecast.entity.ts:41",{"_index":224,"title":{},"body":{"classes/Forecast.html":{}}}],["src/meteo/models/forecast.entity.ts:48",{"_index":223,"title":{},"body":{"classes/Forecast.html":{}}}],["src/meteo/models/forecast.entity.ts:55",{"_index":232,"title":{},"body":{"classes/Forecast.html":{}}}],["src/meteo/models/forecast.entity.ts:62",{"_index":231,"title":{},"body":{"classes/Forecast.html":{}}}],["src/meteo/models/forecast.entity.ts:69",{"_index":229,"title":{},"body":{"classes/Forecast.html":{}}}],["src/meteo/models/meteo.entity.ts",{"_index":353,"title":{},"body":{"classes/Meteo.html":{},"coverage.html":{}}}],["src/meteo/models/meteo.entity.ts:11",{"_index":355,"title":{},"body":{"classes/Meteo.html":{}}}],["src/meteo/models/meteo.entity.ts:18",{"_index":358,"title":{},"body":{"classes/Meteo.html":{}}}],["src/meteo/models/meteo.entity.ts:25",{"_index":359,"title":{},"body":{"classes/Meteo.html":{}}}],["src/meteo/models/meteo.entity.ts:32",{"_index":357,"title":{},"body":{"classes/Meteo.html":{}}}],["src/meteo/models/meteo.entity.ts:39",{"_index":356,"title":{},"body":{"classes/Meteo.html":{}}}],["src/station/models/mesurement.entity",{"_index":481,"title":{},"body":{"classes/MeteoStats.html":{}}}],["src/station/models/mesurement.entity.ts",{"_index":339,"title":{},"body":{"classes/Measurement.html":{},"coverage.html":{}}}],["src/station/models/mesurement.entity.ts:13",{"_index":347,"title":{},"body":{"classes/Measurement.html":{}}}],["src/station/models/mesurement.entity.ts:20",{"_index":345,"title":{},"body":{"classes/Measurement.html":{}}}],["src/station/models/mesurement.entity.ts:27",{"_index":343,"title":{},"body":{"classes/Measurement.html":{}}}],["src/station/models/switch",{"_index":634,"title":{},"body":{"interfaces/SwitchState.html":{},"coverage.html":{}}}],["src/station/station.controller.ts",{"_index":484,"title":{},"body":{"controllers/StationController.html":{},"coverage.html":{}}}],["src/station/station.controller.ts:26",{"_index":495,"title":{},"body":{"controllers/StationController.html":{}}}],["src/station/station.controller.ts:35",{"_index":492,"title":{},"body":{"controllers/StationController.html":{}}}],["src/station/station.controller.ts:49",{"_index":499,"title":{},"body":{"controllers/StationController.html":{}}}],["src/station/station.controller.ts:63",{"_index":507,"title":{},"body":{"controllers/StationController.html":{}}}],["src/station/station.controller.ts:75",{"_index":513,"title":{},"body":{"controllers/StationController.html":{}}}],["src/station/station.controller.ts:84",{"_index":509,"title":{},"body":{"controllers/StationController.html":{}}}],["src/station/station.module.ts",{"_index":539,"title":{},"body":{"modules/StationModule.html":{}}}],["src/station/station.service.ts",{"_index":541,"title":{},"body":{"injectables/StationService.html":{},"coverage.html":{}}}],["src/station/station.service.ts:107",{"_index":557,"title":{},"body":{"injectables/StationService.html":{}}}],["src/station/station.service.ts:17",{"_index":565,"title":{},"body":{"injectables/StationService.html":{}}}],["src/station/station.service.ts:23",{"_index":564,"title":{},"body":{"injectables/StationService.html":{}}}],["src/station/station.service.ts:29",{"_index":562,"title":{},"body":{"injectables/StationService.html":{}}}],["src/station/station.service.ts:35",{"_index":548,"title":{},"body":{"injectables/StationService.html":{}}}],["src/station/station.service.ts:58",{"_index":552,"title":{},"body":{"injectables/StationService.html":{}}}],["src/station/station.service.ts:67",{"_index":551,"title":{},"body":{"injectables/StationService.html":{}}}],["src/station/station.service.ts:79",{"_index":559,"title":{},"body":{"injectables/StationService.html":{}}}],["src/station/station.service.ts:89",{"_index":555,"title":{},"body":{"injectables/StationService.html":{}}}],["src/station/station.service.ts:98",{"_index":554,"title":{},"body":{"injectables/StationService.html":{}}}],["src/station/stats/models/meteo",{"_index":473,"title":{},"body":{"classes/MeteoStats.html":{},"coverage.html":{}}}],["src/station/stats/stats.controller.ts",{"_index":584,"title":{},"body":{"controllers/StatsController.html":{},"coverage.html":{}}}],["src/station/stats/stats.controller.ts:33",{"_index":591,"title":{},"body":{"controllers/StatsController.html":{}}}],["src/station/stats/stats.controller.ts:43",{"_index":594,"title":{},"body":{"controllers/StatsController.html":{}}}],["src/station/stats/stats.module.ts",{"_index":607,"title":{},"body":{"modules/StatsModule.html":{}}}],["src/station/stats/stats.service.ts",{"_index":609,"title":{},"body":{"injectables/StatsService.html":{},"coverage.html":{}}}],["src/station/stats/stats.service.ts:16",{"_index":622,"title":{},"body":{"injectables/StatsService.html":{}}}],["src/station/stats/stats.service.ts:22",{"_index":623,"title":{},"body":{"injectables/StatsService.html":{}}}],["src/station/stats/stats.service.ts:28",{"_index":619,"title":{},"body":{"injectables/StatsService.html":{}}}],["src/station/stats/stats.service.ts:34",{"_index":615,"title":{},"body":{"injectables/StatsService.html":{}}}],["src/station/stats/stats.service.ts:58",{"_index":617,"title":{},"body":{"injectables/StatsService.html":{}}}],["src/station/stats/stats.service.ts:68",{"_index":616,"title":{},"body":{"injectables/StatsService.html":{}}}],["start",{"_index":307,"title":{},"body":{"modules/LogModule.html":{},"miscellaneous/functions.html":{}}}],["startdate",{"_index":264,"title":{},"body":{"modules/HttpModule.html":{}}}],["started",{"_index":682,"title":{"index.html":{}},"body":{}}],["state",{"_index":501,"title":{},"body":{"controllers/StationController.html":{},"injectables/StationService.html":{},"interfaces/SwitchState.html":{}}}],["state.interface",{"_index":518,"title":{},"body":{"controllers/StationController.html":{},"injectables/StationService.html":{}}}],["state.interface.ts",{"_index":635,"title":{},"body":{"interfaces/SwitchState.html":{},"coverage.html":{}}}],["state`).topromise",{"_index":580,"title":{},"body":{"injectables/StationService.html":{}}}],["statements",{"_index":643,"title":{},"body":{"coverage.html":{}}}],["station",{"_index":121,"title":{},"body":{"injectables/AppService.html":{},"controllers/StationController.html":{},"injectables/StationService.html":{},"index.html":{}}}],["station.controller",{"_index":540,"title":{},"body":{"modules/StationModule.html":{}}}],["station.service",{"_index":521,"title":{},"body":{"controllers/StationController.html":{},"modules/StationModule.html":{}}}],["station/station.module",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["station/stats",{"_index":585,"title":{},"body":{"controllers/StatsController.html":{}}}],["station/stats/stats.module",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["stationcontroller",{"_index":483,"title":{"controllers/StationController.html":{}},"body":{"controllers/StationController.html":{},"modules/StationModule.html":{},"coverage.html":{}}}],["stationhttpmodule",{"_index":155,"title":{"modules/StationHttpModule.html":{}},"body":{"modules/ConfigurationModule.html":{},"modules/StationHttpModule.html":{},"modules/StationModule.html":{},"modules/StatsModule.html":{},"modules.html":{},"overview.html":{}}}],["stationmodule",{"_index":76,"title":{"modules/StationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StationModule.html":{},"modules.html":{},"overview.html":{}}}],["stationservice",{"_index":520,"title":{"injectables/StationService.html":{}},"body":{"controllers/StationController.html":{},"modules/StationModule.html":{},"injectables/StationService.html":{},"coverage.html":{},"overview.html":{}}}],["stats",{"_index":475,"title":{},"body":{"classes/MeteoStats.html":{},"controllers/StatsController.html":{},"injectables/StatsService.html":{}}}],["stats.controller",{"_index":608,"title":{},"body":{"modules/StatsModule.html":{}}}],["stats.entity",{"_index":597,"title":{},"body":{"controllers/StatsController.html":{},"injectables/StatsService.html":{}}}],["stats.entity.ts",{"_index":474,"title":{},"body":{"classes/MeteoStats.html":{},"coverage.html":{}}}],["stats.entity.ts:14",{"_index":479,"title":{},"body":{"classes/MeteoStats.html":{}}}],["stats.entity.ts:20",{"_index":478,"title":{},"body":{"classes/MeteoStats.html":{}}}],["stats.service",{"_index":599,"title":{},"body":{"controllers/StatsController.html":{},"modules/StatsModule.html":{}}}],["statscontroller",{"_index":583,"title":{"controllers/StatsController.html":{}},"body":{"controllers/StatsController.html":{},"modules/StatsModule.html":{},"coverage.html":{}}}],["statsmodule",{"_index":77,"title":{"modules/StatsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StatsModule.html":{},"modules.html":{},"overview.html":{}}}],["statsservice",{"_index":598,"title":{"injectables/StatsService.html":{}},"body":{"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"coverage.html":{},"overview.html":{}}}],["status",{"_index":50,"title":{},"body":{"controllers/AppController.html":{},"controllers/MeteoController.html":{},"controllers/StationController.html":{}}}],["string",{"_index":138,"title":{},"body":{"classes/City.html":{},"classes/Ephemeride.html":{},"classes/Forecast.html":{},"classes/Hello.html":{},"classes/Meteo.html":{},"controllers/MeteoController.html":{},"injectables/MeteoService.html":{},"controllers/StationController.html":{},"injectables/StationService.html":{},"injectables/StatsService.html":{}}}],["sunrise",{"_index":166,"title":{},"body":{"classes/Ephemeride.html":{},"classes/Meteo.html":{}}}],["sunset",{"_index":167,"title":{},"body":{"classes/Ephemeride.html":{},"classes/Meteo.html":{}}}],["support",{"_index":721,"title":{},"body":{"modules.html":{}}}],["sur",{"_index":145,"title":{},"body":{"classes/City.html":{}}}],["svg",{"_index":722,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":674,"title":{},"body":{"dependencies.html":{}}}],["switch",{"_index":514,"title":{},"body":{"controllers/StationController.html":{},"injectables/StationService.html":{},"interfaces/SwitchState.html":{}}}],["switchonoff",{"_index":515,"title":{},"body":{"controllers/StationController.html":{},"injectables/StationService.html":{}}}],["switchresource",{"_index":490,"title":{},"body":{"controllers/StationController.html":{},"injectables/StationService.html":{}}}],["switchresource(@body",{"_index":531,"title":{},"body":{"controllers/StationController.html":{}}}],["switchresource(resource",{"_index":558,"title":{},"body":{"injectables/StationService.html":{}}}],["switchresource(switchonoff",{"_index":510,"title":{},"body":{"controllers/StationController.html":{}}}],["switchstate",{"_index":511,"title":{"interfaces/SwitchState.html":{}},"body":{"controllers/StationController.html":{},"injectables/StationService.html":{},"interfaces/SwitchState.html":{},"coverage.html":{}}}],["switchstate.state",{"_index":577,"title":{},"body":{"injectables/StationService.html":{}}}],["table",{"_index":660,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":659,"title":{},"body":{"coverage.html":{}}}],["technical",{"_index":707,"title":{},"body":{"index.html":{}}}],["temparature",{"_index":348,"title":{},"body":{"classes/Measurement.html":{},"classes/Meteo.html":{}}}],["temperature",{"_index":340,"title":{},"body":{"classes/Measurement.html":{},"classes/Meteo.html":{},"classes/MeteoStats.html":{},"controllers/StationController.html":{},"injectables/StationService.html":{}}}],["temps",{"_index":237,"title":{},"body":{"classes/Forecast.html":{}}}],["this.appservice.gethello",{"_index":55,"title":{},"body":{"controllers/AppController.html":{}}}],["this.bucketdaily",{"_index":628,"title":{},"body":{"injectables/StatsService.html":{}}}],["this.bucketh24",{"_index":626,"title":{},"body":{"injectables/StatsService.html":{}}}],["this.configservice.get('meteo_api_url",{"_index":458,"title":{},"body":{"injectables/MeteoService.html":{}}}],["this.configservice.get('meteo_api_url')}/ephemeride/0?insee=${insee",{"_index":467,"title":{},"body":{"injectables/MeteoService.html":{}}}],["this.configservice.get('meteo_api_url')}/forecast/daily?insee=${insee",{"_index":470,"title":{},"body":{"injectables/MeteoService.html":{}}}],["this.configservice.get('thinger_io_api_buckets_path",{"_index":625,"title":{},"body":{"injectables/StatsService.html":{}}}],["this.configservice.get('thinger_io_api_device_id",{"_index":573,"title":{},"body":{"injectables/StationService.html":{}}}],["this.configservice.get('thinger_io_api_devices_path",{"_index":571,"title":{},"body":{"injectables/StationService.html":{}}}],["this.configservice.get('thinger_io_api_resources_path",{"_index":569,"title":{},"body":{"injectables/StationService.html":{}}}],["this.configservice.get('thinger_io_api_url",{"_index":567,"title":{},"body":{"injectables/StationService.html":{},"injectables/StatsService.html":{}}}],["this.configservice.get('thinger_io_bucket_daily",{"_index":629,"title":{},"body":{"injectables/StatsService.html":{}}}],["this.configservice.get('thinger_io_bucket_h24",{"_index":627,"title":{},"body":{"injectables/StatsService.html":{}}}],["this.deviceid",{"_index":572,"title":{},"body":{"injectables/StationService.html":{}}}],["this.devicesurl",{"_index":570,"title":{},"body":{"injectables/StationService.html":{}}}],["this.httpservice.axiosref",{"_index":261,"title":{},"body":{"modules/HttpModule.html":{}}}],["this.httpservice.get(`${this.rooturl}${this.devicesurl}/${this.deviceid}`).topromise",{"_index":575,"title":{},"body":{"injectables/StationService.html":{}}}],["this.httpservice.get(`${this.rooturl}${this.devicesurl}`).topromise",{"_index":574,"title":{},"body":{"injectables/StationService.html":{}}}],["this.httpservice.get(`${this.rooturl}${this.resourcesurl}${resource",{"_index":579,"title":{},"body":{"injectables/StationService.html":{}}}],["this.httpservice.get(`${this.rooturl}${this.resourcesurl}meteo`).topromise",{"_index":581,"title":{},"body":{"injectables/StationService.html":{}}}],["this.httpservice.get(`${url}`).topromise",{"_index":460,"title":{},"body":{"injectables/MeteoService.html":{},"injectables/StatsService.html":{}}}],["this.httpservice.post(`${this.rooturl}${this.resourcesurl}${resource",{"_index":576,"title":{},"body":{"injectables/StationService.html":{}}}],["this.httpservice.post(`${this.rooturl}${this.resourcesurl}reseting`).topromise",{"_index":582,"title":{},"body":{"injectables/StationService.html":{}}}],["this.logger.log('try",{"_index":52,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["this.logger.log(`hello",{"_index":56,"title":{},"body":{"controllers/AppController.html":{}}}],["this.meteoservice.getephemeride(citydetail.insee",{"_index":415,"title":{},"body":{"controllers/MeteoController.html":{}}}],["this.meteoservice.getforecasts(citydetail.insee",{"_index":418,"title":{},"body":{"controllers/MeteoController.html":{}}}],["this.meteoservice.getmeteo(citydetail.insee",{"_index":411,"title":{},"body":{"controllers/MeteoController.html":{}}}],["this.meteoservice.localise(city",{"_index":406,"title":{},"body":{"controllers/MeteoController.html":{}}}],["this.moeteoapiurl",{"_index":457,"title":{},"body":{"injectables/MeteoService.html":{}}}],["this.moeteoapiurl}/forecast/daily?insee=${insee",{"_index":466,"title":{},"body":{"injectables/MeteoService.html":{}}}],["this.moeteoapiurl}/location/cities?search=${city",{"_index":459,"title":{},"body":{"injectables/MeteoService.html":{}}}],["this.resourcesurl",{"_index":568,"title":{},"body":{"injectables/StationService.html":{}}}],["this.rooturl",{"_index":566,"title":{},"body":{"injectables/StationService.html":{},"injectables/StatsService.html":{}}}],["this.rooturlbuckets",{"_index":624,"title":{},"body":{"injectables/StatsService.html":{}}}],["this.rooturlbuckets}/${this.bucketdaily}/data",{"_index":631,"title":{},"body":{"injectables/StatsService.html":{}}}],["this.rooturlbuckets}/${this.bucketh24}/data",{"_index":630,"title":{},"body":{"injectables/StatsService.html":{}}}],["this.stationservice.getdevice",{"_index":526,"title":{},"body":{"controllers/StationController.html":{}}}],["this.stationservice.getdevices",{"_index":525,"title":{},"body":{"controllers/StationController.html":{}}}],["this.stationservice.getmeteomeasurement",{"_index":530,"title":{},"body":{"controllers/StationController.html":{}}}],["this.stationservice.getstate(resource",{"_index":528,"title":{},"body":{"controllers/StationController.html":{}}}],["this.stationservice.restart",{"_index":534,"title":{},"body":{"controllers/StationController.html":{}}}],["this.stationservice.switchresource(resource,switchonoff",{"_index":533,"title":{},"body":{"controllers/StationController.html":{}}}],["this.statsservice.getdailystats",{"_index":602,"title":{},"body":{"controllers/StatsController.html":{}}}],["this.statsservice.getrealtimestats",{"_index":603,"title":{},"body":{"controllers/StatsController.html":{}}}],["time",{"_index":177,"title":{},"body":{"classes/Ephemeride.html":{},"classes/Forecast.html":{},"classes/Meteo.html":{},"classes/MeteoStats.html":{}}}],["timeout",{"_index":424,"title":{},"body":{"modules/MeteoHttpModule.html":{},"modules/StationHttpModule.html":{}}}],["times",{"_index":168,"title":{},"body":{"classes/Ephemeride.html":{}}}],["timestamp",{"_index":480,"title":{},"body":{"classes/MeteoStats.html":{}}}],["tmax",{"_index":219,"title":{},"body":{"classes/Forecast.html":{}}}],["tmin",{"_index":220,"title":{},"body":{"classes/Forecast.html":{}}}],["topics",{"_index":716,"title":{},"body":{"index.html":{}}}],["topromise",{"_index":578,"title":{},"body":{"injectables/StationService.html":{}}}],["tranports",{"_index":217,"title":{},"body":{"classes/Forecast.html":{}}}],["transport",{"_index":243,"title":{},"body":{"classes/Hello.html":{}}}],["transports",{"_index":164,"title":{},"body":{"classes/Ephemeride.html":{},"modules/LogModule.html":{}}}],["true",{"_index":160,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["try",{"_index":27,"title":{},"body":{"controllers/AppController.html":{}}}],["ts",{"_index":477,"title":{},"body":{"classes/MeteoStats.html":{}}}],["type",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/City.html":{},"classes/Ephemeride.html":{},"classes/Forecast.html":{},"classes/Hello.html":{},"injectables/LoggerMiddleware.html":{},"classes/Measurement.html":{},"classes/Meteo.html":{},"controllers/MeteoController.html":{},"injectables/MeteoService.html":{},"classes/MeteoStats.html":{},"controllers/StationController.html":{},"injectables/StationService.html":{},"injectables/StatsService.html":{},"interfaces/SwitchState.html":{},"coverage.html":{}}}],["ui",{"_index":675,"title":{},"body":{"dependencies.html":{}}}],["un",{"_index":349,"title":{},"body":{"classes/Measurement.html":{},"classes/Meteo.html":{}}}],["undefined",{"_index":285,"title":{},"body":{"modules/HttpModule.html":{},"modules/LogModule.html":{},"injectables/MeteoService.html":{}}}],["url",{"_index":445,"title":{},"body":{"injectables/MeteoService.html":{},"injectables/StationService.html":{},"injectables/StatsService.html":{}}}],["use",{"_index":320,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["use(req",{"_index":321,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["used",{"_index":448,"title":{},"body":{"injectables/MeteoService.html":{}}}],["usefactory",{"_index":295,"title":{},"body":{"modules/LogModule.html":{},"modules/MeteoHttpModule.html":{},"modules/StationHttpModule.html":{}}}],["useful",{"_index":686,"title":{},"body":{"index.html":{}}}],["utilities",{"_index":288,"title":{},"body":{"modules/LogModule.html":{}}}],["utilities.format.nestlike",{"_index":299,"title":{},"body":{"modules/LogModule.html":{}}}],["value",{"_index":116,"title":{},"body":{"injectables/AppService.html":{},"classes/Measurement.html":{},"classes/Meteo.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":639,"title":{},"body":{"interfaces/SwitchState.html":{}}}],["var",{"_index":734,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":650,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":729,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vitry",{"_index":144,"title":{},"body":{"classes/City.html":{}}}],["vitry/seine",{"_index":127,"title":{},"body":{"classes/City.html":{}}}],["void",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerMiddleware.html":{}}}],["w",{"_index":315,"title":{},"body":{"modules/LogModule.html":{}}}],["ware",{"_index":318,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["weather",{"_index":221,"title":{},"body":{"classes/Forecast.html":{},"classes/Meteo.html":{}}}],["welcome",{"_index":22,"title":{},"body":{"controllers/AppController.html":{}}}],["wheather",{"_index":233,"title":{},"body":{"classes/Forecast.html":{},"classes/Meteo.html":{}}}],["wich",{"_index":304,"title":{},"body":{"modules/LogModule.html":{}}}],["winston",{"_index":291,"title":{},"body":{"modules/LogModule.html":{},"dependencies.html":{},"index.html":{}}}],["winston.format.combine",{"_index":297,"title":{},"body":{"modules/LogModule.html":{}}}],["winston.format.timestamp",{"_index":298,"title":{},"body":{"modules/LogModule.html":{}}}],["winston.transports.console",{"_index":302,"title":{},"body":{"modules/LogModule.html":{}}}],["winston.transports.file",{"_index":309,"title":{},"body":{"modules/LogModule.html":{}}}],["winston/v/1.0.2",{"_index":706,"title":{},"body":{"index.html":{}}}],["winstonmodule",{"_index":289,"title":{},"body":{"modules/LogModule.html":{}}}],["winstonmodule.forrootasync",{"_index":293,"title":{},"body":{"modules/LogModule.html":{}}}],["world",{"_index":119,"title":{},"body":{"injectables/AppService.html":{},"classes/Hello.html":{}}}],["xxxxxxxxxxxxxxxxxxxxxxxx",{"_index":402,"title":{},"body":{"controllers/MeteoController.html":{},"controllers/StationController.html":{},"controllers/StatsController.html":{}}}],["yout",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["zoom",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"modules/MeteoModule.html":{},"modules/StationModule.html":{},"modules/StatsModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /\n            \n\n            \n                Description\n            \n            \n                This is the root controller \nHe hardly does anything but say hello\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getHello\n                        \n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiResponse({status: 200, type: Hello, description: 'Hello message to welcome to Meteo API'})@Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:40\n                \n            \n\n\n            \n                \n                    Try to return a Hello message\n\n\n                    \n                        Returns :         Hello\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Logger } from '@nestjs/common';\nimport { AppService } from './app.service';\nimport { ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { Hello } from './hello.entity';\n/**\n * This is the root controller \n * He hardly does anything but say hello\n */\n\n@ApiTags('Hello')\n@Controller(\"/\")\nexport class AppController {\n  \n  /**\n   * A logger for this contoller\n   */\n\n  private readonly logger = new Logger(AppController.name);\n\n  /**\n   * We just inject AppService\n   * \n   * @param appService \n   */\n  \n  \n  constructor(\n    private readonly appService: AppService) { }\n  \n  /**\n    * Try to return a Hello message\n    */\n\n  @ApiResponse({\n    status: 200,\n    type: Hello,\n    description: 'Hello message to welcome to Meteo API'\n  })\n  @Get()\n  getHello(): Hello {\n    this.logger.log('Try to say hello message');\n    const helloMessage = this.appService.getHello();\n    this.logger.log(`Hello message is : ${helloMessage.message}`);    \n    return helloMessage;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nConfigurationModule\n\nConfigurationModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nConfigurationModule->AppModule\n\n\n\n\n\nLogModule\n\nLogModule\n\nAppModule -->\n\nLogModule->AppModule\n\n\n\n\n\nMeteoModule\n\nMeteoModule\n\nAppModule -->\n\nMeteoModule->AppModule\n\n\n\n\n\nStationModule\n\nStationModule\n\nAppModule -->\n\nStationModule->AppModule\n\n\n\n\n\nStatsModule\n\nStatsModule\n\nAppModule -->\n\nStatsModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n        \n            Description\n        \n        \n            This the root module of yout App\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ConfigurationModule\n                        \n                        \n                            LogModule\n                        \n                        \n                            MeteoModule\n                        \n                        \n                            StationModule\n                        \n                        \n                            StatsModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            configure\n                        \n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:33\n                \n            \n\n\n            \n                \n                    We configure all consumers\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module, NestModule } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { MeteoModule } from './meteo/meteo.module';\nimport { StatsModule } from './station/stats/stats.module';\nimport { LoggerMiddleware } from './logger.middleware';\nimport { StationModule } from './station/station.module';\nimport { ConfigurationModule } from './configuration/configuration.module';\nimport { LogModule } from './log/log.module';\n\n/**\n * This the root module of yout App\n */\n\n@Module({\n  imports: [\n    ConfigurationModule,\n    LogModule,\n    MeteoModule,\n    StatsModule,\n    StationModule      \n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule implements NestModule {\n  \n  /**\n   * We configure all consumers\n   * \n   * @param consumer \n   */\n  configure(consumer: MiddlewareConsumer) {\n    consumer       \n      .apply(LoggerMiddleware)\n      .forRoutes('*');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n            \n                Description\n            \n            \n                This a simple service to say Hello\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getHello\n                        \n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:22\n                \n            \n\n\n            \n                \n                    A method to say Hello\n\n\n                    \n                        Returns :         Hello\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Logger(AppService.name)\n                        \n                    \n                        \n                            \n                                    Defined in src/app.service.ts:16\n                            \n                        \n\n                \n                    \n                        Default logger \n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { Hello } from './hello.entity';\n\n/**\n * This a simple service to say Hello\n */\n\n@Injectable()\nexport class AppService {\n  \n  /**\n   * Default logger \n   * \n   */\n\n  private readonly logger = new Logger(AppService.name);\n\n  /**\n   * A method to say Hello\n   */\n\n  getHello(): Hello {\n    this.logger.log('Try to return \"Hello\" message');\n    return { message : 'Hello World! This my connected meteo station' };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/City.html":{"url":"classes/City.html","title":"class - City","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  City\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meteo/models/city.entity.ts\n        \n\n            \n                Description\n            \n            \n                This entity represent a City (like Vitry/Seine)\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                altitude\n                            \n                            \n                                cp\n                            \n                            \n                                insee\n                            \n                            \n                                latitude\n                            \n                            \n                                longitude\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            altitude\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/meteo/models/city.entity.ts:40\n                            \n                        \n\n                \n                    \n                        Altitude\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cp\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/meteo/models/city.entity.ts:22\n                            \n                        \n\n                \n                    \n                        Postal code\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            insee\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/meteo/models/city.entity.ts:16\n                            \n                        \n\n                \n                    \n                        Code INSEE\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            latitude\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/meteo/models/city.entity.ts:28\n                            \n                        \n\n                \n                    \n                        Latitude\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            longitude\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/meteo/models/city.entity.ts:34\n                            \n                        \n\n                \n                    \n                        Latitude\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/meteo/models/city.entity.ts:10\n                            \n                        \n\n                \n                    \n                        Name of the City\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class City{\n    /**\n     * Name of the City\n     * @example 'vitry-sur-seine'\n     */\n    name: string;\n\n    /**\n     * Code INSEE\n     * @example '94081'\n     */\n    insee: string;\n\n    /**\n     * Postal code\n     * @example 94400\n     */\n    cp: number;\n\n    /**\n     * Latitude\n     * @example 48.7883\n     */\n    latitude: number;\n\n    /**\n     * Latitude\n     * @example 2.3941\n     */\n    longitude: number;\n\n    /**\n     * Altitude\n     * @example 56\n     */\n    altitude: number;\n    \n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ConfigurationModule.html":{"url":"modules/ConfigurationModule.html","title":"module - ConfigurationModule","body":"\n                   \n\n\n\n\n    Modules\n    ConfigurationModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/configuration/configuration.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import {  Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { StationHttpModule } from 'src/http/station-http.module';\n\n@Module({\n    imports: [\n        ConfigModule.forRoot({ isGlobal: true })        \n    ]    \n})\nexport class ConfigurationModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Ephemeride.html":{"url":"classes/Ephemeride.html","title":"class - Ephemeride","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Ephemeride\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meteo/models/ephemeride.entity.ts\n        \n\n            \n                Description\n            \n            \n                This is an Epehemeride which transports informations like\nsunrise, sunset times\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                datetime\n                            \n                            \n                                day\n                            \n                            \n                                diff_duration_day\n                            \n                            \n                                duration_day\n                            \n                            \n                                insee\n                            \n                            \n                                latitude\n                            \n                            \n                                longitude\n                            \n                            \n                                moon_age\n                            \n                            \n                                moon_phase\n                            \n                            \n                                sunrise\n                            \n                            \n                                sunset\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            datetime\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/meteo/models/ephemeride.entity.ts:38\n                            \n                        \n\n                \n                    \n                        Date Time of meteo\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            day\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/meteo/models/ephemeride.entity.ts:32\n                            \n                        \n\n                \n                    \n                        Day of ephemeride (0 for first day)\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            diff_duration_day\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/meteo/models/ephemeride.entity.ts:62\n                            \n                        \n\n                \n                    \n                        Gain or loss of duration of the day compared to the day before in minutes\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            duration_day\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/meteo/models/ephemeride.entity.ts:56\n                            \n                        \n\n                \n                    \n                        Duration of day \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            insee\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/meteo/models/ephemeride.entity.ts:26\n                            \n                        \n\n                \n                    \n                        INSEE code of city\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            latitude\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/meteo/models/ephemeride.entity.ts:13\n                            \n                        \n\n                \n                    \n                        Latitude\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            longitude\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/meteo/models/ephemeride.entity.ts:19\n                            \n                        \n\n                \n                    \n                        Longitude\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            moon_age\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/meteo/models/ephemeride.entity.ts:68\n                            \n                        \n\n                \n                    \n                        Moon age in day\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            moon_phase\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/meteo/models/ephemeride.entity.ts:74\n                            \n                        \n\n                \n                    \n                        Lib of moon phase (only in French)\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sunrise\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/meteo/models/ephemeride.entity.ts:44\n                            \n                        \n\n                \n                    \n                        Sunrise hour \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sunset\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/meteo/models/ephemeride.entity.ts:50\n                            \n                        \n\n                \n                    \n                        Sunset hour\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Ephemeride {\n    \n    /**\n     * Latitude\n     * @example 48.112\n     */    \n    latitude: number;\n    \n    /**\n     * Longitude\n     * @example -1.6819\n     */\n    longitude: number;\n    \n\n    /**\n     * INSEE code of city\n     * @example 94081\n     */\n    insee: string;\n    \n     /**\n     * Day of ephemeride (0 for first day)\n     * @example 0\n     */\n    day: number; \n    \n    /**\n     * Date Time of meteo\n     * @example '2021-02-07T00:00:00+0100'\n     */\n    datetime: string;\n    \n    /**\n     * Sunrise hour \n     * @example '08:23'\n     */\n    sunrise: string;\n    \n    /**\n     * Sunset hour\n     * @example '18:17'\n     */\n    sunset: string;\n   \n    /**\n     * Duration of day \n     * @example '09:54',\n     */\n    duration_day: string;\n    \n    /**\n     * Gain or loss of duration of the day compared to the day before in minutes\n     * @example 3\n     */\n    diff_duration_day:number;\n    \n    /**\n     * Moon age in day\n     * @example 25.4\n     */\n    moon_age: number;\n     \n    /**\n     * Lib of moon phase (only in French)\n     * @example 'Dernier croissant'\n     */\n    moon_phase: string; \n\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Forecast.html":{"url":"classes/Forecast.html","title":"class - Forecast","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Forecast\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meteo/models/forecast.entity.ts\n        \n\n            \n                Description\n            \n            \n                This is a meteo forecast which tranports meteo detail\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                cp\n                            \n                            \n                                datetime\n                            \n                            \n                                day\n                            \n                            \n                                insee\n                            \n                            \n                                latitude\n                            \n                            \n                                longitude\n                            \n                            \n                                tmax\n                            \n                            \n                                tmin\n                            \n                            \n                                weather\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cp\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/meteo/models/forecast.entity.ts:20\n                            \n                        \n\n                \n                    \n                        Postal code\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            datetime\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/meteo/models/forecast.entity.ts:48\n                            \n                        \n\n                \n                    \n                        Date Time of meteo\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            day\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/meteo/models/forecast.entity.ts:41\n                            \n                        \n\n                \n                    \n                        Day of ephemeride (0 for first day)\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            insee\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/meteo/models/forecast.entity.ts:13\n                            \n                        \n\n                \n                    \n                        INSEE code\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            latitude\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/meteo/models/forecast.entity.ts:27\n                            \n                        \n\n                \n                    \n                        Latitude\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            longitude\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/meteo/models/forecast.entity.ts:34\n                            \n                        \n\n                \n                    \n                        Longitudde\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tmax\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/meteo/models/forecast.entity.ts:69\n                            \n                        \n\n                \n                    \n                        Tmax in °C\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tmin\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/meteo/models/forecast.entity.ts:62\n                            \n                        \n\n                \n                    \n                        Tmin in °C\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            weather\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/meteo/models/forecast.entity.ts:55\n                            \n                        \n\n                \n                    \n                        Wheather code (cf : https://api.meteo-concept.com/documentation#code-temps)\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Forecast {\n    \n     /**\n     * INSEE code\n     * @example 94081\n     */\n\n    insee: string; \n    \n     /**\n     * Postal code\n     * @example 94400\n     */\n\n    cp: number; \n    \n     /**\n     * Latitude\n     * @example 48.112\n     */ \n\n    latitude: number;  \n    \n     /**\n     * Longitudde\n     * @example 48.112\n     */ \n\n    longitude: number;  \n    \n     /**\n     * Day of ephemeride (0 for first day)\n     * @example 0\n     */\n\n    day: number; \n    \n    /**\n     * Date Time of meteo\n     * @example '2021-02-07T00:00:00+0100'\n     */\n\n    datetime: string; \n    \n    /**\n    * Wheather code (cf : https://api.meteo-concept.com/documentation#code-temps)\n    * @example 4\n    */\n\n    weather: number;\n    \n    /**\n    * Tmin in °C\n    * @example 11\n    */\n\n    tmin: number; \n    \n    /**\n    * Tmax in °C\n    * @example 17\n    */\n    \n    tmax: number;    \n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Hello.html":{"url":"classes/Hello.html","title":"class - Hello","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Hello\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hello.entity.ts\n        \n\n            \n                Description\n            \n            \n                This entity is here to transport an Hello Message\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            message\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/hello.entity.ts:13\n                            \n                        \n\n                \n                    \n                        Message to say Hello\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Hello {\n    \n   /**\n     * Message to say Hello\n     * @example 'Hello World !'\n     */\n        \n    message: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HttpModule.html":{"url":"modules/HttpModule.html","title":"module - HttpModule","body":"\n                   \n\n\n\n\n    Modules\n    HttpModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/http/http.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            onModuleInit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/http/http.module.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { HttpService, Logger, Module, OnModuleInit, HttpModule as BaseHttpModule } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n\n@Module({})\nexport class HttpModule implements OnModuleInit {\n\n    constructor(\n        private readonly httpService: HttpService        \n    ) { }\n\n    public onModuleInit(): any {\n        const logger = new Logger('Axios');\n        // Add request interceptor and response interceptor to log request infos\n        const axios = this.httpService.axiosRef;        \n        axios.interceptors.request.use((config) => {            \n            config['metadata'] = { ...config['metadata'], startDate: new Date() };\n            return config;\n        });\n        axios.interceptors.response.use(\n            (response) => {\n               \n                const { config } = response;\n                config['metadata'] = { ...config['metadata'], endDate: new Date() };               \n                const duration = config['metadata'].endDate.getTime() - config['metadata'].startDate.getTime();                \n                logger.log(`Request : ${config.method.toUpperCase()} ${config.url} ${duration}ms : ${JSON.stringify(response.data)}`);\n                return response;\n            },\n            (err) => {\n                logger.error(err);\n                // Don't forget this line like I did at first: it makes your failed HTTP requests resolve with \"undefined\" :-(\n                return Promise.reject(err);\n            });\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LogModule.html":{"url":"modules/LogModule.html","title":"module - LogModule","body":"\n                   \n\n\n\n\n    Modules\n    LogModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/log/log.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import {  Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { utilities, WinstonModule } from 'nest-winston';\nimport { config } from 'rxjs';\nimport * as winston from 'winston';\n\n@Module({\n    imports: [\n      WinstonModule.forRootAsync({\n        imports:[ConfigModule],\n        useFactory: (configService: ConfigService) => ({\n          format: winston.format.combine(\n            winston.format.timestamp(),\n            utilities.format.nestLike(),    \n          ),\n          transports: [\n            // Default console output\n            new winston.transports.Console(),       \n            // Record info into a file wich is deleted on each start of application\n            new winston.transports.File({ \n              filename: configService.get('LOGGER_FILE') !== undefined ? configService.get('LOGGER_FILE') : 'log.info', \n              options: { flags: 'w' } }\n              )\n          ],      \n        }),\n        inject: [ConfigService],\n      }),\n    ],\n    exports:[\n            \n    ]\n})\nexport class LogModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerMiddleware.html":{"url":"injectables/LoggerMiddleware.html","title":"injectable - LoggerMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LoggerMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/logger.middleware.ts\n        \n\n            \n                Description\n            \n            \n                A simple Middle Ware for logging\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            use\n                        \n                        \n                    \n                \n            \n            \n                \nuse(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/logger.middleware.ts:19\n                \n            \n\n\n            \n                \n                    Middle can log request, response\nnext is the \"next\" Middleware to call when this one is ended\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\n\n/**\n * A simple Middle Ware for logging\n */\n\n@Injectable()\nexport class LoggerMiddleware implements NestMiddleware {\n  /**\n   * Middle can log request, response\n   * next is the \"next\" Middleware to call when this one is ended\n   * \n   * @param req \n   * @param res \n   * @param next \n   */\n\n  use(req: Request, res: Response, next: NextFunction) {\n    //console.log(req.method, ' - ', req.url, ' headers: ', JSON.stringify(req.headers),'status : ', res.statusCode);\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Measurement.html":{"url":"classes/Measurement.html","title":"class - Measurement","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Measurement\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/station/models/mesurement.entity.ts\n        \n\n            \n                Description\n            \n            \n                This is a measurement of :\n\ntemperature\npressure\nhumidity\n\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                humidity\n                            \n                            \n                                pressure\n                            \n                            \n                                temperature\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            humidity\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/station/models/mesurement.entity.ts:27\n                            \n                        \n\n                \n                    \n                        Percent humidity value in %\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pressure\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/station/models/mesurement.entity.ts:20\n                            \n                        \n\n                \n                    \n                        Pressure value in HPa\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            temperature\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/station/models/mesurement.entity.ts:13\n                            \n                        \n\n                \n                    \n                        Temparature value un °C\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Measurement {\n     /**\n     * Temparature value un °C\n     * @example 20.05\n     */\n    temperature: number;\n   \n     /**\n     * Pressure value in HPa\n     * @example 20\n     */\n\n    pressure: number;\n    \n    /**\n     * Percent humidity value in %\n     * @example 35.50\n     */\n\n    humidity: number;\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Meteo.html":{"url":"classes/Meteo.html","title":"class - Meteo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Meteo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meteo/models/meteo.entity.ts\n        \n\n            \n                Description\n            \n            \n                Meteo entity to know temparature, weather, sunrise, sunset, ...\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                date\n                            \n                            \n                                sunrise\n                            \n                            \n                                sunset\n                            \n                            \n                                temperature\n                            \n                            \n                                weather\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            date\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/meteo/models/meteo.entity.ts:11\n                            \n                        \n\n                \n                    \n                        Date of meteo\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sunrise\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/meteo/models/meteo.entity.ts:39\n                            \n                        \n\n                \n                    \n                        Sunrise time\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sunset\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/meteo/models/meteo.entity.ts:32\n                            \n                        \n\n                \n                    \n                        Sunset time\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            temperature\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/meteo/models/meteo.entity.ts:18\n                            \n                        \n\n                \n                    \n                        Temparature value un °C\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            weather\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/meteo/models/meteo.entity.ts:25\n                            \n                        \n\n                \n                    \n                        Wheather code\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Meteo {\n\n    /**\n     * Date of meteo\n     * @example 2020-11-18\n     */\n    date: number;\n\n    /**\n     * Temparature value un °C\n     * @example 20\n     */\n\n    temperature: number;\n\n    /**\n     * Wheather code\n     * @example 1\n     */\n\n    weather: number;\n\n    /**\n     * Sunset time\n     * @example 06:00\n     */\n\n    sunset: string;\n\n    /**\n     * Sunrise time\n     * @example 21:00\n     */\n\n    sunrise: string;\n\n\n\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MeteoController.html":{"url":"controllers/MeteoController.html","title":"controller - MeteoController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MeteoController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meteo/meteo.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                meteo\n            \n\n            \n                Description\n            \n            \n                This controller enable to know meteo for a city\nWe can also get city detail like insee code, name, ...\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getEphemride\n                            \n                            \n                                    Async\n                                getForecasts\n                            \n                            \n                                    Async\n                                getLacolisation\n                            \n                            \n                                    Async\n                                getMeteo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getEphemride\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEphemride(city: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiResponse({status: 200, type: Ephemeride, description: 'Actual city's ephemeride'})@Get('ephemeride/:city')\n                \n            \n\n            \n                \n                    Defined in src/meteo/meteo.controller.ts:74\n                \n            \n\n\n            \n                \n                    Get actual city ephemeride detail\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    city\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        city name\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getForecasts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getForecasts(city: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiResponse({status: 200, type: Forecast, description: 'Actual city's meteo forecast'})@Get('forecasts/:city')\n                \n            \n\n            \n                \n                    Defined in src/meteo/meteo.controller.ts:92\n                \n            \n\n\n            \n                \n                    Get actual city meteo forecast detail\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    city\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        city name\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getLacolisation\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLacolisation(city: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiResponse({status: 200, type: City, description: 'Localisation of a city according its name'})@Get('city/:city')\n                \n            \n\n            \n                \n                    Defined in src/meteo/meteo.controller.ts:40\n                \n            \n\n\n            \n                \n                    Get city detail\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    city\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        city name\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getMeteo\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMeteo(city: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiResponse({status: 200, type: Meteo, description: 'Actual meteo'})@Get(':city')\n                \n            \n\n            \n                \n                    Defined in src/meteo/meteo.controller.ts:56\n                \n            \n\n\n            \n                \n                    Get actual city meteo detail\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    city\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        city name\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Post } from '@nestjs/common';\nimport { ApiHeader, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { City } from './models/city.entity';\nimport { Ephemeride } from './models/ephemeride.entity';\nimport { Forecast } from './models/forecast.entity';\nimport { Meteo } from './models/meteo.entity';\nimport { MeteoService } from './meteo.service';\n\n/**\n * This controller enable to know meteo for a city\n * We can also get city detail like insee code, name, ...\n */\n\n@ApiTags('Meteo')\n@ApiHeader({\n  name: 'Authorization',\n  description: 'Bearer xxxxxxxxxxxxxxxxxxxxxxxx',\n})\n@Controller('meteo')\nexport class MeteoController {\n  constructor(\n    private readonly meteoService: MeteoService\n  ) {\n\n  }\n\n  /**\n   * Get city detail\n   * \n   * @param city city name\n   */\n\n\n  @ApiResponse({\n    status: 200,\n    type: City,\n    description: 'Localisation of a city according its name'\n  })\n  @Get('city/:city')\n  async getLacolisation(@Param('city') city: string ): Promise {\n    return this.meteoService.localise(city);    \n  }\n\n   /**\n    * Get actual city meteo detail\n    * \n    * @param city city name\n    */\n  \n  @ApiResponse({\n    status: 200,\n    type: Meteo,\n    description: 'Actual meteo'\n  })\n  @Get(':city')\n  async getMeteo(@Param('city') city: string ): Promise {\n    const cityDetail: City = await this.meteoService.localise(city);     \n    return this.meteoService.getMeteo(cityDetail.insee);\n  }\n\n  /**\n   * Get actual city ephemeride detail\n   * \n   * @param city city name\n   */\n\n\n  @ApiResponse({\n    status: 200,\n    type: Ephemeride,\n    description: 'Actual city\\'s ephemeride'\n  })\n  @Get('ephemeride/:city')\n  async getEphemride(@Param('city') city: string ): Promise {\n    const cityDetail: City = await this.meteoService.localise(city); \n    return this.meteoService.getEphemeride(cityDetail.insee);\n  }\n\n   /**\n   * Get actual city meteo forecast detail\n   * \n   * @param city city name\n   */\n\n\n  @ApiResponse({\n    status: 200,\n    type: Forecast,\n    description: 'Actual city\\'s meteo forecast'\n  })\n  @Get('forecasts/:city')\n  async getForecasts(@Param('city') city: string ): Promise {\n    const cityDetail: City = await this.meteoService.localise(city);\n    return this.meteoService.getForecasts(cityDetail.insee);\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MeteoHttpModule.html":{"url":"modules/MeteoHttpModule.html","title":"module - MeteoHttpModule","body":"\n                   \n\n\n\n\n    Modules\n    MeteoHttpModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/http/meteo-http.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { HttpService, Logger, Module, OnModuleInit, HttpModule as BaseHttpModule } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { HttpModule } from './http.module';\n\n@Module({\n    imports: [\n        BaseHttpModule.registerAsync({\n            imports: [ConfigModule],\n            useFactory: async (configService: ConfigService) => ({\n              headers: {          \n                Authorization: `Bearer ${configService.get('METEO_API_BEARER')}`\n              },\n              timeout: 7000,\n              maxRedirects: 5\n            }),\n            inject: [ConfigService]\n          }),  \n        ConfigModule,      \n    ],\n    exports: [\n        BaseHttpModule,\n    ],\n})\nexport class MeteoHttpModule extends HttpModule {   \n}\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MeteoModule.html":{"url":"modules/MeteoModule.html","title":"module - MeteoModule","body":"\n                   \n\n\n\n\n    Modules\n    MeteoModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MeteoModule\n\n\n\ncluster_MeteoModule_imports\n\n\n\ncluster_MeteoModule_providers\n\n\n\n\nMeteoHttpModule\n\nMeteoHttpModule\n\n\n\nMeteoModule\n\nMeteoModule\n\nMeteoModule -->\n\nMeteoHttpModule->MeteoModule\n\n\n\n\n\nMeteoService\n\nMeteoService\n\nMeteoModule -->\n\nMeteoService->MeteoModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/meteo/meteo.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MeteoService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MeteoController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            MeteoHttpModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MeteoHttpModule } from 'src/http/meteo-http.module';\nimport { ConfigurationModule } from 'src/configuration/configuration.module';\nimport { MeteoController } from './meteo.controller';\nimport { MeteoService } from './meteo.service';\n\n@Module({\n  imports:[    \n    MeteoHttpModule\n  ],\n  controllers: [MeteoController],\n  providers: [MeteoService]\n})\nexport class MeteoModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MeteoService.html":{"url":"injectables/MeteoService.html","title":"injectable - MeteoService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  MeteoService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meteo/meteo.service.ts\n        \n\n            \n                Description\n            \n            \n                This is the meteo Service\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                moeteoApiUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                getEphemeride\n                            \n                            \n                                    Public\n                                    Async\n                                getForecasts\n                            \n                            \n                                    Public\n                                    Async\n                                getMeteo\n                            \n                            \n                                    Public\n                                    Async\n                                localise\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/meteo/meteo.service.ts:20\n                            \n                        \n\n                \n                    \n                            We need :\n\nHTTP Service to call remote Meteo Concept REST service\nConfig service to know all URL to call\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getEphemeride\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEphemeride(insee: string)\n                \n            \n\n\n            \n                \n                    Defined in src/meteo/meteo.service.ts:69\n                \n            \n\n\n            \n                \n                    Used to get an ephemeride of an insee code\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    insee\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        : insee code (ex : 94081)\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getForecasts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getForecasts(insee: string)\n                \n            \n\n\n            \n                \n                    Defined in src/meteo/meteo.service.ts:82\n                \n            \n\n\n            \n                \n                    Used to get the forecasts of an insee code\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    insee\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        : insee code (ex : 94081)\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getMeteo\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMeteo(insee: string)\n                \n            \n\n\n            \n                \n                    Defined in src/meteo/meteo.service.ts:57\n                \n            \n\n\n            \n                \n                    Used to get the meteo detail of an insee code\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    insee\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            localise\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    localise(city: string)\n                \n            \n\n\n            \n                \n                    Defined in src/meteo/meteo.service.ts:44\n                \n            \n\n\n            \n                \n                    Used to localise City (insee code)\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    city\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        : name of the city\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            moeteoApiUrl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/meteo/meteo.service.ts:20\n                            \n                        \n\n                \n                    \n                        Url of Meteo Concept API \n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { HttpService, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { City } from './models/city.entity';\nimport { Ephemeride } from './models/ephemeride.entity';\nimport { Forecast } from './models/forecast.entity';\nimport { Meteo } from './models/meteo.entity';\n\n/**\n * This is the meteo Service\n */\n\n@Injectable()\nexport class MeteoService {\n    \n    /**\n      * Url of Meteo Concept API \n      *     \n      */\n    \n      private moeteoApiUrl: string;\n    \n    /**\n     * We need :\n     * - HTTP Service to call remote Meteo Concept REST service\n     * - Config service to know all URL to call\n     * @param httpService \n     * @param configService \n     */\n    \n    constructor(\n        private readonly httpService: HttpService,\n        private readonly configService: ConfigService\n        ){\n            this.moeteoApiUrl = this.configService.get('METEO_API_URL');\n    }\n\n    /**\n     * Used to localise City (insee code)\n     * \n     * @param city : name of the city\n     * \n     */\n\n    public async localise(city: string): Promise{\n        const url = `${this.moeteoApiUrl}/location/cities?search=${city}`;\n        const response = await this.httpService.get(`${url}`).toPromise();\n        return response.data !== undefined && response.data.cities !== undefined ? response.data.cities[0] : null;\n    }\n\n     /**\n      * Used to get the meteo detail of an insee code\n      * \n      * @param insse : insee code (ex : 94081)\n      * \n      */\n\n    public async getMeteo(insee: string): Promise {\n        const url = `${this.moeteoApiUrl}/forecast/daily?insee=${insee}`;\n        const response = await this.httpService.get(`${url}`).toPromise();\n        return response.data;\n    }\n\n    /**\n     * Used to get an ephemeride of an insee code\n     * \n     * @param insee : insee code (ex : 94081)\n     */\n\n    public async getEphemeride(insee: string): Promise {\n        const url = `${this.configService.get('METEO_API_URL')}/ephemeride/0?insee=${insee}`;\n        console.log(url)\n        const response = await this.httpService.get(`${url}`).toPromise();\n        return response.data !== undefined && response.data.ephemeride !== undefined ? response.data.ephemeride : null;     \n    }\n\n    /**\n     * Used to get the forecasts of an insee code\n     * \n     * @param insee : insee code (ex : 94081)\n     */\n    \n    public async getForecasts(insee: string): Promise {       \n        const url = `${this.configService.get('METEO_API_URL')}/forecast/daily?insee=${insee}`;        \n        const response = await this.httpService.get(`${url}`).toPromise();\n        return response.data !== undefined && response.data.forecast !== undefined ? response.data.forecast : null;        \n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MeteoStats.html":{"url":"classes/MeteoStats.html","title":"class - MeteoStats","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MeteoStats\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/station/stats/models/meteo-stats.entity.ts\n        \n\n            \n                Description\n            \n            \n                This is meteo stats with a measurement at a precise time\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                measurement\n                            \n                            \n                                ts\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            measurement\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Measurement\n\n                        \n                    \n                        \n                            \n                                    Defined in src/station/stats/models/meteo-stats.entity.ts:20\n                            \n                        \n\n                \n                    \n                        Measurement of meteo (temperature, pressure, humidity)     \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ts\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/station/stats/models/meteo-stats.entity.ts:14\n                            \n                        \n\n                \n                    \n                        Timestamp\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Measurement } from \"src/station/models/mesurement.entity\";\n\n/**\n  * This is meteo stats with a measurement at a precise time\n  */\n\n\nexport class MeteoStats {\n    /**\n     * Timestamp\n     * @example 2156464561231\n     */\n\n    ts: number;\n \n    /**\n     * Measurement of meteo (temperature, pressure, humidity)     \n     */\n\n    measurement: Measurement;\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/StationController.html":{"url":"controllers/StationController.html","title":"controller - StationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  StationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/station/station.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                station\n            \n\n            \n                Description\n            \n            \n                You can control the meteo station with this controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getDevice\n                            \n                            \n                                    Async\n                                getDevices\n                            \n                            \n                                    Async\n                                getState\n                            \n                            \n                                    Async\n                                meteo\n                            \n                            \n                                    Async\n                                restart\n                            \n                            \n                                    Async\n                                switchresource\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getDevice\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDevice()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('device')\n                \n            \n\n            \n                \n                    Defined in src/station/station.controller.ts:35\n                \n            \n\n\n            \n                \n                    Get registered meteo station\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getDevices\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDevices()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('devices')\n                \n            \n\n            \n                \n                    Defined in src/station/station.controller.ts:26\n                \n            \n\n\n            \n                \n                    Get all devices\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getState\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getState(resource: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('device/:resource/state')\n                \n            \n\n            \n                \n                    Defined in src/station/station.controller.ts:49\n                \n            \n\n\n            \n                \n                    Get current state of a resource\n\nheater\nled\nscreen\n\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    resource\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            meteo\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    meteo()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('device/mesurement')@ApiResponse({status: 200, type: Measurement, description: 'Measurement of temperature, humidity, pressure'})\n                \n            \n\n            \n                \n                    Defined in src/station/station.controller.ts:63\n                \n            \n\n\n            \n                \n                    Get current measurement of registered meteo station \n\n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            restart\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    restart()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('restart')\n                \n            \n\n            \n                \n                    Defined in src/station/station.controller.ts:84\n                \n            \n\n\n            \n                \n                    Restart registered meteo station\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            switchresource\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    switchresource(switchOnOFF: SwitchState, resource: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('device/:resource')\n                \n            \n\n            \n                \n                    Defined in src/station/station.controller.ts:75\n                \n            \n\n\n            \n                \n                    Can switch OFF or OFF a resource\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    switchOnOFF\n                                    \n                                                SwitchState\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    resource\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        : resource like (heater-state, led-state) \n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Post, Put } from '@nestjs/common';\nimport { ApiHeader, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { SwitchState } from './models/switch-state.interface';\nimport { Measurement } from './models/mesurement.entity';\nimport { StationService } from './station.service';\n\n/**\n  * You can control the meteo station with this controller\n  */\n\n\n@ApiTags('Station')\n@ApiHeader({\n  name: 'Authorization',\n  description: 'Bearer xxxxxxxxxxxxxxxxxxxxxxxx',\n})\n@Controller('station')\nexport class StationController {\n    constructor(private readonly stationService: StationService) { }\n    \n    /**\n      * Get all devices\n      */\n\n    @Get('devices')\n    async getDevices(): Promise {      \n      return await this.stationService.getDevices();\n    }\n\n    /**\n     * Get registered meteo station\n     */\n\n    @Get('device')\n    async getDevice(): Promise {      \n      return await this.stationService.getDevice();\n    }\n\n    /**\n     * Get current state of a resource\n     * - heater\n     * - led\n     * - screen\n     * \n     * @param resource \n     */\n\n    @Get('device/:resource/state')\n    async getState(@Param('resource') resource: string): Promise {\n      return await this.stationService.getState(resource);\n    }\n\n    /**\n     * Get current measurement of registered meteo station \n     */\n\n    @Get('device/mesurement')    \n    @ApiResponse({\n        status: 200,\n        type: Measurement,\n        description: 'Measurement of temperature, humidity, pressure' }\n    )\n    async meteo(): Promise {\n      return await this.stationService.getMeteoMeasurement();\n    }\n\n     /**\n     * Can switch OFF or OFF a resource\n     * \n     * @param resource : resource like (heater-state, led-state) \n     * @param switchState : ON or OFF\n     */\n\n    @Post('device/:resource')\n    async switchresource(@Body() switchOnOFF: SwitchState, @Param('resource') resource: string ): Promise {\n      return await this.stationService.switchresource(resource,switchOnOFF);\n    }\n\n    /**\n      * Restart registered meteo station\n      */\n    \n    @Put('restart')\n    async restart(): Promise {\n        return await this.stationService.restart();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StationHttpModule.html":{"url":"modules/StationHttpModule.html","title":"module - StationHttpModule","body":"\n                   \n\n\n\n\n    Modules\n    StationHttpModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/http/station-http.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { HttpService, Logger, Module, OnModuleInit, HttpModule as BaseHttpModule } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { HttpModule } from './http.module';\n\n@Module({\n    imports: [\n        BaseHttpModule.registerAsync({\n            imports: [ConfigModule],\n            useFactory: async (configService: ConfigService) => ({\n              headers: {          \n                Authorization: `Bearer ${configService.get('THINGER_IO_API_BEARER')}`\n              },\n              timeout: 7000,\n              maxRedirects: 5\n            }),\n            inject: [ConfigService]\n          }),  \n        ConfigModule,      \n    ],\n    exports: [\n        BaseHttpModule,\n    ],\n})\nexport class StationHttpModule extends HttpModule {   \n}\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StationModule.html":{"url":"modules/StationModule.html","title":"module - StationModule","body":"\n                   \n\n\n\n\n    Modules\n    StationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_StationModule\n\n\n\ncluster_StationModule_imports\n\n\n\ncluster_StationModule_providers\n\n\n\n\nStationHttpModule\n\nStationHttpModule\n\n\n\nStationModule\n\nStationModule\n\nStationModule -->\n\nStationHttpModule->StationModule\n\n\n\n\n\nStationService\n\nStationService\n\nStationModule -->\n\nStationService->StationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/station/station.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            StationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            StationHttpModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { StationHttpModule } from 'src/http/station-http.module';\nimport { ConfigurationModule } from 'src/configuration/configuration.module';\nimport { StationController } from './station.controller';\nimport { StationService } from './station.service';\n\n@Module({\n  imports:[    \n    StationHttpModule\n  ],\n  controllers: [StationController],\n  providers: [StationService]\n})\nexport class StationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StationService.html":{"url":"injectables/StationService.html","title":"injectable - StationService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  StationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/station/station.service.ts\n        \n\n            \n                Description\n            \n            \n                This service can command registered meteo station\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                deviceId\n                            \n                            \n                                    Private\n                                devicesUrl\n                            \n                            \n                                    Private\n                                resourcesUrl\n                            \n                            \n                                    Private\n                                rootUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                getDevice\n                            \n                            \n                                    Public\n                                    Async\n                                getDevices\n                            \n                            \n                                    Public\n                                    Async\n                                getMeteoMeasurement\n                            \n                            \n                                    Public\n                                    Async\n                                getState\n                            \n                            \n                                    Public\n                                    Async\n                                restart\n                            \n                            \n                                    Public\n                                    Async\n                                switchresource\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/station/station.service.ts:35\n                            \n                        \n\n                \n                    \n                            Constructor \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                : http service to call REST IOT API\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                : config service to get URL paths\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getDevice\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDevice()\n                \n            \n\n\n            \n                \n                    Defined in src/station/station.service.ts:67\n                \n            \n\n\n            \n                \n                    Get registered meteo station\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getDevices\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDevices()\n                \n            \n\n\n            \n                \n                    Defined in src/station/station.service.ts:58\n                \n            \n\n\n            \n                \n                    Get list of connected devices\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getMeteoMeasurement\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMeteoMeasurement()\n                \n            \n\n\n            \n                \n                    Defined in src/station/station.service.ts:98\n                \n            \n\n\n            \n                \n                    Get the the current meteo station measurement (temperature, pressure, humidity, ...)\n\n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getState\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getState(resource: string)\n                \n            \n\n\n            \n                \n                    Defined in src/station/station.service.ts:89\n                \n            \n\n\n            \n                \n                    Get current state ON|OFF of resource\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    resource\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        : resource like (heater, led, screen)      \n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            restart\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    restart()\n                \n            \n\n\n            \n                \n                    Defined in src/station/station.service.ts:107\n                \n            \n\n\n            \n                \n                    Restart connected registered meteo station\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            switchresource\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    switchresource(resource: string, switchOnOFF: SwitchState)\n                \n            \n\n\n            \n                \n                    Defined in src/station/station.service.ts:79\n                \n            \n\n\n            \n                \n                    Can switch OFF or OFF a resource\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    resource\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        : resource like (heater-state, led-state) \n\n                                    \n                                \n                                \n                                    switchOnOFF\n                                    \n                                                SwitchState\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            deviceId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/station/station.service.ts:35\n                            \n                        \n\n                \n                    \n                        Device ID of registered device\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            devicesUrl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/station/station.service.ts:29\n                            \n                        \n\n                \n                    \n                        Devices path in URL\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            resourcesUrl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/station/station.service.ts:23\n                            \n                        \n\n                \n                    \n                        Resource Path in URL\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            rootUrl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/station/station.service.ts:17\n                            \n                        \n\n                \n                    \n                        Root URL of REST API IOT\n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { HttpService, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { SwitchState } from './models/switch-state.interface';\nimport { Measurement } from './models/mesurement.entity';\n\n/**    \n  * This service can command registered meteo station\n  */\n\n@Injectable()\nexport class StationService {\n\n    /**\n      * Root URL of REST API IOT\n      */\n\n    private rootUrl: string;\n    \n    /**\n      * Resource Path in URL\n      */\n    \n    private resourcesUrl: string;\n    \n    /**\n      * Devices path in URL\n      */\n\n    private devicesUrl: string;\n    \n    /**\n      * Device ID of registered device\n      */\n    \n    private deviceId: string;\n\n  /**\n    * Constructor \n    * \n    * @param httpService : http service to call REST IOT API\n    * @param configService  : config service to get URL paths\n    */\n\n    constructor(\n        private readonly httpService: HttpService,\n        private readonly configService: ConfigService) {\n        this.rootUrl = this.configService.get('THINGER_IO_API_URL');\n        this.resourcesUrl = this.configService.get('THINGER_IO_API_resourceS_PATH');\n        this.devicesUrl = this.configService.get('THINGER_IO_API_DEVICES_PATH');\n        this.deviceId = this.configService.get('THINGER_IO_API_DEVICE_ID');\n    }\n\n    /**\n     * Get list of connected devices\n     */\n\n\n    public async getDevices(): Promise {\n        const response = await this.httpService.get(`${this.rootUrl}${this.devicesUrl}`).toPromise();\n        return response.data; \n    }\n\n    /**\n     * Get registered meteo station\n     */\n\n    public async getDevice(): Promise {\n        const response = await this.httpService.get(`${this.rootUrl}${this.devicesUrl}/${this.deviceId}`).toPromise();\n        return response.data; \n    }\n\n    /**\n     * Can switch OFF or OFF a resource\n     * \n     * @param resource : resource like (heater-state, led-state) \n     * @param switchState : ON or OFF\n     */\n\n    public async switchresource(resource: string, switchOnOFF: SwitchState): Promise {\n        const response = await this.httpService.post(`${this.rootUrl}${this.resourcesUrl}${resource}`, { in: switchState.state === 'ON' }).toPromise();\n        return response.data;\n    }\n     /**\n      * Get current state ON|OFF of resource\n      * \n      * @param resource : resource like (heater, led, screen)      \n      */\n\n    public async getState(resource: string): Promise {\n        const response = await this.httpService.get(`${this.rootUrl}${this.resourcesUrl}${resource}-state`).toPromise();\n        return response.data;\n    }\n\n    /**\n      * Get the the current meteo station measurement (temperature, pressure, humidity, ...)\n      */\n\n    public async getMeteoMeasurement(): Promise {\n        const response = await this.httpService.get(`${this.rootUrl}${this.resourcesUrl}meteo`).toPromise();\n        return response.data;\n    }\n\n    /**\n      * Restart connected registered meteo station\n      */\n\n    public async restart(): Promise {\n        await this.httpService.post(`${this.rootUrl}${this.resourcesUrl}reseting`).toPromise();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/StatsController.html":{"url":"controllers/StatsController.html","title":"controller - StatsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  StatsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/station/stats/stats.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                station/stats\n            \n\n            \n                Description\n            \n            \n                A controller to retrieve all recorded stats\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getDailyStats\n                            \n                            \n                                getRealtimeStats\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getDailyStats\n                        \n                        \n                    \n                \n            \n            \n                \ngetDailyStats()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('daily')\n                \n            \n\n            \n                \n                    Defined in src/station/stats/stats.controller.ts:33\n                \n            \n\n\n            \n                \n                    Get the daily stats\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getRealtimeStats\n                        \n                        \n                    \n                \n            \n            \n                \ngetRealtimeStats()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('realtime')\n                \n            \n\n            \n                \n                    Defined in src/station/stats/stats.controller.ts:43\n                \n            \n\n\n            \n                \n                    Get the realtime stats\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { ApiHeader, ApiTags } from '@nestjs/swagger';\nimport { MeteoStats } from './models/meteo-stats.entity';\nimport { StatsService } from './stats.service';\n\n/**\n * A controller to retrieve all recorded stats\n */\n\n\n@ApiHeader({\n  name: 'Authorization',\n  description: 'Bearer xxxxxxxxxxxxxxxxxxxxxxxx',\n})\n@ApiTags('Stats')\n@Controller('station/stats')\nexport class StatsController {\n\n  /**\n   * \n   * @param statsService We just need StatsService\n   */\n\n  constructor(\n    private readonly statsService: StatsService,   \n  ){}\n\n  /**\n   * Get the daily stats\n   */\n  \n  @Get('daily')\n  getDailyStats(): Promise{\n    return this.statsService.getDailyStats();\n  }\n\n  /**\n   * Get the realtime stats\n   */\n\n\n  @Get('realtime')\n  getRealtimeStats(): Promise{\n    return this.statsService.getRealtimeStats();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StatsModule.html":{"url":"modules/StatsModule.html","title":"module - StatsModule","body":"\n                   \n\n\n\n\n    Modules\n    StatsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_StatsModule\n\n\n\ncluster_StatsModule_imports\n\n\n\ncluster_StatsModule_providers\n\n\n\n\nStationHttpModule\n\nStationHttpModule\n\n\n\nStatsModule\n\nStatsModule\n\nStatsModule -->\n\nStationHttpModule->StatsModule\n\n\n\n\n\nStatsService\n\nStatsService\n\nStatsModule -->\n\nStatsService->StatsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/station/stats/stats.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StatsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            StatsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            StationHttpModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { StationHttpModule } from 'src/http/station-http.module';\nimport { ConfigurationModule } from 'src/configuration/configuration.module';\nimport { StatsController } from './stats.controller';\nimport { StatsService } from './stats.service';\n\n@Module({\n  imports:[    \n    StationHttpModule\n  ],\n  controllers: [StatsController],\n  providers: [StatsService]\n})\nexport class StatsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StatsService.html":{"url":"injectables/StatsService.html","title":"injectable - StatsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  StatsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/station/stats/stats.service.ts\n        \n\n            \n                Description\n            \n            \n                This service is called to get alls stats\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                bucketDaily\n                            \n                            \n                                    Private\n                                    Readonly\n                                bucketH24\n                            \n                            \n                                    Private\n                                    Readonly\n                                rootUrl\n                            \n                            \n                                    Private\n                                    Readonly\n                                rootUrlBuckets\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                getDailyStats\n                            \n                            \n                                    Public\n                                    Async\n                                getRealtimeStats\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/station/stats/stats.service.ts:34\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                : http service to call REST IOT API\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                : config service to get URL paths\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getDailyStats\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDailyStats()\n                \n            \n\n\n            \n                \n                    Defined in src/station/stats/stats.service.ts:68\n                \n            \n\n\n            \n                \n                    Get the daily stats\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getRealtimeStats\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getRealtimeStats()\n                \n            \n\n\n            \n                \n                    Defined in src/station/stats/stats.service.ts:58\n                \n            \n\n\n            \n                \n                    Get the realtime stats\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            bucketDaily\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/station/stats/stats.service.ts:34\n                            \n                        \n\n                \n                    \n                        Bucket daily \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            bucketH24\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/station/stats/stats.service.ts:28\n                            \n                        \n\n                \n                    \n                        Buckets h24\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            rootUrl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/station/stats/stats.service.ts:16\n                            \n                        \n\n                \n                    \n                        Root URL of API \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            rootUrlBuckets\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/station/stats/stats.service.ts:22\n                            \n                        \n\n                \n                    \n                        Buckets url of API\n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { HttpService, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { MeteoStats } from './models/meteo-stats.entity';\n\n/**\n  * This service is called to get alls stats\n  */\n\n@Injectable()\nexport class StatsService {\n\n  /**\n    * Root URL of API \n    */\n\n  private readonly rootUrl: string;\n  \n  /**\n    * Buckets url of API\n    */\n\n  private readonly rootUrlBuckets: string;\n  \n  /**\n    * Buckets h24\n    */\n  \n  private readonly bucketH24: string;\n\n  /**\n    * Bucket daily \n    */\n\n  private readonly bucketDaily: string\n\n\n  /**\n   * Constructor\n   * \n   * @param httpService : http service to call REST IOT API\n   * @param configService  : config service to get URL paths\n   */\n\n  constructor(\n    private readonly httpService: HttpService,\n    private readonly configService: ConfigService\n  ) {\n    this.rootUrl = this.configService.get('THINGER_IO_API_URL');\n    this.rootUrlBuckets = this.rootUrl + this.configService.get('THINGER_IO_API_BUCKETS_PATH');\n    this.bucketH24 = this.configService.get('THINGER_IO_BUCKET_H24');\n    this.bucketDaily = this.configService.get('THINGER_IO_BUCKET_DAILY');\n  }\n\n  /**\n   * Get the realtime stats\n   */\n\n  public async getRealtimeStats(): Promise {    \n    const url = `${this.rootUrlBuckets}/${this.bucketH24}/data`;    \n    const response = await this.httpService.get(`${url}`).toPromise();\n    return response.data;\n  }\n\n  /**\n   * Get the daily stats\n   */\n\n  public async getDailyStats(): Promise {\n    const url = `${this.rootUrlBuckets}/${this.bucketDaily}/data`;\n    const response = await this.httpService.get(`${url}`).toPromise();\n    return response.data;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SwitchState.html":{"url":"interfaces/SwitchState.html","title":"interface - SwitchState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SwitchState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/station/models/switch-state.interface.ts\n        \n\n            \n                Description\n            \n            \n                Insterface of switch state\n\nON : a resource is on\nOFF: a resource is off\n\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        state\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        state\n                                    \n                                \n                                \n                                    \n                                        state:     \"ON\" | \"OFF\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"ON\" | \"OFF\"\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Only 2 possible values \n\nON\nOFF \n\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface SwitchState {\n    \n    /**\n     * Only 2 possible values \n     * - ON\n     * - OFF \n     */\n    \n    state: 'ON' | 'OFF';\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/hello.entity.ts\n            \n            class\n            Hello\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/logger.middleware.ts\n            \n            injectable\n            LoggerMiddleware\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            PORT\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/meteo/meteo.controller.ts\n            \n            controller\n            MeteoController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/meteo/meteo.service.ts\n            \n            injectable\n            MeteoService\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/meteo/models/city.entity.ts\n            \n            class\n            City\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/meteo/models/ephemeride.entity.ts\n            \n            class\n            Ephemeride\n            \n                100 %\n                (12/12)\n            \n        \n        \n            \n                \n                src/meteo/models/forecast.entity.ts\n            \n            class\n            Forecast\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/meteo/models/meteo.entity.ts\n            \n            class\n            Meteo\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/station/models/mesurement.entity.ts\n            \n            class\n            Measurement\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/station/models/switch-state.interface.ts\n            \n            interface\n            SwitchState\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/station/station.controller.ts\n            \n            controller\n            StationController\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/station/station.service.ts\n            \n            injectable\n            StationService\n            \n                100 %\n                (12/12)\n            \n        \n        \n            \n                \n                src/station/stats/models/meteo-stats.entity.ts\n            \n            class\n            MeteoStats\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/station/stats/stats.controller.ts\n            \n            controller\n            StatsController\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/station/stats/stats.service.ts\n            \n            injectable\n            StatsService\n            \n                100 %\n                (8/8)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^7.5.1\n        \n            @nestjs/config : ^0.6.3\n        \n            @nestjs/core : ^7.5.1\n        \n            @nestjs/platform-express : ^7.5.1\n        \n            @nestjs/swagger : ^4.7.12\n        \n            helmet : ^4.4.1\n        \n            nest-winston : ^1.4.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^6.6.3\n        \n            swagger-ui-express : ^4.1.6\n        \n            winston : ^3.3.3\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                    It start our HTTP application\n\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nMeteo Station Back End\nThis is Back-End API for communicating with a IOT Meteo Station\nUseful Documentations\nnestjs\n\nOfficial Doc of netsjs : https://docs.nestjs.com/\n\nLogging\nSimple log HTTP with morgan\n\nMorgan npmjs page : https://www.npmjs.com/package/morgan\nAdvanced log with Winston\n\nWinston npmjs page : https://www.npmjs.com/package/nest-winston\n\nWinston github :https://github.com/winstonjs/winston\n\nhttps://github.com/winstonjs/winston/blob/master/docs/transports.md\nhttps://github.com/winstonjs/winston#combining-formats\n\n\nOthers : https://developer.aliyun.com/mirror/npm/package/nest-winston/v/1.0.2\n\n\nTechnical Documentation\nCode documented with Compodoc\n\nDocumentation Nest : https://docs.nestjs.com/recipes/documentation\nCompodoc : https://compodoc.app/\n\n\n\nREST API exposed with openapi\n\nNestjs open api page : https://docs.nestjs.com/openapi/introduction\n\nOthers topics\nRedefine your own HttpModule\n\nhttps://github.com/paztek/nestjs-http-service-example/blob/master/src/http/http.module.ts\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConfigurationModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HttpModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LogModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MeteoHttpModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MeteoModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StationHttpModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StatsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_MeteoModule\n\n\n\ncluster_MeteoModule_imports\n\n\n\ncluster_MeteoModule_providers\n\n\n\ncluster_StationModule\n\n\n\ncluster_StationModule_imports\n\n\n\ncluster_StationModule_providers\n\n\n\ncluster_StatsModule\n\n\n\ncluster_StatsModule_providers\n\n\n\n\nConfigurationModule\n\nConfigurationModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nConfigurationModule->AppModule\n\n\n\n\n\nLogModule\n\nLogModule\n\nAppModule -->\n\nLogModule->AppModule\n\n\n\n\n\nMeteoModule\n\nMeteoModule\n\nAppModule -->\n\nMeteoModule->AppModule\n\n\n\n\n\nStationModule\n\nStationModule\n\nAppModule -->\n\nStationModule->AppModule\n\n\n\n\n\nStatsModule\n\nStatsModule\n\nAppModule -->\n\nStatsModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nMeteoHttpModule\n\nMeteoHttpModule\n\nMeteoModule -->\n\nMeteoHttpModule->MeteoModule\n\n\n\n\n\nMeteoService\n\nMeteoService\n\nMeteoModule -->\n\nMeteoService->MeteoModule\n\n\n\n\n\nStationHttpModule\n\nStationHttpModule\n\nStationModule -->\n\nStationHttpModule->StationModule\n\n\n\nStatsModule -->\n\nStationHttpModule->StatsModule\n\n\n\n\n\nStationService\n\nStationService\n\nStationModule -->\n\nStationService->StationModule\n\n\n\n\n\nStatsService\n\nStatsService\n\nStatsModule -->\n\nStatsService->StatsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        9 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PORT   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            PORT\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : process.env.PORT || 80\n                        \n                    \n\n                \n                    \n                        We can define an env var to choose another port\n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
