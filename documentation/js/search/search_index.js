var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.276,1,2.042]],["body/controllers/AppController.html",[0,1.83,1,2.928,2,1.373,3,0.284,4,0.284,5,0.242,6,2.846,7,2.198,8,0.032,9,0.525,10,1.549,11,4.546,12,2.198,13,2.846,14,3.297,15,0.932,16,3.451,17,2.928,18,3.297,19,4.542,20,1.426,21,3.409,22,0.638,23,3.409,24,1.163,25,0.927,26,0.638,27,2.684,28,2.846,29,3.297,30,1.976,31,1.792,32,2.846,33,3.409,34,0.284,35,0.017,36,1.634,37,1.496,38,1.373,39,2.475,40,3.409,41,1.373,42,3.409,43,0.017,44,0.022,45,0.017]],["title/modules/AppModule.html",[46,0.65,47,2.042]],["body/modules/AppModule.html",[1,2.94,2,1.578,3,0.229,4,0.229,5,0.195,8,0.032,10,0.938,15,0.564,22,0.515,24,0.938,25,0.977,26,0.515,27,2.87,28,2.295,34,0.229,35,0.014,43,0.014,44,0.019,45,0.014,46,0.936,47,3.966,48,0.938,49,1.318,50,1.594,51,1.594,52,1.318,53,2.644,54,1.207,55,2.295,56,2.295,57,2.295,58,3.165,59,2.396,60,3.165,61,3.165,62,2.27,63,1.318,64,1.594,65,2.75,66,1.877,67,2.75,68,3.916,69,4.97,70,2.75,71,1.318,72,1.108,73,1.318,74,3.916,75,2.295,76,3.916,77,2.75,78,2.75,79,2.75,80,1.772,81,2.75,82,2.75,83,2.75,84,1.996,85,2.75,86,2.75]],["title/injectables/AppService.html",[27,1.665,87,1.08]],["body/injectables/AppService.html",[3,0.285,4,0.285,5,0.243,8,0.032,9,0.527,10,1.553,11,4.553,16,3.385,18,2.484,20,1.075,22,0.853,24,1.167,25,0.775,26,0.641,27,2.393,32,2.857,34,0.285,35,0.017,37,2.246,38,2.061,41,1.379,43,0.017,44,0.022,45,0.017,87,1.553,88,1.799,89,2.857,90,1.553,91,3.764,92,3.423,93,4.554,94,2.857,95,2.206,96,3.305,97,4.554,98,3.423,99,4.554,100,2.857,101,3.423,102,2.484]],["title/classes/City.html",[35,0.016,103,1.665]],["body/classes/City.html",[3,0.247,4,0.247,5,0.21,8,0.032,9,0.456,15,1.148,22,1.047,34,0.247,35,0.015,43,0.015,44,0.02,45,0.015,72,2.176,90,1.407,103,2.7,104,1.3,105,2.473,106,5.401,107,3.964,108,3.481,109,4.165,110,3.447,111,3.076,112,2.962,113,2.962,114,3.445,115,3.311,116,1.903,117,2.962,118,2.962,119,2.962,120,2.962,121,2.681,122,2.962,123,2.962,124,2.962,125,2.15,126,2.473,127,2.962,128,2.962,129,2.962]],["title/classes/Ephemeride.html",[35,0.016,130,1.665]],["body/classes/Ephemeride.html",[3,0.189,4,0.189,5,0.161,8,0.032,9,0.348,15,1.18,20,0.711,22,1.077,34,0.189,35,0.011,43,0.011,44,0.017,45,0.011,90,1.158,103,1.189,104,0.993,108,2.92,109,3.288,110,3.288,111,2.923,115,1.458,116,2.159,121,2.757,125,1.642,130,2.142,131,1.889,132,3.402,133,4.642,134,3.396,135,4.076,136,4.076,137,4.076,138,3.781,139,3.781,140,2.263,141,2.263,142,2.263,143,2.263,144,2.263,145,2.263,146,2.263,147,2.263,148,2.263,149,2.263,150,2.263,151,1.889,152,2.263,153,2.465,154,1.642,155,1.458,156,1.642,157,1.889,158,1.889,159,1.889,160,3.396,161,2.263,162,2.263,163,2.834,164,2.263,165,2.263,166,2.263,167,2.263,168,2.263,169,2.263,170,2.263,171,2.263,172,3.396,173,2.263,174,2.263,175,2.263,176,2.263,177,2.263,178,2.263,179,2.263]],["title/classes/Forecast.html",[35,0.016,180,1.836]],["body/classes/Forecast.html",[3,0.207,4,0.207,5,0.176,8,0.032,9,0.383,15,1.17,20,0.781,22,1.067,34,0.207,35,0.012,43,0.012,44,0.018,45,0.012,90,1.242,104,1.091,107,3.596,108,3.254,109,3.443,110,3.127,111,3.18,114,3.039,115,3.254,116,1.757,121,2.733,125,1.805,126,2.075,130,1.307,132,3.596,133,4.214,151,3.039,153,2.643,154,1.805,155,1.602,156,1.805,157,2.075,158,2.075,159,2.075,180,2.111,181,2.075,182,4.743,183,4.743,184,3.596,185,2.486,186,2.486,187,2.486,188,2.486,189,2.486,190,2.486,191,2.486,192,2.486,193,2.486,194,2.486,195,2.075,196,2.486,197,2.486,198,2.486,199,2.486,200,2.075,201,2.643,202,2.075,203,2.486]],["title/classes/Hello.html",[16,1.836,35,0.016]],["body/classes/Hello.html",[3,0.354,4,0.354,5,0.301,8,0.032,9,0.654,15,0.872,16,3.427,18,4.291,22,0.795,34,0.354,35,0.021,43,0.021,44,0.026,45,0.021,90,1.783,100,3.546,104,1.864,116,1.937,121,2.036,204,3.546,205,4.248]],["title/modules/HttpModule.html",[46,0.65,206,1.665]],["body/modules/HttpModule.html",[3,0.238,4,0.238,5,0.202,8,0.032,10,0.971,22,0.533,24,0.971,25,0.683,26,0.533,34,0.238,35,0.014,36,1.365,37,1.25,38,1.147,41,1.873,43,0.014,44,0.02,45,0.014,46,0.824,48,0.971,84,2.067,91,2.587,96,3.375,154,2.067,155,2.587,163,2.377,206,2.444,207,2.848,208,2.587,209,3.864,210,2.848,211,2.444,212,2.067,213,1.835,214,1.497,215,1.25,216,2.926,217,2.848,218,2.848,219,3.351,220,4.014,221,2.926,222,2.848,223,2.848,224,2.848,225,2.848,226,2.848,227,5.048,228,2.848,229,4.014,230,2.848,231,2.848,232,2.848,233,2.848,234,2.848,235,2.848,236,2.848,237,2.848,238,2.848,239,2.848,240,2.848,241,2.848,242,2.848,243,2.848,244,2.848,245,2.848,246,2.377,247,2.848,248,2.848,249,2.377,250,2.848]],["title/injectables/LoggerMiddleware.html",[80,2.042,87,1.08]],["body/injectables/LoggerMiddleware.html",[3,0.296,4,0.296,5,0.252,8,0.032,9,0.546,10,1.59,15,0.728,22,0.664,24,1.21,25,0.793,26,0.664,34,0.296,35,0.018,43,0.018,44,0.023,45,0.018,71,1.7,72,1.429,73,1.7,75,2.961,80,3.005,84,2.574,87,1.59,88,1.864,219,4.617,221,3.206,251,2.961,252,4.662,253,4.662,254,5.208,255,5.532,256,5.532,257,3.547,258,3.547,259,4.662,260,2.961,261,3.547,262,3.547,263,2.574,264,3.547,265,3.547]],["title/classes/Measurement.html",[35,0.016,266,1.665]],["body/classes/Measurement.html",[3,0.293,4,0.293,5,0.25,8,0.032,9,0.542,15,1.064,22,0.971,25,0.599,30,2.039,31,1.849,34,0.293,35,0.017,43,0.017,44,0.023,45,0.017,90,1.582,95,3.344,104,1.544,111,3.093,121,2.486,201,2.554,266,2.438,267,2.937,268,4.003,269,4.003,270,3.344,271,3.518,272,3.518,273,3.518,274,3.518,275,2.937,276,2.937,277,3.518,278,3.518,279,2.554,280,3.518,281,3.518]],["title/classes/Meteo.html",[20,0.995,35,0.016]],["body/classes/Meteo.html",[3,0.265,4,0.265,5,0.225,8,0.032,9,0.489,15,1.136,20,1.547,22,1.037,34,0.265,35,0.016,43,0.016,44,0.021,45,0.016,90,1.477,95,2.047,104,1.394,111,3.003,115,2.047,116,1.96,121,2.654,138,4.416,139,4.416,155,3.41,156,3.143,184,4.112,195,2.651,201,2.305,202,2.651,270,3.175,275,2.651,276,2.651,279,2.305,282,2.651,283,3.176,284,3.176,285,3.176,286,3.176,287,3.176,288,3.176,289,3.176,290,2.651,291,3.176,292,3.176]],["title/controllers/MeteoController.html",[0,1.276,293,2.042]],["body/controllers/MeteoController.html",[0,0.776,2,0.776,3,0.161,4,0.161,5,0.137,7,1.242,8,0.032,9,0.297,10,1.024,12,2.685,13,3.477,14,3.75,15,1.152,17,3.421,20,1.418,22,0.78,24,1.421,25,0.85,26,0.361,29,3.278,30,1.117,31,1.012,34,0.161,35,0.01,36,0.923,37,0.845,38,0.776,39,3.024,41,1.678,43,0.01,44,0.015,45,0.01,71,1.997,72,1.927,73,1.997,103,3.086,116,2.081,130,2.373,180,2.138,216,2.138,293,1.935,294,1.608,295,2.692,296,3.002,297,2.506,298,3.002,299,2.179,300,1.926,301,4.783,302,1.926,303,1.926,304,2.715,305,1.926,306,1.926,307,1.926,308,1.926,309,3.002,310,3.002,311,1.926,312,1.926,313,1.926,314,1.926,315,1.926,316,1.608,317,1.608,318,1.608,319,2.179,320,1.608,321,1.608,322,1.608,323,1.608,324,1.939,325,1.608,326,1.926,327,1.117,328,1.117,329,1.398,330,1.926,331,1.926,332,1.926,333,4.165,334,1.926,335,1.926,336,3.689,337,2.138,338,1.926,339,1.926,340,1.926,341,1.926,342,1.926,343,1.926,344,1.926]],["title/modules/MeteoHttpModule.html",[46,0.65,345,1.836]],["body/modules/MeteoHttpModule.html",[3,0.303,4,0.303,5,0.258,8,0.032,25,0.897,26,0.68,34,0.303,35,0.018,43,0.018,44,0.023,45,0.018,46,0.972,48,1.239,54,1.595,66,2.271,91,2.343,206,2.77,209,2.638,211,1.91,212,3.439,213,3.397,214,2.935,215,1.595,263,2.638,295,1.742,327,2.107,328,2.107,345,2.746,346,3.034,347,3.034,348,1.91,349,3.034,350,3.034,351,3.634,352,3.034,353,3.034,354,3.034,355,2.638,356,3.034,357,3.034]],["title/modules/MeteoModule.html",[46,0.65,58,1.836]],["body/modules/MeteoModule.html",[2,1.816,3,0.281,4,0.281,5,0.239,8,0.032,25,0.962,26,0.631,34,0.281,35,0.017,43,0.017,44,0.022,45,0.017,46,1.042,48,1.149,49,1.615,50,1.954,51,1.954,52,1.615,53,2.943,54,1.479,58,3.578,59,2.551,62,2.613,63,1.615,64,1.954,66,2.16,293,3.273,324,3.056,325,2.813,345,3.37,346,2.813,348,1.772,358,2.813,359,2.813,360,2.813,361,3.37,362,2.446,363,3.37]],["title/injectables/MeteoService.html",[87,1.08,324,1.665]],["body/injectables/MeteoService.html",[3,0.171,4,0.171,5,0.146,8,0.032,9,0.316,10,1.075,15,0.954,20,0.644,22,0.87,24,1.469,25,0.835,26,0.384,34,0.171,35,0.01,36,1.511,37,1.383,38,1.27,41,1.735,43,0.01,44,0.016,45,0.01,71,2.228,72,1.873,73,2.228,87,1.075,88,1.079,103,1.657,108,2.475,116,2.112,130,1.079,180,1.189,208,3.675,211,2.579,214,2.686,215,0.9,216,3.057,221,2.497,249,4.096,295,2.733,297,2.632,299,2.288,304,2.772,320,1.713,321,1.713,322,1.713,323,1.713,324,1.657,337,2.497,364,1.713,365,3.153,366,3.153,367,1.489,368,2.052,369,3.153,370,2.052,371,3.153,372,2.052,373,3.153,374,2.052,375,3.153,376,2.052,377,3.596,378,2.052,379,3.596,380,3.127,381,2.052,382,2.052,383,3.839,384,3.153,385,2.052,386,2.052,387,3.153,388,3.153]],["title/classes/MeteoStats.html",[35,0.016,389,1.836]],["body/classes/MeteoStats.html",[3,0.32,4,0.32,5,0.273,8,0.032,9,0.591,15,1.007,20,1.206,22,0.919,25,0.654,34,0.32,35,0.019,43,0.019,44,0.024,45,0.019,90,1.674,104,1.685,111,2.58,121,1.841,266,3.22,268,2.788,269,2.788,270,2.475,389,2.845,390,4.516,391,3.206,392,5.41,393,3.84,394,3.84,395,3.84,396,3.84,397,3.84]],["title/modules/SharedModule.html",[46,0.65,59,1.39]],["body/modules/SharedModule.html",[3,0.349,4,0.349,5,0.297,8,0.032,25,0.958,26,0.784,34,0.349,35,0.021,43,0.021,44,0.026,45,0.021,46,1.064,48,1.428,54,1.837,59,2.274,66,2.007,213,3.341,215,1.837,348,2.201,398,4.187,399,2.007,400,2.699,401,4.187]],["title/controllers/StationController.html",[0,1.276,402,2.042]],["body/controllers/StationController.html",[0,0.85,2,0.85,3,0.176,4,0.176,5,0.15,7,1.361,8,0.032,9,0.325,10,1.099,12,3.199,14,2.339,15,0.897,17,2.518,20,1.373,22,0.929,24,1.692,25,0.801,26,0.395,29,2.339,30,1.224,31,1.11,34,0.176,35,0.01,38,0.85,39,1.532,41,1.999,43,0.01,44,0.016,45,0.01,63,2.096,71,1.544,72,1.574,73,1.544,102,1.532,116,1.839,266,2.475,268,2.339,269,2.339,270,2.077,295,2.901,304,3.016,316,1.762,317,1.762,318,1.762,319,2.339,327,1.224,328,1.224,329,1.532,337,2.877,402,2.077,403,1.762,404,3.65,405,3.65,406,3.222,407,2.689,408,3.222,409,2.111,410,3.222,411,2.111,412,2.111,413,3.222,414,2.111,415,3.93,416,2.111,417,2.111,418,3.222,419,2.111,420,2.111,421,2.534,422,3.222,423,2.111,424,2.689,425,2.111,426,1.762,427,1.762,428,1.762,429,2.054,430,1.762,431,2.111,432,2.111,433,2.111,434,2.111,435,2.111,436,2.111,437,2.111,438,2.111,439,2.111,440,2.111,441,2.111,442,2.111,443,2.111]],["title/modules/StationHttpModule.html",[46,0.65,399,1.518]],["body/modules/StationHttpModule.html",[3,0.303,4,0.303,5,0.258,8,0.032,25,0.897,26,0.68,34,0.303,35,0.018,43,0.018,44,0.023,45,0.018,46,0.972,48,1.239,54,1.595,66,2.271,91,2.343,206,2.77,209,2.638,211,1.91,212,3.439,213,3.397,214,2.935,215,1.595,263,2.638,295,1.742,327,2.107,328,2.107,347,3.034,348,1.91,349,3.034,350,3.034,352,3.034,353,3.034,354,3.034,355,2.638,356,3.034,357,3.034,399,2.271,400,2.343,444,3.634]],["title/modules/StationModule.html",[46,0.65,60,1.836]],["body/modules/StationModule.html",[2,1.816,3,0.281,4,0.281,5,0.239,8,0.032,25,0.962,26,0.631,34,0.281,35,0.017,43,0.017,44,0.022,45,0.017,46,1.042,48,1.149,49,1.615,50,1.954,51,1.954,52,1.615,53,2.943,54,1.479,59,2.551,60,3.578,62,2.613,63,1.615,64,1.954,66,2.16,348,1.772,362,2.446,399,2.787,400,2.172,402,3.273,429,3.056,430,2.813,445,2.813,446,2.813,447,2.813,448,3.37,449,3.37]],["title/injectables/StationService.html",[87,1.08,429,1.665]],["body/injectables/StationService.html",[3,0.137,4,0.137,5,0.117,8,0.032,9,0.253,10,0.902,15,1.035,22,1.026,24,1.665,25,0.648,26,0.308,34,0.137,35,0.008,36,1.268,37,2.579,38,1.066,41,1.891,43,0.008,44,0.013,45,0.008,63,1.826,71,2.002,72,1.683,73,2.002,87,0.902,88,0.863,90,0.902,116,2.177,208,3.732,211,2.346,214,2.468,215,0.721,216,2.421,221,2.421,266,0.863,295,2.836,299,2.765,304,2.988,337,2.588,367,1.192,380,3.032,404,3.18,405,3.18,407,2.209,415,2.209,421,3,424,3.18,426,1.371,427,1.371,428,1.371,429,1.391,450,1.371,451,3.323,452,3.323,453,3.323,454,2.774,455,2.646,456,2.646,457,2.646,458,2.646,459,1.643,460,1.643,461,2.646,462,1.643,463,1.643,464,2.646,465,1.643,466,1.643,467,1.643,468,2.646,469,1.643,470,1.643,471,2.646,472,1.643,473,1.643,474,1.643,475,1.643,476,1.371,477,1.371,478,1.643,479,1.643,480,1.643,481,1.643,482,1.643,483,1.643,484,1.643,485,1.643,486,1.643,487,1.643,488,1.643,489,1.643,490,1.643,491,1.643,492,1.643,493,1.643,494,1.643]],["title/controllers/StatsController.html",[0,1.276,495,2.042]],["body/controllers/StatsController.html",[0,1.358,2,1.358,3,0.281,4,0.281,5,0.239,7,2.172,8,0.032,9,0.519,10,1.537,12,2.905,17,2.172,22,0.844,24,1.537,25,0.923,26,0.631,30,1.954,31,1.772,34,0.281,35,0.017,36,1.615,37,1.479,38,1.358,41,1.816,43,0.017,44,0.022,45,0.017,72,1.358,304,2.849,319,3.272,327,1.954,328,1.954,329,2.446,389,1.954,495,2.905,496,2.813,497,3.37,498,5.421,499,5.421,500,4.507,501,3.37,502,4.507,503,3.37,504,2.813,505,2.813,506,2.669,507,2.813,508,3.37,509,3.37,510,3.37,511,3.37]],["title/modules/StatsModule.html",[46,0.65,61,1.836]],["body/modules/StatsModule.html",[2,1.816,3,0.281,4,0.281,5,0.239,8,0.032,25,0.962,26,0.631,34,0.281,35,0.017,43,0.017,44,0.022,45,0.017,46,1.042,48,1.149,49,1.615,50,1.954,51,1.954,52,1.615,53,2.943,54,1.479,59,2.551,61,3.578,62,2.613,63,1.615,64,1.954,66,2.16,348,1.772,362,2.446,399,2.787,400,2.172,495,3.273,506,3.056,507,2.813,512,2.813,513,2.813,514,3.37,515,3.37,516,3.37]],["title/injectables/StatsService.html",[87,1.08,506,1.665]],["body/injectables/StatsService.html",[3,0.199,4,0.199,5,0.17,8,0.032,9,0.368,10,1.207,15,1.02,22,1.008,24,1.207,25,0.717,26,0.448,34,0.199,35,0.012,36,1.696,37,2.637,38,2.421,41,1.426,43,0.012,44,0.017,45,0.012,71,1.146,72,0.963,73,1.146,87,1.207,88,1.257,90,1.207,116,2.047,208,3.353,211,2.734,214,2.829,215,1.05,216,2.698,221,2.051,295,2.493,304,2.447,337,2.051,367,1.736,377,2.954,379,2.954,380,2.569,389,1.386,454,3.516,476,2.954,477,1.996,504,1.996,505,1.996,506,1.86,517,1.996,518,4.212,519,4.212,520,4.212,521,4.655,522,4.655,523,3.539,524,2.392,525,2.392,526,2.392,527,2.392,528,2.392,529,2.392,530,2.392,531,2.392,532,2.392,533,2.392,534,2.392,535,2.392,536,2.392]],["title/interfaces/SwitchState.html",[421,1.836,537,2.042]],["body/interfaces/SwitchState.html",[3,0.37,4,0.37,5,0.315,8,0.031,9,0.684,15,0.911,34,0.37,43,0.022,44,0.027,45,0.022,90,1.832,421,3.114,537,2.862,538,4.44,539,3.706,540,3.706,541,6.003]],["title/coverage.html",[542,3.607]],["body/coverage.html",[0,2.063,1,1.897,5,0.209,6,2.456,8,0.032,15,0.604,16,1.706,20,0.924,27,1.547,35,0.028,43,0.015,44,0.02,45,0.015,52,1.41,80,1.897,87,1.837,89,2.456,96,2.136,103,1.547,105,2.456,130,1.547,131,2.456,153,4.562,180,1.706,181,2.456,204,2.456,251,2.456,266,1.547,267,2.456,279,2.136,282,2.456,293,1.897,294,2.456,324,1.547,364,2.456,389,1.706,390,2.456,391,2.456,402,1.897,403,2.456,421,1.706,429,1.547,450,2.456,495,1.897,496,2.456,506,1.547,517,2.456,537,1.897,539,2.456,540,2.456,542,2.456,543,2.943,544,2.943,545,2.943,546,5.122,547,2.943,548,2.943,549,2.982,550,2.943,551,4.108,552,2.943,553,2.456,554,2.943,555,4.108,556,2.943,557,2.943,558,2.943,559,2.943,560,2.943,561,2.943,562,2.943,563,4.108,564,2.943,565,2.943,566,2.943]],["title/dependencies.html",[49,1.826,567,2.645]],["body/dependencies.html",[8,0.032,26,0.777,31,2.18,43,0.02,44,0.025,45,0.02,49,1.988,215,1.82,260,4.301,568,5.605,569,4.148,570,4.148,571,4.148,572,4.148,573,4.148,574,4.148,575,3.462,576,4.148,577,4.148,578,4.148,579,4.148,580,4.148,581,4.148,582,4.148,583,4.148,584,4.148,585,4.148,586,4.148]],["title/miscellaneous/functions.html",[587,1.705,588,3.18]],["body/miscellaneous/functions.html",[8,0.028,9,0.744,43,0.024,44,0.028,45,0.024,52,2.869,549,3.506,587,3.113,588,4.031,589,4.031]],["title/index.html",[9,0.407,590,2.645,591,2.645]],["body/index.html",[8,0.027,20,1.423,43,0.022,44,0.027,45,0.022,102,3.289,206,2.382,246,3.783,575,3.783,592,4.532,593,4.532,594,4.532,595,4.532,596,4.532,597,4.532,598,4.532,599,4.532,600,4.532,601,4.532,602,4.532,603,4.532,604,4.532,605,4.532,606,4.532]],["title/modules.html",[48,1.474]],["body/modules.html",[8,0.026,43,0.021,44,0.026,45,0.021,47,2.686,48,1.421,58,2.416,59,1.829,60,2.416,61,2.416,206,2.19,345,2.416,399,1.997,607,5.873,608,5.873,609,5.873,610,6.303,611,5.873,612,5.873]],["title/overview.html",[613,3.607]],["body/overview.html",[2,1.244,8,0.031,27,2.551,43,0.015,44,0.021,45,0.015,46,0.633,47,3.984,48,1.053,49,1.48,50,1.789,51,1.789,52,1.48,53,1.789,54,1.355,55,2.577,56,2.577,57,2.577,58,3.477,59,2.486,60,3.477,61,3.477,62,2.461,63,1.48,64,1.789,88,1.623,104,1.355,200,2.577,290,2.577,324,2.551,345,2.814,355,2.241,358,2.577,359,2.577,360,2.577,399,2.506,429,2.551,445,2.577,446,2.577,447,2.577,506,2.551,512,2.577,513,2.577,537,1.99,613,2.577,614,3.087,615,3.087]],["title/miscellaneous/variables.html",[587,1.705,616,3.18]],["body/miscellaneous/variables.html",[8,0.03,9,0.724,43,0.023,44,0.027,45,0.023,94,3.924,95,3.03,549,3.412,553,4.64,587,3.03,589,3.924,616,3.924,617,4.701,618,4.701]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/City.html":{},"classes/Ephemeride.html":{},"classes/Forecast.html":{},"classes/Hello.html":{},"modules/HttpModule.html":{},"injectables/LoggerMiddleware.html":{},"classes/Measurement.html":{},"classes/Meteo.html":{},"controllers/MeteoController.html":{},"modules/MeteoHttpModule.html":{},"modules/MeteoModule.html":{},"injectables/MeteoService.html":{},"classes/MeteoStats.html":{},"modules/SharedModule.html":{},"controllers/StationController.html":{},"modules/StationHttpModule.html":{},"modules/StationModule.html":{},"injectables/StationService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"interfaces/SwitchState.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":153,"title":{},"body":{"classes/Ephemeride.html":{},"classes/Forecast.html":{},"coverage.html":{}}}],["0.1.13",{"_index":579,"title":{},"body":{"dependencies.html":{}}}],["0.6.3",{"_index":569,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":551,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":558,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":562,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":546,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":563,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":560,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":554,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":555,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":561,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":564,"title":{},"body":{"coverage.html":{}}}],["02",{"_index":158,"title":{},"body":{"classes/Ephemeride.html":{},"classes/Forecast.html":{}}}],["06:00",{"_index":291,"title":{},"body":{"classes/Meteo.html":{}}}],["07t00:00:00+0100",{"_index":159,"title":{},"body":{"classes/Ephemeride.html":{},"classes/Forecast.html":{}}}],["08:23",{"_index":161,"title":{},"body":{"classes/Ephemeride.html":{}}}],["09:54",{"_index":164,"title":{},"body":{"classes/Ephemeride.html":{}}}],["1",{"_index":290,"title":{},"body":{"classes/Meteo.html":{},"overview.html":{}}}],["1.10.0",{"_index":576,"title":{},"body":{"dependencies.html":{}}}],["1.6819",{"_index":152,"title":{},"body":{"classes/Ephemeride.html":{}}}],["11",{"_index":202,"title":{},"body":{"classes/Forecast.html":{},"classes/Meteo.html":{}}}],["17",{"_index":203,"title":{},"body":{"classes/Forecast.html":{}}}],["18",{"_index":289,"title":{},"body":{"classes/Meteo.html":{}}}],["18:17",{"_index":162,"title":{},"body":{"classes/Ephemeride.html":{}}}],["2.3941",{"_index":128,"title":{},"body":{"classes/City.html":{}}}],["2/10",{"_index":559,"title":{},"body":{"coverage.html":{}}}],["2/3",{"_index":548,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":279,"title":{},"body":{"classes/Measurement.html":{},"classes/Meteo.html":{},"coverage.html":{}}}],["20.05",{"_index":277,"title":{},"body":{"classes/Measurement.html":{}}}],["200",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"controllers/MeteoController.html":{},"controllers/StationController.html":{}}}],["2020",{"_index":288,"title":{},"body":{"classes/Meteo.html":{}}}],["2021",{"_index":157,"title":{},"body":{"classes/Ephemeride.html":{},"classes/Forecast.html":{}}}],["2156464561231",{"_index":397,"title":{},"body":{"classes/MeteoStats.html":{}}}],["21:00",{"_index":292,"title":{},"body":{"classes/Meteo.html":{}}}],["25.4",{"_index":174,"title":{},"body":{"classes/Ephemeride.html":{}}}],["3",{"_index":170,"title":{},"body":{"classes/Ephemeride.html":{}}}],["3.0.2",{"_index":581,"title":{},"body":{"dependencies.html":{}}}],["35.50",{"_index":281,"title":{},"body":{"classes/Measurement.html":{}}}],["4",{"_index":200,"title":{},"body":{"classes/Forecast.html":{},"overview.html":{}}}],["4.1.6",{"_index":586,"title":{},"body":{"dependencies.html":{}}}],["4.4.1",{"_index":574,"title":{},"body":{"dependencies.html":{}}}],["4.7.12",{"_index":572,"title":{},"body":{"dependencies.html":{}}}],["48.112",{"_index":151,"title":{},"body":{"classes/Ephemeride.html":{},"classes/Forecast.html":{}}}],["48.7883",{"_index":127,"title":{},"body":{"classes/City.html":{}}}],["5",{"_index":355,"title":{},"body":{"modules/MeteoHttpModule.html":{},"modules/StationHttpModule.html":{},"overview.html":{}}}],["56",{"_index":129,"title":{},"body":{"classes/City.html":{}}}],["6.6.3",{"_index":583,"title":{},"body":{"dependencies.html":{}}}],["6/7",{"_index":557,"title":{},"body":{"coverage.html":{}}}],["66",{"_index":547,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":615,"title":{},"body":{"overview.html":{}}}],["7.5.1",{"_index":568,"title":{},"body":{"dependencies.html":{}}}],["7000",{"_index":353,"title":{},"body":{"modules/MeteoHttpModule.html":{},"modules/StationHttpModule.html":{}}}],["8",{"_index":614,"title":{},"body":{"overview.html":{}}}],["80",{"_index":618,"title":{},"body":{"miscellaneous/variables.html":{}}}],["85",{"_index":556,"title":{},"body":{"coverage.html":{}}}],["94081",{"_index":125,"title":{},"body":{"classes/City.html":{},"classes/Ephemeride.html":{},"classes/Forecast.html":{}}}],["94400",{"_index":126,"title":{},"body":{"classes/City.html":{},"classes/Forecast.html":{}}}],["according",{"_index":310,"title":{},"body":{"controllers/MeteoController.html":{}}}],["actual",{"_index":301,"title":{},"body":{"controllers/MeteoController.html":{}}}],["add",{"_index":218,"title":{},"body":{"modules/HttpModule.html":{}}}],["age",{"_index":173,"title":{},"body":{"classes/Ephemeride.html":{}}}],["altitude",{"_index":106,"title":{},"body":{"classes/City.html":{}}}],["api",{"_index":40,"title":{},"body":{"controllers/AppController.html":{}}}],["api'})@get",{"_index":21,"title":{},"body":{"controllers/AppController.html":{}}}],["apiheader",{"_index":319,"title":{},"body":{"controllers/MeteoController.html":{},"controllers/StationController.html":{},"controllers/StatsController.html":{}}}],["apiproperty",{"_index":274,"title":{},"body":{"classes/Measurement.html":{}}}],["apiresponse",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"controllers/MeteoController.html":{},"controllers/StationController.html":{}}}],["apiresponse({status",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"controllers/MeteoController.html":{}}}],["apitags",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"classes/Measurement.html":{},"controllers/MeteoController.html":{},"controllers/StationController.html":{},"controllers/StatsController.html":{}}}],["apitags('hello",{"_index":33,"title":{},"body":{"controllers/AppController.html":{}}}],["apitags('meteo",{"_index":326,"title":{},"body":{"controllers/MeteoController.html":{}}}],["apitags('station",{"_index":431,"title":{},"body":{"controllers/StationController.html":{}}}],["apitags('stats",{"_index":508,"title":{},"body":{"controllers/StatsController.html":{}}}],["app.controller",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["apply(loggermiddleware",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["appmodule",{"_index":47,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":27,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["async",{"_index":295,"title":{},"body":{"controllers/MeteoController.html":{},"modules/MeteoHttpModule.html":{},"injectables/MeteoService.html":{},"controllers/StationController.html":{},"modules/StationHttpModule.html":{},"injectables/StationService.html":{},"injectables/StatsService.html":{}}}],["authorization",{"_index":327,"title":{},"body":{"controllers/MeteoController.html":{},"modules/MeteoHttpModule.html":{},"controllers/StationController.html":{},"modules/StationHttpModule.html":{},"controllers/StatsController.html":{}}}],["available",{"_index":612,"title":{},"body":{"modules.html":{}}}],["await",{"_index":337,"title":{},"body":{"controllers/MeteoController.html":{},"injectables/MeteoService.html":{},"controllers/StationController.html":{},"injectables/StationService.html":{},"injectables/StatsService.html":{}}}],["axios",{"_index":224,"title":{},"body":{"modules/HttpModule.html":{}}}],["axios.interceptors.request.use((config",{"_index":226,"title":{},"body":{"modules/HttpModule.html":{}}}],["axios.interceptors.response.use",{"_index":230,"title":{},"body":{"modules/HttpModule.html":{}}}],["back",{"_index":592,"title":{},"body":{"index.html":{}}}],["basehttpmodule",{"_index":212,"title":{},"body":{"modules/HttpModule.html":{},"modules/MeteoHttpModule.html":{},"modules/StationHttpModule.html":{}}}],["basehttpmodule.registerasync",{"_index":349,"title":{},"body":{"modules/MeteoHttpModule.html":{},"modules/StationHttpModule.html":{}}}],["bearer",{"_index":328,"title":{},"body":{"controllers/MeteoController.html":{},"modules/MeteoHttpModule.html":{},"controllers/StationController.html":{},"modules/StationHttpModule.html":{},"controllers/StatsController.html":{}}}],["before",{"_index":168,"title":{},"body":{"classes/Ephemeride.html":{}}}],["body",{"_index":316,"title":{},"body":{"controllers/MeteoController.html":{},"controllers/StationController.html":{}}}],["bootstrap",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/MeteoModule.html":{},"modules/StationModule.html":{},"modules/StatsModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":610,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":607,"title":{},"body":{"modules.html":{}}}],["bucketdaily",{"_index":518,"title":{},"body":{"injectables/StatsService.html":{}}}],["bucketh24",{"_index":519,"title":{},"body":{"injectables/StatsService.html":{}}}],["c",{"_index":201,"title":{},"body":{"classes/Forecast.html":{},"classes/Measurement.html":{},"classes/Meteo.html":{}}}],["cf",{"_index":196,"title":{},"body":{"classes/Forecast.html":{}}}],["city",{"_index":103,"title":{"classes/City.html":{}},"body":{"classes/City.html":{},"classes/Ephemeride.html":{},"controllers/MeteoController.html":{},"injectables/MeteoService.html":{},"coverage.html":{}}}],["citydetail",{"_index":336,"title":{},"body":{"controllers/MeteoController.html":{}}}],["class",{"_index":35,"title":{"classes/City.html":{},"classes/Ephemeride.html":{},"classes/Forecast.html":{},"classes/Hello.html":{},"classes/Measurement.html":{},"classes/Meteo.html":{},"classes/MeteoStats.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/City.html":{},"classes/Ephemeride.html":{},"classes/Forecast.html":{},"classes/Hello.html":{},"modules/HttpModule.html":{},"injectables/LoggerMiddleware.html":{},"classes/Measurement.html":{},"classes/Meteo.html":{},"controllers/MeteoController.html":{},"modules/MeteoHttpModule.html":{},"modules/MeteoModule.html":{},"injectables/MeteoService.html":{},"classes/MeteoStats.html":{},"modules/SharedModule.html":{},"controllers/StationController.html":{},"modules/StationHttpModule.html":{},"modules/StationModule.html":{},"injectables/StationService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"coverage.html":{}}}],["classes",{"_index":104,"title":{},"body":{"classes/City.html":{},"classes/Ephemeride.html":{},"classes/Forecast.html":{},"classes/Hello.html":{},"classes/Measurement.html":{},"classes/Meteo.html":{},"classes/MeteoStats.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_meteomodule",{"_index":358,"title":{},"body":{"modules/MeteoModule.html":{},"overview.html":{}}}],["cluster_meteomodule_imports",{"_index":360,"title":{},"body":{"modules/MeteoModule.html":{},"overview.html":{}}}],["cluster_meteomodule_providers",{"_index":359,"title":{},"body":{"modules/MeteoModule.html":{},"overview.html":{}}}],["cluster_stationmodule",{"_index":445,"title":{},"body":{"modules/StationModule.html":{},"overview.html":{}}}],["cluster_stationmodule_imports",{"_index":446,"title":{},"body":{"modules/StationModule.html":{},"overview.html":{}}}],["cluster_stationmodule_providers",{"_index":447,"title":{},"body":{"modules/StationModule.html":{},"overview.html":{}}}],["cluster_statsmodule",{"_index":512,"title":{},"body":{"modules/StatsModule.html":{},"overview.html":{}}}],["cluster_statsmodule_imports",{"_index":514,"title":{},"body":{"modules/StatsModule.html":{}}}],["cluster_statsmodule_providers",{"_index":513,"title":{},"body":{"modules/StatsModule.html":{},"overview.html":{}}}],["code",{"_index":115,"title":{},"body":{"classes/City.html":{},"classes/Ephemeride.html":{},"classes/Forecast.html":{},"classes/Meteo.html":{}}}],["compared",{"_index":167,"title":{},"body":{"classes/Ephemeride.html":{}}}],["concept.com/documentation#code",{"_index":198,"title":{},"body":{"classes/Forecast.html":{}}}],["config",{"_index":229,"title":{},"body":{"modules/HttpModule.html":{}}}],["config.method.touppercase",{"_index":235,"title":{},"body":{"modules/HttpModule.html":{}}}],["config.url",{"_index":236,"title":{},"body":{"modules/HttpModule.html":{}}}],["config['metadata",{"_index":227,"title":{},"body":{"modules/HttpModule.html":{}}}],["config['metadata'].enddate.gettime",{"_index":232,"title":{},"body":{"modules/HttpModule.html":{}}}],["config['metadata'].startdate.gettime",{"_index":233,"title":{},"body":{"modules/HttpModule.html":{}}}],["configmodule",{"_index":213,"title":{},"body":{"modules/HttpModule.html":{},"modules/MeteoHttpModule.html":{},"modules/SharedModule.html":{},"modules/StationHttpModule.html":{}}}],["configmodule.forroot",{"_index":401,"title":{},"body":{"modules/SharedModule.html":{}}}],["configservice",{"_index":214,"title":{},"body":{"modules/HttpModule.html":{},"modules/MeteoHttpModule.html":{},"injectables/MeteoService.html":{},"modules/StationHttpModule.html":{},"injectables/StationService.html":{},"injectables/StatsService.html":{}}}],["configservice.get('meteo_api_bearer",{"_index":351,"title":{},"body":{"modules/MeteoHttpModule.html":{}}}],["configservice.get('thinger_io_api_bearer",{"_index":444,"title":{},"body":{"modules/StationHttpModule.html":{}}}],["configure",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["configure(consumer",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["connected",{"_index":101,"title":{},"body":{"injectables/AppService.html":{}}}],["console.log(req.method",{"_index":261,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["console.log(url",{"_index":386,"title":{},"body":{"injectables/MeteoService.html":{}}}],["const",{"_index":216,"title":{},"body":{"modules/HttpModule.html":{},"controllers/MeteoController.html":{},"injectables/MeteoService.html":{},"injectables/StationService.html":{},"injectables/StatsService.html":{}}}],["constructor",{"_index":36,"title":{},"body":{"controllers/AppController.html":{},"modules/HttpModule.html":{},"controllers/MeteoController.html":{},"injectables/MeteoService.html":{},"injectables/StationService.html":{},"controllers/StatsController.html":{},"injectables/StatsService.html":{}}}],["constructor(httpservice",{"_index":367,"title":{},"body":{"injectables/MeteoService.html":{},"injectables/StationService.html":{},"injectables/StatsService.html":{}}}],["constructor(private",{"_index":433,"title":{},"body":{"controllers/StationController.html":{}}}],["consumer",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/MeteoController.html":{},"controllers/StationController.html":{},"controllers/StatsController.html":{}},"body":{"controllers/AppController.html":{},"controllers/MeteoController.html":{},"controllers/StationController.html":{},"controllers/StatsController.html":{},"coverage.html":{}}}],["controller('meteo",{"_index":330,"title":{},"body":{"controllers/MeteoController.html":{}}}],["controller('station",{"_index":432,"title":{},"body":{"controllers/StationController.html":{}}}],["controller('station/stats",{"_index":509,"title":{},"body":{"controllers/StatsController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/MeteoController.html":{},"modules/MeteoModule.html":{},"controllers/StationController.html":{},"modules/StationModule.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"overview.html":{}}}],["coverage",{"_index":542,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["cp",{"_index":107,"title":{},"body":{"classes/City.html":{},"classes/Forecast.html":{}}}],["croissant",{"_index":179,"title":{},"body":{"classes/Ephemeride.html":{}}}],["date",{"_index":155,"title":{},"body":{"classes/Ephemeride.html":{},"classes/Forecast.html":{},"modules/HttpModule.html":{},"classes/Meteo.html":{}}}],["datetime",{"_index":132,"title":{},"body":{"classes/Ephemeride.html":{},"classes/Forecast.html":{}}}],["day",{"_index":133,"title":{},"body":{"classes/Ephemeride.html":{},"classes/Forecast.html":{}}}],["declarations",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"modules/MeteoModule.html":{},"modules/StationModule.html":{},"modules/StatsModule.html":{},"overview.html":{}}}],["decorators",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"controllers/MeteoController.html":{},"controllers/StationController.html":{},"controllers/StatsController.html":{}}}],["defalt",{"_index":99,"title":{},"body":{"injectables/AppService.html":{}}}],["default",{"_index":94,"title":{},"body":{"injectables/AppService.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/City.html":{},"classes/Ephemeride.html":{},"classes/Forecast.html":{},"classes/Hello.html":{},"modules/HttpModule.html":{},"injectables/LoggerMiddleware.html":{},"classes/Measurement.html":{},"classes/Meteo.html":{},"controllers/MeteoController.html":{},"injectables/MeteoService.html":{},"classes/MeteoStats.html":{},"controllers/StationController.html":{},"injectables/StationService.html":{},"controllers/StatsController.html":{},"injectables/StatsService.html":{}}}],["dependencies",{"_index":49,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/MeteoModule.html":{},"modules/StationModule.html":{},"modules/StatsModule.html":{},"dependencies.html":{},"overview.html":{}}}],["dernier",{"_index":178,"title":{},"body":{"classes/Ephemeride.html":{}}}],["description",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"controllers/MeteoController.html":{},"controllers/StationController.html":{},"controllers/StatsController.html":{}}}],["deviceid",{"_index":451,"title":{},"body":{"injectables/StationService.html":{}}}],["devicesurl",{"_index":452,"title":{},"body":{"injectables/StationService.html":{}}}],["diff_duration_day",{"_index":134,"title":{},"body":{"classes/Ephemeride.html":{}}}],["diff_duration_day:number",{"_index":171,"title":{},"body":{"classes/Ephemeride.html":{}}}],["documentation",{"_index":543,"title":{},"body":{"coverage.html":{}}}],["documentations",{"_index":595,"title":{},"body":{"index.html":{}}}],["don't",{"_index":241,"title":{},"body":{"modules/HttpModule.html":{}}}],["duration",{"_index":163,"title":{},"body":{"classes/Ephemeride.html":{},"modules/HttpModule.html":{}}}],["duration_day",{"_index":135,"title":{},"body":{"classes/Ephemeride.html":{}}}],["duration}ms",{"_index":237,"title":{},"body":{"modules/HttpModule.html":{}}}],["end",{"_index":593,"title":{},"body":{"index.html":{}}}],["enddate",{"_index":231,"title":{},"body":{"modules/HttpModule.html":{}}}],["ephemeride",{"_index":130,"title":{"classes/Ephemeride.html":{}},"body":{"classes/Ephemeride.html":{},"classes/Forecast.html":{},"controllers/MeteoController.html":{},"injectables/MeteoService.html":{},"coverage.html":{}}}],["ephemeride'})@get('ephemeride/:city",{"_index":302,"title":{},"body":{"controllers/MeteoController.html":{}}}],["ephemeride'})@get('forecasts/:city",{"_index":306,"title":{},"body":{"controllers/MeteoController.html":{}}}],["err",{"_index":239,"title":{},"body":{"modules/HttpModule.html":{}}}],["example",{"_index":121,"title":{},"body":{"classes/City.html":{},"classes/Ephemeride.html":{},"classes/Forecast.html":{},"classes/Hello.html":{},"classes/Measurement.html":{},"classes/Meteo.html":{},"classes/MeteoStats.html":{}}}],["example/blob/master/src/http/http.module.ts",{"_index":606,"title":{},"body":{"index.html":{}}}],["export",{"_index":34,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/City.html":{},"classes/Ephemeride.html":{},"classes/Forecast.html":{},"classes/Hello.html":{},"modules/HttpModule.html":{},"injectables/LoggerMiddleware.html":{},"classes/Measurement.html":{},"classes/Meteo.html":{},"controllers/MeteoController.html":{},"modules/MeteoHttpModule.html":{},"modules/MeteoModule.html":{},"injectables/MeteoService.html":{},"classes/MeteoStats.html":{},"modules/SharedModule.html":{},"controllers/StationController.html":{},"modules/StationHttpModule.html":{},"modules/StationModule.html":{},"injectables/StationService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"interfaces/SwitchState.html":{}}}],["exports",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"modules/MeteoHttpModule.html":{},"modules/MeteoModule.html":{},"modules/SharedModule.html":{},"modules/StationHttpModule.html":{},"modules/StationModule.html":{},"modules/StatsModule.html":{},"overview.html":{}}}],["express",{"_index":260,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"dependencies.html":{}}}],["extends",{"_index":357,"title":{},"body":{"modules/MeteoHttpModule.html":{},"modules/StationHttpModule.html":{}}}],["failed",{"_index":245,"title":{},"body":{"modules/HttpModule.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/City.html":{},"classes/Ephemeride.html":{},"classes/Forecast.html":{},"classes/Hello.html":{},"modules/HttpModule.html":{},"injectables/LoggerMiddleware.html":{},"classes/Measurement.html":{},"classes/Meteo.html":{},"controllers/MeteoController.html":{},"modules/MeteoHttpModule.html":{},"modules/MeteoModule.html":{},"injectables/MeteoService.html":{},"classes/MeteoStats.html":{},"modules/SharedModule.html":{},"controllers/StationController.html":{},"modules/StationHttpModule.html":{},"modules/StationModule.html":{},"injectables/StationService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"interfaces/SwitchState.html":{},"coverage.html":{}}}],["first",{"_index":154,"title":{},"body":{"classes/Ephemeride.html":{},"classes/Forecast.html":{},"modules/HttpModule.html":{}}}],["forecast",{"_index":180,"title":{"classes/Forecast.html":{}},"body":{"classes/Forecast.html":{},"controllers/MeteoController.html":{},"injectables/MeteoService.html":{},"coverage.html":{}}}],["forget",{"_index":242,"title":{},"body":{"modules/HttpModule.html":{}}}],["forroutes",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["french",{"_index":177,"title":{},"body":{"classes/Ephemeride.html":{}}}],["function",{"_index":550,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":588,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["gain",{"_index":165,"title":{},"body":{"classes/Ephemeride.html":{}}}],["get(':city",{"_index":334,"title":{},"body":{"controllers/MeteoController.html":{}}}],["get('city/:city",{"_index":331,"title":{},"body":{"controllers/MeteoController.html":{}}}],["get('daily",{"_index":500,"title":{},"body":{"controllers/StatsController.html":{}}}],["get('device",{"_index":408,"title":{},"body":{"controllers/StationController.html":{}}}],["get('device/:ressource/state",{"_index":413,"title":{},"body":{"controllers/StationController.html":{}}}],["get('device/mesurement",{"_index":438,"title":{},"body":{"controllers/StationController.html":{}}}],["get('device/mesurement')@apiresponse({status",{"_index":416,"title":{},"body":{"controllers/StationController.html":{}}}],["get('devices",{"_index":410,"title":{},"body":{"controllers/StationController.html":{}}}],["get('ephemeride/:city",{"_index":339,"title":{},"body":{"controllers/MeteoController.html":{}}}],["get('forecasts/:city",{"_index":342,"title":{},"body":{"controllers/MeteoController.html":{}}}],["get('h24",{"_index":502,"title":{},"body":{"controllers/StatsController.html":{}}}],["getdevice",{"_index":404,"title":{},"body":{"controllers/StationController.html":{},"injectables/StationService.html":{}}}],["getdevices",{"_index":405,"title":{},"body":{"controllers/StationController.html":{},"injectables/StationService.html":{}}}],["getdevicestate",{"_index":455,"title":{},"body":{"injectables/StationService.html":{}}}],["getdevicestate(ressource",{"_index":461,"title":{},"body":{"injectables/StationService.html":{}}}],["getephemeride",{"_index":365,"title":{},"body":{"injectables/MeteoService.html":{}}}],["getephemeride(insee",{"_index":369,"title":{},"body":{"injectables/MeteoService.html":{}}}],["getephemride",{"_index":296,"title":{},"body":{"controllers/MeteoController.html":{}}}],["getephemride(@param('city",{"_index":340,"title":{},"body":{"controllers/MeteoController.html":{}}}],["getephemride(city",{"_index":300,"title":{},"body":{"controllers/MeteoController.html":{}}}],["getforecasts",{"_index":297,"title":{},"body":{"controllers/MeteoController.html":{},"injectables/MeteoService.html":{}}}],["getforecasts(@param('city",{"_index":343,"title":{},"body":{"controllers/MeteoController.html":{}}}],["getforecasts(city",{"_index":305,"title":{},"body":{"controllers/MeteoController.html":{}}}],["getforecasts(insee",{"_index":371,"title":{},"body":{"injectables/MeteoService.html":{}}}],["gethello",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["gethesterstate",{"_index":406,"title":{},"body":{"controllers/StationController.html":{}}}],["gethesterstate(@param('ressource",{"_index":436,"title":{},"body":{"controllers/StationController.html":{}}}],["gethesterstate(ressource",{"_index":412,"title":{},"body":{"controllers/StationController.html":{}}}],["getlacolisation",{"_index":298,"title":{},"body":{"controllers/MeteoController.html":{}}}],["getlacolisation(@param('city",{"_index":332,"title":{},"body":{"controllers/MeteoController.html":{}}}],["getlacolisation(city",{"_index":308,"title":{},"body":{"controllers/MeteoController.html":{}}}],["getmeteo",{"_index":299,"title":{},"body":{"controllers/MeteoController.html":{},"injectables/MeteoService.html":{},"injectables/StationService.html":{}}}],["getmeteo(@param('city",{"_index":335,"title":{},"body":{"controllers/MeteoController.html":{}}}],["getmeteo(city",{"_index":313,"title":{},"body":{"controllers/MeteoController.html":{}}}],["getmeteo(insee",{"_index":373,"title":{},"body":{"injectables/MeteoService.html":{}}}],["getmeteostatsdaily",{"_index":521,"title":{},"body":{"injectables/StatsService.html":{}}}],["getmeteostatsh24",{"_index":522,"title":{},"body":{"injectables/StatsService.html":{}}}],["getstate",{"_index":456,"title":{},"body":{"injectables/StationService.html":{}}}],["getstate(resource",{"_index":464,"title":{},"body":{"injectables/StationService.html":{}}}],["getstatsdaily",{"_index":498,"title":{},"body":{"controllers/StatsController.html":{}}}],["getstatsh24",{"_index":499,"title":{},"body":{"controllers/StatsController.html":{}}}],["getting",{"_index":590,"title":{"index.html":{}},"body":{}}],["graph",{"_index":611,"title":{},"body":{"modules.html":{}}}],["headers",{"_index":263,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"modules/MeteoHttpModule.html":{},"modules/StationHttpModule.html":{}}}],["hello",{"_index":16,"title":{"classes/Hello.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/Hello.html":{},"coverage.html":{}}}],["hello.entity",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["helmet",{"_index":573,"title":{},"body":{"dependencies.html":{}}}],["hour",{"_index":160,"title":{},"body":{"classes/Ephemeride.html":{}}}],["hpa",{"_index":278,"title":{},"body":{"classes/Measurement.html":{}}}],["http",{"_index":246,"title":{},"body":{"modules/HttpModule.html":{},"index.html":{}}}],["http.module",{"_index":348,"title":{},"body":{"modules/MeteoHttpModule.html":{},"modules/MeteoModule.html":{},"modules/SharedModule.html":{},"modules/StationHttpModule.html":{},"modules/StationModule.html":{},"modules/StatsModule.html":{}}}],["http.module.ts",{"_index":347,"title":{},"body":{"modules/MeteoHttpModule.html":{},"modules/StationHttpModule.html":{}}}],["httpmodule",{"_index":206,"title":{"modules/HttpModule.html":{}},"body":{"modules/HttpModule.html":{},"modules/MeteoHttpModule.html":{},"modules/StationHttpModule.html":{},"index.html":{},"modules.html":{}}}],["https://api.meteo",{"_index":197,"title":{},"body":{"classes/Forecast.html":{}}}],["https://docs.nestjs.com",{"_index":597,"title":{},"body":{"index.html":{}}}],["https://docs.nestjs.com/openapi/introduction",{"_index":599,"title":{},"body":{"index.html":{}}}],["https://github.com/paztek/nestjs",{"_index":604,"title":{},"body":{"index.html":{}}}],["https://www.npmjs.com/package/morgan",{"_index":600,"title":{},"body":{"index.html":{}}}],["httpservice",{"_index":211,"title":{},"body":{"modules/HttpModule.html":{},"modules/MeteoHttpModule.html":{},"injectables/MeteoService.html":{},"modules/StationHttpModule.html":{},"injectables/StationService.html":{},"injectables/StatsService.html":{}}}],["humidity",{"_index":268,"title":{},"body":{"classes/Measurement.html":{},"classes/MeteoStats.html":{},"controllers/StationController.html":{}}}],["identifier",{"_index":544,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"modules/HttpModule.html":{},"injectables/LoggerMiddleware.html":{}}}],["import",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/HttpModule.html":{},"injectables/LoggerMiddleware.html":{},"classes/Measurement.html":{},"controllers/MeteoController.html":{},"modules/MeteoHttpModule.html":{},"modules/MeteoModule.html":{},"injectables/MeteoService.html":{},"classes/MeteoStats.html":{},"modules/SharedModule.html":{},"controllers/StationController.html":{},"modules/StationHttpModule.html":{},"modules/StationModule.html":{},"injectables/StationService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{}}}],["imports",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"modules/MeteoHttpModule.html":{},"modules/MeteoModule.html":{},"modules/SharedModule.html":{},"modules/StationHttpModule.html":{},"modules/StationModule.html":{},"modules/StatsModule.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/City.html":{},"classes/Ephemeride.html":{},"classes/Forecast.html":{},"classes/Hello.html":{},"injectables/LoggerMiddleware.html":{},"classes/Measurement.html":{},"classes/Meteo.html":{},"controllers/MeteoController.html":{},"injectables/MeteoService.html":{},"classes/MeteoStats.html":{},"controllers/StationController.html":{},"injectables/StationService.html":{},"controllers/StatsController.html":{},"injectables/StatsService.html":{},"interfaces/SwitchState.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/City.html":{},"classes/Ephemeride.html":{},"classes/Forecast.html":{},"classes/Hello.html":{},"modules/HttpModule.html":{},"injectables/LoggerMiddleware.html":{},"classes/Measurement.html":{},"classes/Meteo.html":{},"controllers/MeteoController.html":{},"modules/MeteoHttpModule.html":{},"modules/MeteoModule.html":{},"injectables/MeteoService.html":{},"classes/MeteoStats.html":{},"modules/SharedModule.html":{},"controllers/StationController.html":{},"modules/StationHttpModule.html":{},"modules/StationModule.html":{},"injectables/StationService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"interfaces/SwitchState.html":{}}}],["infos",{"_index":223,"title":{},"body":{"modules/HttpModule.html":{}}}],["inject",{"_index":356,"title":{},"body":{"modules/MeteoHttpModule.html":{},"modules/StationHttpModule.html":{}}}],["injectable",{"_index":87,"title":{"injectables/AppService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/MeteoService.html":{},"injectables/StationService.html":{},"injectables/StatsService.html":{}},"body":{"injectables/AppService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/MeteoService.html":{},"injectables/StationService.html":{},"injectables/StatsService.html":{},"coverage.html":{}}}],["injectables",{"_index":88,"title":{},"body":{"injectables/AppService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/MeteoService.html":{},"injectables/StationService.html":{},"injectables/StatsService.html":{},"overview.html":{}}}],["insee",{"_index":108,"title":{},"body":{"classes/City.html":{},"classes/Ephemeride.html":{},"classes/Forecast.html":{},"injectables/MeteoService.html":{}}}],["interceptor",{"_index":220,"title":{},"body":{"modules/HttpModule.html":{}}}],["interface",{"_index":537,"title":{"interfaces/SwitchState.html":{}},"body":{"interfaces/SwitchState.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":538,"title":{},"body":{"interfaces/SwitchState.html":{}}}],["json.stringify(req.headers),'status",{"_index":264,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["json.stringify(response.data",{"_index":238,"title":{},"body":{"modules/HttpModule.html":{}}}],["latitude",{"_index":109,"title":{},"body":{"classes/City.html":{},"classes/Ephemeride.html":{},"classes/Forecast.html":{}}}],["legend",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/MeteoModule.html":{},"modules/StationModule.html":{},"modules/StatsModule.html":{},"overview.html":{}}}],["lib",{"_index":175,"title":{},"body":{"classes/Ephemeride.html":{}}}],["line",{"_index":243,"title":{},"body":{"modules/HttpModule.html":{}}}],["localisation",{"_index":309,"title":{},"body":{"controllers/MeteoController.html":{}}}],["localise",{"_index":366,"title":{},"body":{"injectables/MeteoService.html":{}}}],["localise(city",{"_index":375,"title":{},"body":{"injectables/MeteoService.html":{}}}],["log",{"_index":222,"title":{},"body":{"modules/HttpModule.html":{}}}],["logger",{"_index":91,"title":{},"body":{"injectables/AppService.html":{},"modules/HttpModule.html":{},"modules/MeteoHttpModule.html":{},"modules/StationHttpModule.html":{}}}],["logger('axios",{"_index":217,"title":{},"body":{"modules/HttpModule.html":{}}}],["logger(appservice.name",{"_index":97,"title":{},"body":{"injectables/AppService.html":{}}}],["logger.error(err",{"_index":240,"title":{},"body":{"modules/HttpModule.html":{}}}],["logger.log(`request",{"_index":234,"title":{},"body":{"modules/HttpModule.html":{}}}],["logger.middleware",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["loggermiddleware",{"_index":80,"title":{"injectables/LoggerMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/LoggerMiddleware.html":{},"coverage.html":{}}}],["longitudde",{"_index":194,"title":{},"body":{"classes/Forecast.html":{}}}],["longitude",{"_index":110,"title":{},"body":{"classes/City.html":{},"classes/Ephemeride.html":{},"classes/Forecast.html":{}}}],["loss",{"_index":166,"title":{},"body":{"classes/Ephemeride.html":{}}}],["makes",{"_index":244,"title":{},"body":{"modules/HttpModule.html":{}}}],["matching",{"_index":44,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/City.html":{},"classes/Ephemeride.html":{},"classes/Forecast.html":{},"classes/Hello.html":{},"modules/HttpModule.html":{},"injectables/LoggerMiddleware.html":{},"classes/Measurement.html":{},"classes/Meteo.html":{},"controllers/MeteoController.html":{},"modules/MeteoHttpModule.html":{},"modules/MeteoModule.html":{},"injectables/MeteoService.html":{},"classes/MeteoStats.html":{},"modules/SharedModule.html":{},"controllers/StationController.html":{},"modules/StationHttpModule.html":{},"modules/StationModule.html":{},"injectables/StationService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"interfaces/SwitchState.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["maxredirects",{"_index":354,"title":{},"body":{"modules/MeteoHttpModule.html":{},"modules/StationHttpModule.html":{}}}],["measurement",{"_index":266,"title":{"classes/Measurement.html":{}},"body":{"classes/Measurement.html":{},"classes/MeteoStats.html":{},"controllers/StationController.html":{},"injectables/StationService.html":{},"coverage.html":{}}}],["message",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/Hello.html":{}}}],["metadata",{"_index":578,"title":{},"body":{"dependencies.html":{}}}],["meteo",{"_index":20,"title":{"classes/Meteo.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/Ephemeride.html":{},"classes/Forecast.html":{},"classes/Meteo.html":{},"controllers/MeteoController.html":{},"injectables/MeteoService.html":{},"classes/MeteoStats.html":{},"controllers/StationController.html":{},"coverage.html":{},"index.html":{}}}],["meteo'})@get(':city",{"_index":314,"title":{},"body":{"controllers/MeteoController.html":{}}}],["meteo.controller",{"_index":363,"title":{},"body":{"modules/MeteoModule.html":{}}}],["meteo.service",{"_index":325,"title":{},"body":{"controllers/MeteoController.html":{},"modules/MeteoModule.html":{}}}],["meteo/meteo.module",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["meteocontroller",{"_index":293,"title":{"controllers/MeteoController.html":{}},"body":{"controllers/MeteoController.html":{},"modules/MeteoModule.html":{},"coverage.html":{}}}],["meteohttpmodule",{"_index":345,"title":{"modules/MeteoHttpModule.html":{}},"body":{"modules/MeteoHttpModule.html":{},"modules/MeteoModule.html":{},"modules.html":{},"overview.html":{}}}],["meteomodule",{"_index":58,"title":{"modules/MeteoModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MeteoModule.html":{},"modules.html":{},"overview.html":{}}}],["meteoservice",{"_index":324,"title":{"injectables/MeteoService.html":{}},"body":{"controllers/MeteoController.html":{},"modules/MeteoModule.html":{},"injectables/MeteoService.html":{},"coverage.html":{},"overview.html":{}}}],["meteostats",{"_index":389,"title":{"classes/MeteoStats.html":{}},"body":{"classes/MeteoStats.html":{},"controllers/StatsController.html":{},"injectables/StatsService.html":{},"coverage.html":{}}}],["method",{"_index":93,"title":{},"body":{"injectables/AppService.html":{}}}],["methods",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/HttpModule.html":{},"injectables/LoggerMiddleware.html":{},"controllers/MeteoController.html":{},"injectables/MeteoService.html":{},"controllers/StationController.html":{},"injectables/StationService.html":{},"controllers/StatsController.html":{},"injectables/StatsService.html":{}}}],["middlewareconsumer",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["minutes",{"_index":169,"title":{},"body":{"classes/Ephemeride.html":{}}}],["miscellaneous",{"_index":587,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["models/city.entity",{"_index":320,"title":{},"body":{"controllers/MeteoController.html":{},"injectables/MeteoService.html":{}}}],["models/ephemeride.entity",{"_index":321,"title":{},"body":{"controllers/MeteoController.html":{},"injectables/MeteoService.html":{}}}],["models/forecast.entity",{"_index":322,"title":{},"body":{"controllers/MeteoController.html":{},"injectables/MeteoService.html":{}}}],["models/mesurement.entity",{"_index":428,"title":{},"body":{"controllers/StationController.html":{},"injectables/StationService.html":{}}}],["models/meteo",{"_index":504,"title":{},"body":{"controllers/StatsController.html":{},"injectables/StatsService.html":{}}}],["models/meteo.entity",{"_index":323,"title":{},"body":{"controllers/MeteoController.html":{},"injectables/MeteoService.html":{}}}],["models/switch",{"_index":426,"title":{},"body":{"controllers/StationController.html":{},"injectables/StationService.html":{}}}],["module",{"_index":46,"title":{"modules/AppModule.html":{},"modules/HttpModule.html":{},"modules/MeteoHttpModule.html":{},"modules/MeteoModule.html":{},"modules/SharedModule.html":{},"modules/StationHttpModule.html":{},"modules/StationModule.html":{},"modules/StatsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HttpModule.html":{},"modules/MeteoHttpModule.html":{},"modules/MeteoModule.html":{},"modules/SharedModule.html":{},"modules/StationHttpModule.html":{},"modules/StationModule.html":{},"modules/StatsModule.html":{},"overview.html":{}}}],["modules",{"_index":48,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/HttpModule.html":{},"modules/MeteoHttpModule.html":{},"modules/MeteoModule.html":{},"modules/SharedModule.html":{},"modules/StationHttpModule.html":{},"modules/StationModule.html":{},"modules/StatsModule.html":{},"modules.html":{},"overview.html":{}}}],["moon",{"_index":172,"title":{},"body":{"classes/Ephemeride.html":{}}}],["moon_age",{"_index":136,"title":{},"body":{"classes/Ephemeride.html":{}}}],["moon_phase",{"_index":137,"title":{},"body":{"classes/Ephemeride.html":{}}}],["morgan",{"_index":575,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["name",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"classes/City.html":{},"injectables/LoggerMiddleware.html":{},"controllers/MeteoController.html":{},"injectables/MeteoService.html":{},"controllers/StationController.html":{},"injectables/StationService.html":{},"controllers/StatsController.html":{},"injectables/StatsService.html":{}}}],["name'})@get('city/:city",{"_index":311,"title":{},"body":{"controllers/MeteoController.html":{}}}],["nestjs",{"_index":596,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/HttpModule.html":{},"injectables/LoggerMiddleware.html":{},"controllers/MeteoController.html":{},"modules/MeteoHttpModule.html":{},"modules/MeteoModule.html":{},"injectables/MeteoService.html":{},"modules/SharedModule.html":{},"controllers/StationController.html":{},"modules/StationHttpModule.html":{},"modules/StationModule.html":{},"injectables/StationService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":215,"title":{},"body":{"modules/HttpModule.html":{},"modules/MeteoHttpModule.html":{},"injectables/MeteoService.html":{},"modules/SharedModule.html":{},"modules/StationHttpModule.html":{},"injectables/StationService.html":{},"injectables/StatsService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":570,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":571,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"classes/Measurement.html":{},"controllers/MeteoController.html":{},"controllers/StationController.html":{},"controllers/StatsController.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":259,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["nestmodule",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["new",{"_index":96,"title":{},"body":{"injectables/AppService.html":{},"modules/HttpModule.html":{},"coverage.html":{}}}],["next",{"_index":255,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["nextfunction",{"_index":256,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["null",{"_index":383,"title":{},"body":{"injectables/MeteoService.html":{}}}],["number",{"_index":111,"title":{},"body":{"classes/City.html":{},"classes/Ephemeride.html":{},"classes/Forecast.html":{},"classes/Measurement.html":{},"classes/Meteo.html":{},"classes/MeteoStats.html":{}}}],["onmoduleinit",{"_index":209,"title":{},"body":{"modules/HttpModule.html":{},"modules/MeteoHttpModule.html":{},"modules/StationHttpModule.html":{}}}],["openapi",{"_index":598,"title":{},"body":{"index.html":{}}}],["optional",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerMiddleware.html":{},"controllers/MeteoController.html":{},"injectables/MeteoService.html":{},"controllers/StationController.html":{},"injectables/StationService.html":{},"injectables/StatsService.html":{}}}],["others",{"_index":601,"title":{},"body":{"index.html":{}}}],["out",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"modules/MeteoModule.html":{},"modules/StationModule.html":{},"modules/StatsModule.html":{},"overview.html":{}}}],["overview",{"_index":613,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":567,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":317,"title":{},"body":{"controllers/MeteoController.html":{},"controllers/StationController.html":{}}}],["param('ressource",{"_index":441,"title":{},"body":{"controllers/StationController.html":{}}}],["parameters",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerMiddleware.html":{},"controllers/MeteoController.html":{},"injectables/MeteoService.html":{},"controllers/StationController.html":{},"injectables/StationService.html":{},"injectables/StatsService.html":{}}}],["path",{"_index":470,"title":{},"body":{"injectables/StationService.html":{}}}],["percent",{"_index":280,"title":{},"body":{"classes/Measurement.html":{}}}],["phase",{"_index":176,"title":{},"body":{"classes/Ephemeride.html":{}}}],["port",{"_index":553,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["post",{"_index":318,"title":{},"body":{"controllers/MeteoController.html":{},"controllers/StationController.html":{}}}],["post('device/:ressource",{"_index":422,"title":{},"body":{"controllers/StationController.html":{}}}],["postal",{"_index":114,"title":{},"body":{"classes/City.html":{},"classes/Forecast.html":{}}}],["prefix",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"controllers/MeteoController.html":{},"controllers/StationController.html":{},"controllers/StatsController.html":{}}}],["pressure",{"_index":269,"title":{},"body":{"classes/Measurement.html":{},"classes/MeteoStats.html":{},"controllers/StationController.html":{}}}],["private",{"_index":37,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"modules/HttpModule.html":{},"controllers/MeteoController.html":{},"injectables/MeteoService.html":{},"injectables/StationService.html":{},"controllers/StatsController.html":{},"injectables/StatsService.html":{}}}],["process.env.port",{"_index":617,"title":{},"body":{"miscellaneous/variables.html":{}}}],["promise",{"_index":304,"title":{},"body":{"controllers/MeteoController.html":{},"injectables/MeteoService.html":{},"controllers/StationController.html":{},"injectables/StationService.html":{},"controllers/StatsController.html":{},"injectables/StatsService.html":{}}}],["promise.reject(err",{"_index":250,"title":{},"body":{"modules/HttpModule.html":{}}}],["properties",{"_index":90,"title":{},"body":{"injectables/AppService.html":{},"classes/City.html":{},"classes/Ephemeride.html":{},"classes/Forecast.html":{},"classes/Hello.html":{},"classes/Measurement.html":{},"classes/Meteo.html":{},"classes/MeteoStats.html":{},"injectables/StationService.html":{},"injectables/StatsService.html":{},"interfaces/SwitchState.html":{}}}],["providers",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"modules/MeteoModule.html":{},"modules/StationModule.html":{},"modules/StatsModule.html":{},"overview.html":{}}}],["public",{"_index":208,"title":{},"body":{"modules/HttpModule.html":{},"injectables/MeteoService.html":{},"injectables/StationService.html":{},"injectables/StatsService.html":{}}}],["put",{"_index":425,"title":{},"body":{"controllers/StationController.html":{}}}],["put('reset",{"_index":418,"title":{},"body":{"controllers/StationController.html":{}}}],["readonly",{"_index":38,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"modules/HttpModule.html":{},"controllers/MeteoController.html":{},"injectables/MeteoService.html":{},"controllers/StationController.html":{},"injectables/StationService.html":{},"controllers/StatsController.html":{},"injectables/StatsService.html":{}}}],["redefine",{"_index":603,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":577,"title":{},"body":{"dependencies.html":{}}}],["req",{"_index":258,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["req.url",{"_index":262,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["request",{"_index":219,"title":{},"body":{"modules/HttpModule.html":{},"injectables/LoggerMiddleware.html":{}}}],["requests",{"_index":247,"title":{},"body":{"modules/HttpModule.html":{}}}],["res",{"_index":254,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["res.statuscode",{"_index":265,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["reset",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"modules/MeteoModule.html":{},"controllers/StationController.html":{},"modules/StationModule.html":{},"injectables/StationService.html":{},"modules/StatsModule.html":{},"overview.html":{}}}],["resolve",{"_index":248,"title":{},"body":{"modules/HttpModule.html":{}}}],["resource",{"_index":466,"title":{},"body":{"injectables/StationService.html":{}}}],["response",{"_index":221,"title":{},"body":{"modules/HttpModule.html":{},"injectables/LoggerMiddleware.html":{},"injectables/MeteoService.html":{},"injectables/StationService.html":{},"injectables/StatsService.html":{}}}],["response.data",{"_index":380,"title":{},"body":{"injectables/MeteoService.html":{},"injectables/StationService.html":{},"injectables/StatsService.html":{}}}],["response.data.cities",{"_index":381,"title":{},"body":{"injectables/MeteoService.html":{}}}],["response.data.cities[0",{"_index":382,"title":{},"body":{"injectables/MeteoService.html":{}}}],["response.data.ephemeride",{"_index":387,"title":{},"body":{"injectables/MeteoService.html":{}}}],["response.data.forecast",{"_index":388,"title":{},"body":{"injectables/MeteoService.html":{}}}],["ressource",{"_index":415,"title":{},"body":{"controllers/StationController.html":{},"injectables/StationService.html":{}}}],["ressourcesurl",{"_index":453,"title":{},"body":{"injectables/StationService.html":{}}}],["result",{"_index":43,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/City.html":{},"classes/Ephemeride.html":{},"classes/Forecast.html":{},"classes/Hello.html":{},"modules/HttpModule.html":{},"injectables/LoggerMiddleware.html":{},"classes/Measurement.html":{},"classes/Meteo.html":{},"controllers/MeteoController.html":{},"modules/MeteoHttpModule.html":{},"modules/MeteoModule.html":{},"injectables/MeteoService.html":{},"classes/MeteoStats.html":{},"modules/SharedModule.html":{},"controllers/StationController.html":{},"modules/StationHttpModule.html":{},"modules/StationModule.html":{},"injectables/StationService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"interfaces/SwitchState.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":45,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/City.html":{},"classes/Ephemeride.html":{},"classes/Forecast.html":{},"classes/Hello.html":{},"modules/HttpModule.html":{},"injectables/LoggerMiddleware.html":{},"classes/Measurement.html":{},"classes/Meteo.html":{},"controllers/MeteoController.html":{},"modules/MeteoHttpModule.html":{},"modules/MeteoModule.html":{},"injectables/MeteoService.html":{},"classes/MeteoStats.html":{},"modules/SharedModule.html":{},"controllers/StationController.html":{},"modules/StationHttpModule.html":{},"modules/StationModule.html":{},"injectables/StationService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"interfaces/SwitchState.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":41,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"modules/HttpModule.html":{},"controllers/MeteoController.html":{},"injectables/MeteoService.html":{},"controllers/StationController.html":{},"injectables/StationService.html":{},"controllers/StatsController.html":{},"injectables/StatsService.html":{}}}],["returns",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/HttpModule.html":{},"injectables/LoggerMiddleware.html":{},"controllers/MeteoController.html":{},"injectables/MeteoService.html":{},"controllers/StationController.html":{},"injectables/StationService.html":{},"controllers/StatsController.html":{},"injectables/StatsService.html":{}}}],["rimraf",{"_index":580,"title":{},"body":{"dependencies.html":{}}}],["rooturl",{"_index":454,"title":{},"body":{"injectables/StationService.html":{},"injectables/StatsService.html":{}}}],["rooturlbuckets",{"_index":520,"title":{},"body":{"injectables/StatsService.html":{}}}],["rxjs",{"_index":582,"title":{},"body":{"dependencies.html":{}}}],["seine",{"_index":124,"title":{},"body":{"classes/City.html":{}}}],["service",{"_index":605,"title":{},"body":{"index.html":{}}}],["shared/shared.module",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["sharedmodule",{"_index":59,"title":{"modules/SharedModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MeteoModule.html":{},"modules/SharedModule.html":{},"modules/StationModule.html":{},"modules/StatsModule.html":{},"modules.html":{},"overview.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/City.html":{},"classes/Ephemeride.html":{},"classes/Forecast.html":{},"classes/Hello.html":{},"modules/HttpModule.html":{},"injectables/LoggerMiddleware.html":{},"classes/Measurement.html":{},"classes/Meteo.html":{},"controllers/MeteoController.html":{},"modules/MeteoHttpModule.html":{},"modules/MeteoModule.html":{},"injectables/MeteoService.html":{},"classes/MeteoStats.html":{},"modules/SharedModule.html":{},"controllers/StationController.html":{},"modules/StationHttpModule.html":{},"modules/StationModule.html":{},"injectables/StationService.html":{},"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"interfaces/SwitchState.html":{}}}],["src/.../main.ts",{"_index":589,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:17",{"_index":23,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:21",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":89,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:11",{"_index":98,"title":{},"body":{"injectables/AppService.html":{}}}],["src/app.service.ts:17",{"_index":92,"title":{},"body":{"injectables/AppService.html":{}}}],["src/hello.entity.ts",{"_index":204,"title":{},"body":{"classes/Hello.html":{},"coverage.html":{}}}],["src/hello.entity.ts:7",{"_index":205,"title":{},"body":{"classes/Hello.html":{}}}],["src/http/http.module.ts",{"_index":207,"title":{},"body":{"modules/HttpModule.html":{}}}],["src/http/http.module.ts:11",{"_index":210,"title":{},"body":{"modules/HttpModule.html":{}}}],["src/http/meteo",{"_index":346,"title":{},"body":{"modules/MeteoHttpModule.html":{},"modules/MeteoModule.html":{}}}],["src/http/station",{"_index":400,"title":{},"body":{"modules/SharedModule.html":{},"modules/StationHttpModule.html":{},"modules/StationModule.html":{},"modules/StatsModule.html":{}}}],["src/logger.middleware.ts",{"_index":251,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"coverage.html":{}}}],["src/logger.middleware.ts:6",{"_index":257,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["src/main.ts",{"_index":549,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/meteo/meteo.controller.ts",{"_index":294,"title":{},"body":{"controllers/MeteoController.html":{},"coverage.html":{}}}],["src/meteo/meteo.controller.ts:27",{"_index":312,"title":{},"body":{"controllers/MeteoController.html":{}}}],["src/meteo/meteo.controller.ts:37",{"_index":315,"title":{},"body":{"controllers/MeteoController.html":{}}}],["src/meteo/meteo.controller.ts:48",{"_index":303,"title":{},"body":{"controllers/MeteoController.html":{}}}],["src/meteo/meteo.controller.ts:59",{"_index":307,"title":{},"body":{"controllers/MeteoController.html":{}}}],["src/meteo/meteo.module.ts",{"_index":361,"title":{},"body":{"modules/MeteoModule.html":{}}}],["src/meteo/meteo.service.ts",{"_index":364,"title":{},"body":{"injectables/MeteoService.html":{},"coverage.html":{}}}],["src/meteo/meteo.service.ts:17",{"_index":376,"title":{},"body":{"injectables/MeteoService.html":{}}}],["src/meteo/meteo.service.ts:23",{"_index":374,"title":{},"body":{"injectables/MeteoService.html":{}}}],["src/meteo/meteo.service.ts:29",{"_index":370,"title":{},"body":{"injectables/MeteoService.html":{}}}],["src/meteo/meteo.service.ts:36",{"_index":372,"title":{},"body":{"injectables/MeteoService.html":{}}}],["src/meteo/meteo.service.ts:9",{"_index":368,"title":{},"body":{"injectables/MeteoService.html":{}}}],["src/meteo/models/city.entity.ts",{"_index":105,"title":{},"body":{"classes/City.html":{},"coverage.html":{}}}],["src/meteo/models/city.entity.ts:12",{"_index":117,"title":{},"body":{"classes/City.html":{}}}],["src/meteo/models/city.entity.ts:18",{"_index":113,"title":{},"body":{"classes/City.html":{}}}],["src/meteo/models/city.entity.ts:24",{"_index":118,"title":{},"body":{"classes/City.html":{}}}],["src/meteo/models/city.entity.ts:30",{"_index":119,"title":{},"body":{"classes/City.html":{}}}],["src/meteo/models/city.entity.ts:36",{"_index":112,"title":{},"body":{"classes/City.html":{}}}],["src/meteo/models/city.entity.ts:6",{"_index":120,"title":{},"body":{"classes/City.html":{}}}],["src/meteo/models/ephemeride.entity.ts",{"_index":131,"title":{},"body":{"classes/Ephemeride.html":{},"coverage.html":{}}}],["src/meteo/models/ephemeride.entity.ts:13",{"_index":146,"title":{},"body":{"classes/Ephemeride.html":{}}}],["src/meteo/models/ephemeride.entity.ts:20",{"_index":144,"title":{},"body":{"classes/Ephemeride.html":{}}}],["src/meteo/models/ephemeride.entity.ts:26",{"_index":141,"title":{},"body":{"classes/Ephemeride.html":{}}}],["src/meteo/models/ephemeride.entity.ts:32",{"_index":140,"title":{},"body":{"classes/Ephemeride.html":{}}}],["src/meteo/models/ephemeride.entity.ts:38",{"_index":149,"title":{},"body":{"classes/Ephemeride.html":{}}}],["src/meteo/models/ephemeride.entity.ts:44",{"_index":150,"title":{},"body":{"classes/Ephemeride.html":{}}}],["src/meteo/models/ephemeride.entity.ts:50",{"_index":143,"title":{},"body":{"classes/Ephemeride.html":{}}}],["src/meteo/models/ephemeride.entity.ts:56",{"_index":142,"title":{},"body":{"classes/Ephemeride.html":{}}}],["src/meteo/models/ephemeride.entity.ts:62",{"_index":147,"title":{},"body":{"classes/Ephemeride.html":{}}}],["src/meteo/models/ephemeride.entity.ts:68",{"_index":148,"title":{},"body":{"classes/Ephemeride.html":{}}}],["src/meteo/models/ephemeride.entity.ts:7",{"_index":145,"title":{},"body":{"classes/Ephemeride.html":{}}}],["src/meteo/models/forecast.entity.ts",{"_index":181,"title":{},"body":{"classes/Forecast.html":{},"coverage.html":{}}}],["src/meteo/models/forecast.entity.ts:13",{"_index":185,"title":{},"body":{"classes/Forecast.html":{}}}],["src/meteo/models/forecast.entity.ts:19",{"_index":189,"title":{},"body":{"classes/Forecast.html":{}}}],["src/meteo/models/forecast.entity.ts:25",{"_index":190,"title":{},"body":{"classes/Forecast.html":{}}}],["src/meteo/models/forecast.entity.ts:31",{"_index":187,"title":{},"body":{"classes/Forecast.html":{}}}],["src/meteo/models/forecast.entity.ts:37",{"_index":186,"title":{},"body":{"classes/Forecast.html":{}}}],["src/meteo/models/forecast.entity.ts:44",{"_index":193,"title":{},"body":{"classes/Forecast.html":{}}}],["src/meteo/models/forecast.entity.ts:51",{"_index":192,"title":{},"body":{"classes/Forecast.html":{}}}],["src/meteo/models/forecast.entity.ts:58",{"_index":191,"title":{},"body":{"classes/Forecast.html":{}}}],["src/meteo/models/forecast.entity.ts:7",{"_index":188,"title":{},"body":{"classes/Forecast.html":{}}}],["src/meteo/models/meteo.entity.ts",{"_index":282,"title":{},"body":{"classes/Meteo.html":{},"coverage.html":{}}}],["src/meteo/models/meteo.entity.ts:14",{"_index":286,"title":{},"body":{"classes/Meteo.html":{}}}],["src/meteo/models/meteo.entity.ts:21",{"_index":287,"title":{},"body":{"classes/Meteo.html":{}}}],["src/meteo/models/meteo.entity.ts:28",{"_index":285,"title":{},"body":{"classes/Meteo.html":{}}}],["src/meteo/models/meteo.entity.ts:35",{"_index":284,"title":{},"body":{"classes/Meteo.html":{}}}],["src/meteo/models/meteo.entity.ts:7",{"_index":283,"title":{},"body":{"classes/Meteo.html":{}}}],["src/shared/shared.module",{"_index":362,"title":{},"body":{"modules/MeteoModule.html":{},"modules/StationModule.html":{},"modules/StatsModule.html":{}}}],["src/shared/shared.module.ts",{"_index":398,"title":{},"body":{"modules/SharedModule.html":{}}}],["src/station/models/mesurement.entity",{"_index":395,"title":{},"body":{"classes/MeteoStats.html":{}}}],["src/station/models/mesurement.entity.ts",{"_index":267,"title":{},"body":{"classes/Measurement.html":{},"coverage.html":{}}}],["src/station/models/mesurement.entity.ts:15",{"_index":272,"title":{},"body":{"classes/Measurement.html":{}}}],["src/station/models/mesurement.entity.ts:22",{"_index":271,"title":{},"body":{"classes/Measurement.html":{}}}],["src/station/models/mesurement.entity.ts:8",{"_index":273,"title":{},"body":{"classes/Measurement.html":{}}}],["src/station/models/switch",{"_index":539,"title":{},"body":{"interfaces/SwitchState.html":{},"coverage.html":{}}}],["src/station/station.controller.ts",{"_index":403,"title":{},"body":{"controllers/StationController.html":{},"coverage.html":{}}}],["src/station/station.controller.ts:17",{"_index":411,"title":{},"body":{"controllers/StationController.html":{}}}],["src/station/station.controller.ts:22",{"_index":409,"title":{},"body":{"controllers/StationController.html":{}}}],["src/station/station.controller.ts:27",{"_index":414,"title":{},"body":{"controllers/StationController.html":{}}}],["src/station/station.controller.ts:37",{"_index":417,"title":{},"body":{"controllers/StationController.html":{}}}],["src/station/station.controller.ts:42",{"_index":423,"title":{},"body":{"controllers/StationController.html":{}}}],["src/station/station.controller.ts:47",{"_index":419,"title":{},"body":{"controllers/StationController.html":{}}}],["src/station/station.module.ts",{"_index":448,"title":{},"body":{"modules/StationModule.html":{}}}],["src/station/station.service.ts",{"_index":450,"title":{},"body":{"injectables/StationService.html":{},"coverage.html":{}}}],["src/station/station.service.ts:10",{"_index":474,"title":{},"body":{"injectables/StationService.html":{}}}],["src/station/station.service.ts:11",{"_index":473,"title":{},"body":{"injectables/StationService.html":{}}}],["src/station/station.service.ts:12",{"_index":458,"title":{},"body":{"injectables/StationService.html":{}}}],["src/station/station.service.ts:23",{"_index":462,"title":{},"body":{"injectables/StationService.html":{}}}],["src/station/station.service.ts:28",{"_index":469,"title":{},"body":{"injectables/StationService.html":{}}}],["src/station/station.service.ts:33",{"_index":460,"title":{},"body":{"injectables/StationService.html":{}}}],["src/station/station.service.ts:38",{"_index":459,"title":{},"body":{"injectables/StationService.html":{}}}],["src/station/station.service.ts:43",{"_index":472,"title":{},"body":{"injectables/StationService.html":{}}}],["src/station/station.service.ts:47",{"_index":465,"title":{},"body":{"injectables/StationService.html":{}}}],["src/station/station.service.ts:51",{"_index":463,"title":{},"body":{"injectables/StationService.html":{}}}],["src/station/station.service.ts:56",{"_index":467,"title":{},"body":{"injectables/StationService.html":{}}}],["src/station/station.service.ts:9",{"_index":475,"title":{},"body":{"injectables/StationService.html":{}}}],["src/station/stats/models/meteo",{"_index":390,"title":{},"body":{"classes/MeteoStats.html":{},"coverage.html":{}}}],["src/station/stats/stats.controller.ts",{"_index":496,"title":{},"body":{"controllers/StatsController.html":{},"coverage.html":{}}}],["src/station/stats/stats.controller.ts:18",{"_index":501,"title":{},"body":{"controllers/StatsController.html":{}}}],["src/station/stats/stats.controller.ts:23",{"_index":503,"title":{},"body":{"controllers/StatsController.html":{}}}],["src/station/stats/stats.module.ts",{"_index":515,"title":{},"body":{"modules/StatsModule.html":{}}}],["src/station/stats/stats.service.ts",{"_index":517,"title":{},"body":{"injectables/StatsService.html":{},"coverage.html":{}}}],["src/station/stats/stats.service.ts:10",{"_index":526,"title":{},"body":{"injectables/StatsService.html":{}}}],["src/station/stats/stats.service.ts:11",{"_index":523,"title":{},"body":{"injectables/StatsService.html":{}}}],["src/station/stats/stats.service.ts:23",{"_index":525,"title":{},"body":{"injectables/StatsService.html":{}}}],["src/station/stats/stats.service.ts:29",{"_index":524,"title":{},"body":{"injectables/StatsService.html":{}}}],["src/station/stats/stats.service.ts:8",{"_index":527,"title":{},"body":{"injectables/StatsService.html":{}}}],["src/station/stats/stats.service.ts:9",{"_index":528,"title":{},"body":{"injectables/StatsService.html":{}}}],["startdate",{"_index":228,"title":{},"body":{"modules/HttpModule.html":{}}}],["started",{"_index":591,"title":{"index.html":{}},"body":{}}],["state",{"_index":541,"title":{},"body":{"interfaces/SwitchState.html":{}}}],["state.interface",{"_index":427,"title":{},"body":{"controllers/StationController.html":{},"injectables/StationService.html":{}}}],["state.interface.ts",{"_index":540,"title":{},"body":{"interfaces/SwitchState.html":{},"coverage.html":{}}}],["state`).topromise",{"_index":485,"title":{},"body":{"injectables/StationService.html":{}}}],["statements",{"_index":545,"title":{},"body":{"coverage.html":{}}}],["station",{"_index":102,"title":{},"body":{"injectables/AppService.html":{},"controllers/StationController.html":{},"index.html":{}}}],["station.controller",{"_index":449,"title":{},"body":{"modules/StationModule.html":{}}}],["station.service",{"_index":430,"title":{},"body":{"controllers/StationController.html":{},"modules/StationModule.html":{}}}],["station/station.module",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["station/stats",{"_index":497,"title":{},"body":{"controllers/StatsController.html":{}}}],["station/stats/stats.module",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["stationcontroller",{"_index":402,"title":{"controllers/StationController.html":{}},"body":{"controllers/StationController.html":{},"modules/StationModule.html":{},"coverage.html":{}}}],["stationhttpmodule",{"_index":399,"title":{"modules/StationHttpModule.html":{}},"body":{"modules/SharedModule.html":{},"modules/StationHttpModule.html":{},"modules/StationModule.html":{},"modules/StatsModule.html":{},"modules.html":{},"overview.html":{}}}],["stationmodule",{"_index":60,"title":{"modules/StationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StationModule.html":{},"modules.html":{},"overview.html":{}}}],["stationservice",{"_index":429,"title":{"injectables/StationService.html":{}},"body":{"controllers/StationController.html":{},"modules/StationModule.html":{},"injectables/StationService.html":{},"coverage.html":{},"overview.html":{}}}],["stats.controller",{"_index":516,"title":{},"body":{"modules/StatsModule.html":{}}}],["stats.entity",{"_index":505,"title":{},"body":{"controllers/StatsController.html":{},"injectables/StatsService.html":{}}}],["stats.entity.ts",{"_index":391,"title":{},"body":{"classes/MeteoStats.html":{},"coverage.html":{}}}],["stats.entity.ts:15",{"_index":393,"title":{},"body":{"classes/MeteoStats.html":{}}}],["stats.entity.ts:9",{"_index":394,"title":{},"body":{"classes/MeteoStats.html":{}}}],["stats.service",{"_index":507,"title":{},"body":{"controllers/StatsController.html":{},"modules/StatsModule.html":{}}}],["statscontroller",{"_index":495,"title":{"controllers/StatsController.html":{}},"body":{"controllers/StatsController.html":{},"modules/StatsModule.html":{},"coverage.html":{}}}],["statsmodule",{"_index":61,"title":{"modules/StatsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StatsModule.html":{},"modules.html":{},"overview.html":{}}}],["statsservice",{"_index":506,"title":{"injectables/StatsService.html":{}},"body":{"controllers/StatsController.html":{},"modules/StatsModule.html":{},"injectables/StatsService.html":{},"coverage.html":{},"overview.html":{}}}],["status",{"_index":39,"title":{},"body":{"controllers/AppController.html":{},"controllers/MeteoController.html":{},"controllers/StationController.html":{}}}],["string",{"_index":116,"title":{},"body":{"classes/City.html":{},"classes/Ephemeride.html":{},"classes/Forecast.html":{},"classes/Hello.html":{},"classes/Meteo.html":{},"controllers/MeteoController.html":{},"injectables/MeteoService.html":{},"controllers/StationController.html":{},"injectables/StationService.html":{},"injectables/StatsService.html":{}}}],["sunrise",{"_index":138,"title":{},"body":{"classes/Ephemeride.html":{},"classes/Meteo.html":{}}}],["sunset",{"_index":139,"title":{},"body":{"classes/Ephemeride.html":{},"classes/Meteo.html":{}}}],["support",{"_index":608,"title":{},"body":{"modules.html":{}}}],["sur",{"_index":123,"title":{},"body":{"classes/City.html":{}}}],["svg",{"_index":609,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":584,"title":{},"body":{"dependencies.html":{}}}],["switchdevice",{"_index":457,"title":{},"body":{"injectables/StationService.html":{}}}],["switchdevice(path",{"_index":468,"title":{},"body":{"injectables/StationService.html":{}}}],["switchonoff",{"_index":424,"title":{},"body":{"controllers/StationController.html":{},"injectables/StationService.html":{}}}],["switchressource",{"_index":407,"title":{},"body":{"controllers/StationController.html":{},"injectables/StationService.html":{}}}],["switchressource(@body",{"_index":440,"title":{},"body":{"controllers/StationController.html":{}}}],["switchressource(ressource",{"_index":471,"title":{},"body":{"injectables/StationService.html":{}}}],["switchressource(switchonoff",{"_index":420,"title":{},"body":{"controllers/StationController.html":{}}}],["switchstate",{"_index":421,"title":{"interfaces/SwitchState.html":{}},"body":{"controllers/StationController.html":{},"injectables/StationService.html":{},"interfaces/SwitchState.html":{},"coverage.html":{}}}],["switchstate.state",{"_index":487,"title":{},"body":{"injectables/StationService.html":{}}}],["table",{"_index":566,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":565,"title":{},"body":{"coverage.html":{}}}],["temparature",{"_index":275,"title":{},"body":{"classes/Measurement.html":{},"classes/Meteo.html":{}}}],["temperature",{"_index":270,"title":{},"body":{"classes/Measurement.html":{},"classes/Meteo.html":{},"classes/MeteoStats.html":{},"controllers/StationController.html":{}}}],["temps",{"_index":199,"title":{},"body":{"classes/Forecast.html":{}}}],["this.appservice.gethello",{"_index":42,"title":{},"body":{"controllers/AppController.html":{}}}],["this.bucketdaily",{"_index":533,"title":{},"body":{"injectables/StatsService.html":{}}}],["this.bucketh24",{"_index":531,"title":{},"body":{"injectables/StatsService.html":{}}}],["this.configservice.get('meteo_api_url')}/ephemeride/0?insee=${insee",{"_index":385,"title":{},"body":{"injectables/MeteoService.html":{}}}],["this.configservice.get('meteo_api_url')}/forecast/daily?insee=${insee",{"_index":384,"title":{},"body":{"injectables/MeteoService.html":{}}}],["this.configservice.get('meteo_api_url')}/location/cities?search=${city",{"_index":378,"title":{},"body":{"injectables/MeteoService.html":{}}}],["this.configservice.get('thinger_io_api_buckets_path",{"_index":530,"title":{},"body":{"injectables/StatsService.html":{}}}],["this.configservice.get('thinger_io_api_device_id",{"_index":483,"title":{},"body":{"injectables/StationService.html":{}}}],["this.configservice.get('thinger_io_api_devices_path",{"_index":481,"title":{},"body":{"injectables/StationService.html":{}}}],["this.configservice.get('thinger_io_api_ressources_path",{"_index":479,"title":{},"body":{"injectables/StationService.html":{}}}],["this.configservice.get('thinger_io_api_url",{"_index":477,"title":{},"body":{"injectables/StationService.html":{},"injectables/StatsService.html":{}}}],["this.configservice.get('thinger_io_bucket_daily",{"_index":534,"title":{},"body":{"injectables/StatsService.html":{}}}],["this.configservice.get('thinger_io_bucket_h24",{"_index":532,"title":{},"body":{"injectables/StatsService.html":{}}}],["this.deviceid",{"_index":482,"title":{},"body":{"injectables/StationService.html":{}}}],["this.devicesurl",{"_index":480,"title":{},"body":{"injectables/StationService.html":{}}}],["this.getdevicestate(`${resource",{"_index":492,"title":{},"body":{"injectables/StationService.html":{}}}],["this.httpservice.axiosref",{"_index":225,"title":{},"body":{"modules/HttpModule.html":{}}}],["this.httpservice.get(`${this.rooturl}${this.devicesurl}/${this.deviceid}`).topromise",{"_index":490,"title":{},"body":{"injectables/StationService.html":{}}}],["this.httpservice.get(`${this.rooturl}${this.devicesurl}`).topromise",{"_index":489,"title":{},"body":{"injectables/StationService.html":{}}}],["this.httpservice.get(`${this.rooturl}${this.ressourcesurl}${ressource",{"_index":484,"title":{},"body":{"injectables/StationService.html":{}}}],["this.httpservice.get(`${this.rooturl}${this.ressourcesurl}meteo`).topromise",{"_index":493,"title":{},"body":{"injectables/StationService.html":{}}}],["this.httpservice.get(`${url}`).topromise",{"_index":379,"title":{},"body":{"injectables/MeteoService.html":{},"injectables/StatsService.html":{}}}],["this.httpservice.post(`${this.rooturl}${this.ressourcesurl}${path",{"_index":486,"title":{},"body":{"injectables/StationService.html":{}}}],["this.httpservice.post(`${this.rooturl}${this.ressourcesurl}reseting`).topromise",{"_index":494,"title":{},"body":{"injectables/StationService.html":{}}}],["this.meteoservice.getephemeride(citydetail.insee",{"_index":341,"title":{},"body":{"controllers/MeteoController.html":{}}}],["this.meteoservice.getforecasts(citydetail.insee",{"_index":344,"title":{},"body":{"controllers/MeteoController.html":{}}}],["this.meteoservice.getmeteo(citydetail.insee",{"_index":338,"title":{},"body":{"controllers/MeteoController.html":{}}}],["this.meteoservice.localise(city",{"_index":333,"title":{},"body":{"controllers/MeteoController.html":{}}}],["this.ressourcesurl",{"_index":478,"title":{},"body":{"injectables/StationService.html":{}}}],["this.rooturl",{"_index":476,"title":{},"body":{"injectables/StationService.html":{},"injectables/StatsService.html":{}}}],["this.rooturlbuckets",{"_index":529,"title":{},"body":{"injectables/StatsService.html":{}}}],["this.rooturlbuckets}/${this.bucketdaily}/data",{"_index":536,"title":{},"body":{"injectables/StatsService.html":{}}}],["this.rooturlbuckets}/${this.bucketh24}/data",{"_index":535,"title":{},"body":{"injectables/StatsService.html":{}}}],["this.stationservice.getdevice",{"_index":435,"title":{},"body":{"controllers/StationController.html":{}}}],["this.stationservice.getdevices",{"_index":434,"title":{},"body":{"controllers/StationController.html":{}}}],["this.stationservice.getmeteo",{"_index":439,"title":{},"body":{"controllers/StationController.html":{}}}],["this.stationservice.getstate(ressource",{"_index":437,"title":{},"body":{"controllers/StationController.html":{}}}],["this.stationservice.reset",{"_index":443,"title":{},"body":{"controllers/StationController.html":{}}}],["this.stationservice.switchressource(ressource,switchonoff",{"_index":442,"title":{},"body":{"controllers/StationController.html":{}}}],["this.statsservice.getmeteostatsdaily",{"_index":510,"title":{},"body":{"controllers/StatsController.html":{}}}],["this.statsservice.getmeteostatsh24",{"_index":511,"title":{},"body":{"controllers/StatsController.html":{}}}],["this.switchdevice(ressource",{"_index":491,"title":{},"body":{"injectables/StationService.html":{}}}],["time",{"_index":156,"title":{},"body":{"classes/Ephemeride.html":{},"classes/Forecast.html":{},"classes/Meteo.html":{}}}],["timeout",{"_index":352,"title":{},"body":{"modules/MeteoHttpModule.html":{},"modules/StationHttpModule.html":{}}}],["timestamp",{"_index":396,"title":{},"body":{"classes/MeteoStats.html":{}}}],["tmax",{"_index":182,"title":{},"body":{"classes/Forecast.html":{}}}],["tmin",{"_index":183,"title":{},"body":{"classes/Forecast.html":{}}}],["topics",{"_index":602,"title":{},"body":{"index.html":{}}}],["topromise",{"_index":488,"title":{},"body":{"injectables/StationService.html":{}}}],["ts",{"_index":392,"title":{},"body":{"classes/MeteoStats.html":{}}}],["type",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/City.html":{},"classes/Ephemeride.html":{},"classes/Forecast.html":{},"classes/Hello.html":{},"injectables/LoggerMiddleware.html":{},"classes/Measurement.html":{},"classes/Meteo.html":{},"controllers/MeteoController.html":{},"injectables/MeteoService.html":{},"classes/MeteoStats.html":{},"controllers/StationController.html":{},"injectables/StationService.html":{},"injectables/StatsService.html":{},"interfaces/SwitchState.html":{},"coverage.html":{}}}],["ui",{"_index":585,"title":{},"body":{"dependencies.html":{}}}],["un",{"_index":276,"title":{},"body":{"classes/Measurement.html":{},"classes/Meteo.html":{}}}],["undefined",{"_index":249,"title":{},"body":{"modules/HttpModule.html":{},"injectables/MeteoService.html":{}}}],["url",{"_index":377,"title":{},"body":{"injectables/MeteoService.html":{},"injectables/StatsService.html":{}}}],["use",{"_index":252,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["use(req",{"_index":253,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["usefactory",{"_index":350,"title":{},"body":{"modules/MeteoHttpModule.html":{},"modules/StationHttpModule.html":{}}}],["useful",{"_index":594,"title":{},"body":{"index.html":{}}}],["value",{"_index":95,"title":{},"body":{"injectables/AppService.html":{},"classes/Measurement.html":{},"classes/Meteo.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":552,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":616,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vitry",{"_index":122,"title":{},"body":{"classes/City.html":{}}}],["void",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerMiddleware.html":{}}}],["weather",{"_index":184,"title":{},"body":{"classes/Forecast.html":{},"classes/Meteo.html":{}}}],["welcome",{"_index":19,"title":{},"body":{"controllers/AppController.html":{}}}],["wheather",{"_index":195,"title":{},"body":{"classes/Forecast.html":{},"classes/Meteo.html":{}}}],["world",{"_index":100,"title":{},"body":{"injectables/AppService.html":{},"classes/Hello.html":{}}}],["xxxxxxxxxxxxxxxxxxxxxxxx",{"_index":329,"title":{},"body":{"controllers/MeteoController.html":{},"controllers/StationController.html":{},"controllers/StatsController.html":{}}}],["zoom",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"modules/MeteoModule.html":{},"modules/StationModule.html":{},"modules/StatsModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getHello\n                        \n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiResponse({status: 200, type: Hello, description: 'Hello message to welcome to Meteo API'})@Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Hello\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\nimport { ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { Hello } from './hello.entity';\n@ApiTags('Hello')\n@Controller(\"/\")\nexport class AppController {\n  constructor(\n    private readonly appService: AppService) { }\n  \n  @ApiResponse({\n    status: 200,\n    type: Hello,\n    description: 'Hello message to welcome to Meteo API'\n  })\n  @Get()\n  getHello(): Hello {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nMeteoModule\n\nMeteoModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nMeteoModule->AppModule\n\n\n\n\n\nSharedModule\n\nSharedModule\n\nAppModule -->\n\nSharedModule->AppModule\n\n\n\n\n\nStationModule\n\nStationModule\n\nAppModule -->\n\nStationModule->AppModule\n\n\n\n\n\nStatsModule\n\nStatsModule\n\nAppModule -->\n\nStatsModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            MeteoModule\n                        \n                        \n                            SharedModule\n                        \n                        \n                            StationModule\n                        \n                        \n                            StatsModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            configure\n                        \n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module, NestModule } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { MeteoModule } from './meteo/meteo.module';\nimport { StatsModule } from './station/stats/stats.module';\nimport { LoggerMiddleware } from './logger.middleware';\nimport { StationModule } from './station/station.module';\nimport { SharedModule } from './shared/shared.module';\n\n@Module({\n  imports: [\n    SharedModule,\n    MeteoModule,\n    StatsModule,\n    StationModule    \n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule implements NestModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer       \n      .apply(LoggerMiddleware)\n      .forRoutes('*');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getHello\n                        \n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:17\n                \n            \n\n\n            \n                \n                    A method to say Hello\n\n\n                    \n                        Returns :         Hello\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Logger(AppService.name)\n                        \n                    \n                        \n                            \n                                    Defined in src/app.service.ts:11\n                            \n                        \n\n                \n                    \n                        Defalt logger\n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { Hello } from './hello.entity';\n\n@Injectable()\nexport class AppService {\n  \n  /**\n   * Defalt logger\n   */\n\n  private readonly logger = new Logger(AppService.name);\n\n  /**\n   * A method to say Hello\n   */\n\n  getHello(): Hello {\n    return { message : 'Hello World! This my connected meteo station' };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/City.html":{"url":"classes/City.html","title":"class - City","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  City\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meteo/models/city.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                altitude\n                            \n                            \n                                cp\n                            \n                            \n                                insee\n                            \n                            \n                                latitude\n                            \n                            \n                                longitude\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            altitude\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/meteo/models/city.entity.ts:36\n                            \n                        \n\n                \n                    \n                        Altitude\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cp\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/meteo/models/city.entity.ts:18\n                            \n                        \n\n                \n                    \n                        Postal code\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            insee\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/meteo/models/city.entity.ts:12\n                            \n                        \n\n                \n                    \n                        Code INSEE\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            latitude\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/meteo/models/city.entity.ts:24\n                            \n                        \n\n                \n                    \n                        Latitude\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            longitude\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/meteo/models/city.entity.ts:30\n                            \n                        \n\n                \n                    \n                        Latitude\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/meteo/models/city.entity.ts:6\n                            \n                        \n\n                \n                    \n                        Name of the City\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class City{\n    /**\n     * Name of the City\n     * @example 'vitry-sur-seine'\n     */\n    name: string;\n\n    /**\n     * Code INSEE\n     * @example '94081'\n     */\n    insee: string;\n\n    /**\n     * Postal code\n     * @example 94400\n     */\n    cp: number;\n\n    /**\n     * Latitude\n     * @example 48.7883\n     */\n    latitude: number;\n\n    /**\n     * Latitude\n     * @example 2.3941\n     */\n    longitude: number;\n\n    /**\n     * Altitude\n     * @example 56\n     */\n    altitude: number;\n    \n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Ephemeride.html":{"url":"classes/Ephemeride.html","title":"class - Ephemeride","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Ephemeride\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meteo/models/ephemeride.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                datetime\n                            \n                            \n                                day\n                            \n                            \n                                diff_duration_day\n                            \n                            \n                                duration_day\n                            \n                            \n                                insee\n                            \n                            \n                                latitude\n                            \n                            \n                                longitude\n                            \n                            \n                                moon_age\n                            \n                            \n                                moon_phase\n                            \n                            \n                                sunrise\n                            \n                            \n                                sunset\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            datetime\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/meteo/models/ephemeride.entity.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            day\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/meteo/models/ephemeride.entity.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            diff_duration_day\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/meteo/models/ephemeride.entity.ts:56\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            duration_day\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/meteo/models/ephemeride.entity.ts:50\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            insee\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/meteo/models/ephemeride.entity.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            latitude\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/meteo/models/ephemeride.entity.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            longitude\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/meteo/models/ephemeride.entity.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            moon_age\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/meteo/models/ephemeride.entity.ts:62\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            moon_phase\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/meteo/models/ephemeride.entity.ts:68\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sunrise\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/meteo/models/ephemeride.entity.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sunset\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/meteo/models/ephemeride.entity.ts:44\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Ephemeride {\n    \n    /*\n     * Latitude\n     * @example 48.112\n     */    \n    latitude: number;\n    \n    /*\n     * Longitude\n     * @example -1.6819\n     */\n    longitude: number;\n    \n\n    /*\n     * INSEE code of city\n     * @example 94081\n     */\n    insee: string;\n    \n     /*\n     * Day of ephemeride (0 for first day)\n     * @example 0\n     */\n    day: number; \n    \n    /*\n     * Date Time of meteo\n     * @example '2021-02-07T00:00:00+0100'\n     */\n    datetime: string;\n    \n    /*\n     * Sunrise hour \n     * @example '08:23'\n     */\n    sunrise: string;\n    \n    /*\n     * Sunset hour\n     * @example '18:17'\n     */\n    sunset: string;\n   \n    /*\n     * Duration of day \n     * @example '09:54',\n     */\n    duration_day: string;\n    \n    /*\n     * Gain or loss of duration of the day compared to the day before in minutes\n     * @example 3\n     */\n    diff_duration_day:number;\n    \n    /*\n     * Moon age in day\n     * @example 25.4\n     */\n    moon_age: number;\n     \n    /*\n     * Lib of moon phase (only in French)\n     * @example 'Dernier croissant'\n     */\n    moon_phase: string; \n\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Forecast.html":{"url":"classes/Forecast.html","title":"class - Forecast","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Forecast\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meteo/models/forecast.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                cp\n                            \n                            \n                                datetime\n                            \n                            \n                                day\n                            \n                            \n                                insee\n                            \n                            \n                                latitude\n                            \n                            \n                                longitude\n                            \n                            \n                                tmax\n                            \n                            \n                                tmin\n                            \n                            \n                                weather\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cp\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/meteo/models/forecast.entity.ts:13\n                            \n                        \n\n                \n                    \n                        Postal code\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            datetime\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/meteo/models/forecast.entity.ts:37\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            day\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/meteo/models/forecast.entity.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            insee\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/meteo/models/forecast.entity.ts:7\n                            \n                        \n\n                \n                    \n                        INSEE code\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            latitude\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/meteo/models/forecast.entity.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            longitude\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/meteo/models/forecast.entity.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tmax\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/meteo/models/forecast.entity.ts:58\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tmin\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/meteo/models/forecast.entity.ts:51\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            weather\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/meteo/models/forecast.entity.ts:44\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Forecast {\n    \n     /**\n     * INSEE code\n     * @example 94081\n     */\n    insee: string; \n    \n     /**\n     * Postal code\n     * @example 94400\n     */\n    cp: number; \n    \n     /*\n     * Latitude\n     * @example 48.112\n     */ \n    latitude: number;  \n    \n     /*\n     * Longitudde\n     * @example 48.112\n     */ \n    longitude: number;  \n    \n     /*\n     * Day of ephemeride (0 for first day)\n     * @example 0\n     */\n    day: number; \n    \n    /*\n    * Date Time of meteo\n    * @example '2021-02-07T00:00:00+0100'\n    */\n    datetime: string; \n    \n    /*\n    * Wheather code (cf : https://api.meteo-concept.com/documentation#code-temps)\n    * @example 4\n    */\n\n    weather: number;\n    \n    /*\n    * Tmin in °C\n    * @example 11\n    */\n\n    tmin: number; \n    \n    /*\n    * Tmax in °C\n    * @example 17\n    */\n    \n    tmax: number;    \n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Hello.html":{"url":"classes/Hello.html","title":"class - Hello","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Hello\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hello.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            message\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/hello.entity.ts:7\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Hello {\n    \n   /*\n    * Message to say Hello\n    * @example 'Hello World !'\n    */    \n    message: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HttpModule.html":{"url":"modules/HttpModule.html","title":"module - HttpModule","body":"\n                   \n\n\n\n\n    Modules\n    HttpModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/http/http.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            onModuleInit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/http/http.module.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { HttpService, Logger, Module, OnModuleInit, HttpModule as BaseHttpModule } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n\n@Module({})\nexport class HttpModule implements OnModuleInit {\n\n    constructor(\n        private readonly httpService: HttpService        \n    ) { }\n\n    public onModuleInit(): any {\n        const logger = new Logger('Axios');\n        // Add request interceptor and response interceptor to log request infos\n        const axios = this.httpService.axiosRef;        \n        axios.interceptors.request.use((config) => {            \n            config['metadata'] = { ...config['metadata'], startDate: new Date() };\n            return config;\n        });\n        axios.interceptors.response.use(\n            (response) => {\n               \n                const { config } = response;\n                config['metadata'] = { ...config['metadata'], endDate: new Date() };               \n                const duration = config['metadata'].endDate.getTime() - config['metadata'].startDate.getTime();                \n                logger.log(`Request : ${config.method.toUpperCase()} ${config.url} ${duration}ms : ${JSON.stringify(response.data)}`);\n                return response;\n            },\n            (err) => {\n                logger.error(err);\n                // Don't forget this line like I did at first: it makes your failed HTTP requests resolve with \"undefined\" :-(\n                return Promise.reject(err);\n            });\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerMiddleware.html":{"url":"injectables/LoggerMiddleware.html","title":"injectable - LoggerMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LoggerMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/logger.middleware.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            use\n                        \n                        \n                    \n                \n            \n            \n                \nuse(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/logger.middleware.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\n\n@Injectable()\nexport class LoggerMiddleware implements NestMiddleware {\n  use(req: Request, res: Response, next: NextFunction) {\n    //console.log(req.method, ' - ', req.url, ' headers: ', JSON.stringify(req.headers),'status : ', res.statusCode);\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Measurement.html":{"url":"classes/Measurement.html","title":"class - Measurement","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Measurement\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/station/models/mesurement.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                humidity\n                            \n                            \n                                pressure\n                            \n                            \n                                temperature\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            humidity\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/station/models/mesurement.entity.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pressure\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/station/models/mesurement.entity.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            temperature\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/station/models/mesurement.entity.ts:8\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiTags } from '@nestjs/swagger';\n\nexport class Measurement {\n     /*\n     * Temparature value un °C\n     * @example 20.05\n     */\n    temperature: number;\n   \n     /*\n     * Pressure value in HPa\n     * @example 20\n     */\n\n    pressure: number;\n    \n    /*\n     * Percent humidity value in %\n     * @example 35.50\n     */\n\n    humidity: number;\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Meteo.html":{"url":"classes/Meteo.html","title":"class - Meteo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Meteo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meteo/models/meteo.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                date\n                            \n                            \n                                sunrise\n                            \n                            \n                                sunset\n                            \n                            \n                                temperature\n                            \n                            \n                                weather\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            date\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/meteo/models/meteo.entity.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sunrise\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/meteo/models/meteo.entity.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sunset\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/meteo/models/meteo.entity.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            temperature\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/meteo/models/meteo.entity.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            weather\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/meteo/models/meteo.entity.ts:21\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Meteo {\n\n    /*\n     * Date of meteo\n     * @example 2020-11-18\n     */\n    date: number;\n\n    /*\n     * Temparature value un °C\n     * @example 20\n     */\n\n    temperature: number;\n\n    /*\n     * Wheather code\n     * @example 1\n     */\n\n    weather: number;\n\n    /*\n     * Sunset time\n     * @example 06:00\n     */\n\n    sunset: string;\n\n    /*\n     * Sunrise time\n     * @example 21:00\n     */\n\n    sunrise: string;\n\n\n\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MeteoController.html":{"url":"controllers/MeteoController.html","title":"controller - MeteoController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MeteoController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meteo/meteo.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                meteo\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getEphemride\n                            \n                            \n                                    Async\n                                getForecasts\n                            \n                            \n                                    Async\n                                getLacolisation\n                            \n                            \n                                    Async\n                                getMeteo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getEphemride\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEphemride(city: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiResponse({status: 200, type: Ephemeride, description: 'Actual ephemeride'})@Get('ephemeride/:city')\n                \n            \n\n            \n                \n                    Defined in src/meteo/meteo.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    city\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getForecasts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getForecasts(city: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiResponse({status: 200, type: Forecast, description: 'Actual ephemeride'})@Get('forecasts/:city')\n                \n            \n\n            \n                \n                    Defined in src/meteo/meteo.controller.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    city\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getLacolisation\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLacolisation(city: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiResponse({status: 200, type: City, description: 'Localisation of a city according its name'})@Get('city/:city')\n                \n            \n\n            \n                \n                    Defined in src/meteo/meteo.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    city\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getMeteo\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMeteo(city: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiResponse({status: 200, type: Meteo, description: 'Actual meteo'})@Get(':city')\n                \n            \n\n            \n                \n                    Defined in src/meteo/meteo.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    city\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Post } from '@nestjs/common';\nimport { ApiHeader, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { City } from './models/city.entity';\nimport { Ephemeride } from './models/ephemeride.entity';\nimport { Forecast } from './models/forecast.entity';\nimport { Meteo } from './models/meteo.entity';\nimport { MeteoService } from './meteo.service';\n@ApiTags('Meteo')\n@ApiHeader({\n  name: 'Authorization',\n  description: 'Bearer xxxxxxxxxxxxxxxxxxxxxxxx',\n})\n@Controller('meteo')\nexport class MeteoController {\n  constructor(\n    private readonly meteoService: MeteoService\n  ) {\n\n  }\n\n  @ApiResponse({\n    status: 200,\n    type: City,\n    description: 'Localisation of a city according its name'\n  })\n  @Get('city/:city')\n  async getLacolisation(@Param('city') city: string ): Promise {\n    return this.meteoService.localise(city);    \n  }\n  \n  @ApiResponse({\n    status: 200,\n    type: Meteo,\n    description: 'Actual meteo'\n  })\n  @Get(':city')\n  async getMeteo(@Param('city') city: string ): Promise {\n    const cityDetail: City = await this.meteoService.localise(city);     \n    return this.meteoService.getMeteo(cityDetail.insee);\n  }\n\n  @ApiResponse({\n    status: 200,\n    type: Ephemeride,\n    description: 'Actual ephemeride'\n  })\n  @Get('ephemeride/:city')\n  async getEphemride(@Param('city') city: string ): Promise {\n    const cityDetail: City = await this.meteoService.localise(city); \n    return this.meteoService.getEphemeride(cityDetail.insee);\n  }\n\n  @ApiResponse({\n    status: 200,\n    type: Forecast,\n    description: 'Actual ephemeride'\n  })\n  @Get('forecasts/:city')\n  async getForecasts(@Param('city') city: string ): Promise {\n    const cityDetail: City = await this.meteoService.localise(city);\n    return this.meteoService.getForecasts(cityDetail.insee);\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MeteoHttpModule.html":{"url":"modules/MeteoHttpModule.html","title":"module - MeteoHttpModule","body":"\n                   \n\n\n\n\n    Modules\n    MeteoHttpModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/http/meteo-http.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { HttpService, Logger, Module, OnModuleInit, HttpModule as BaseHttpModule } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { HttpModule } from './http.module';\n\n@Module({\n    imports: [\n        BaseHttpModule.registerAsync({\n            imports: [ConfigModule],\n            useFactory: async (configService: ConfigService) => ({\n              headers: {          \n                Authorization: `Bearer ${configService.get('METEO_API_BEARER')}`\n              },\n              timeout: 7000,\n              maxRedirects: 5\n            }),\n            inject: [ConfigService]\n          }),  \n        ConfigModule,      \n    ],\n    exports: [\n        BaseHttpModule,\n    ],\n})\nexport class MeteoHttpModule extends HttpModule {   \n}\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MeteoModule.html":{"url":"modules/MeteoModule.html","title":"module - MeteoModule","body":"\n                   \n\n\n\n\n    Modules\n    MeteoModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MeteoModule\n\n\n\ncluster_MeteoModule_providers\n\n\n\ncluster_MeteoModule_imports\n\n\n\n\nMeteoHttpModule\n\nMeteoHttpModule\n\n\n\nMeteoModule\n\nMeteoModule\n\nMeteoModule -->\n\nMeteoHttpModule->MeteoModule\n\n\n\n\n\nSharedModule\n\nSharedModule\n\nMeteoModule -->\n\nSharedModule->MeteoModule\n\n\n\n\n\nMeteoService\n\nMeteoService\n\nMeteoModule -->\n\nMeteoService->MeteoModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/meteo/meteo.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MeteoService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MeteoController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            MeteoHttpModule\n                        \n                        \n                            SharedModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MeteoHttpModule } from 'src/http/meteo-http.module';\nimport { SharedModule } from 'src/shared/shared.module';\nimport { MeteoController } from './meteo.controller';\nimport { MeteoService } from './meteo.service';\n\n@Module({\n  imports:[\n    SharedModule,\n    MeteoHttpModule\n  ],\n  controllers: [MeteoController],\n  providers: [MeteoService]\n})\nexport class MeteoModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MeteoService.html":{"url":"injectables/MeteoService.html","title":"injectable - MeteoService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  MeteoService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meteo/meteo.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                getEphemeride\n                            \n                            \n                                    Public\n                                    Async\n                                getForecasts\n                            \n                            \n                                    Public\n                                    Async\n                                getMeteo\n                            \n                            \n                                    Public\n                                    Async\n                                localise\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/meteo/meteo.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getEphemeride\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEphemeride(insee: string)\n                \n            \n\n\n            \n                \n                    Defined in src/meteo/meteo.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    insee\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getForecasts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getForecasts(insee: string)\n                \n            \n\n\n            \n                \n                    Defined in src/meteo/meteo.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    insee\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getMeteo\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMeteo(insee: string)\n                \n            \n\n\n            \n                \n                    Defined in src/meteo/meteo.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    insee\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            localise\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    localise(city: string)\n                \n            \n\n\n            \n                \n                    Defined in src/meteo/meteo.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    city\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpService, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { City } from './models/city.entity';\nimport { Ephemeride } from './models/ephemeride.entity';\nimport { Forecast } from './models/forecast.entity';\nimport { Meteo } from './models/meteo.entity';\n\n@Injectable()\nexport class MeteoService {\n    constructor(\n        private readonly httpService: HttpService,\n        private readonly configService: ConfigService\n        ){\n        \n    }\n\n    public async localise(city: string): Promise{\n        const url = `${this.configService.get('METEO_API_URL')}/location/cities?search=${city}`;\n        const response = await this.httpService.get(`${url}`).toPromise();\n        return response.data !== undefined && response.data.cities !== undefined ? response.data.cities[0] : null;\n    }\n\n    public async getMeteo(insee: string): Promise {\n        const url = `${this.configService.get('METEO_API_URL')}/forecast/daily?insee=${insee}`;\n        const response = await this.httpService.get(`${url}`).toPromise();\n        return response.data;\n    }\n\n    public async getEphemeride(insee: string): Promise {\n        const url = `${this.configService.get('METEO_API_URL')}/ephemeride/0?insee=${insee}`;\n        console.log(url)\n        const response = await this.httpService.get(`${url}`).toPromise();\n        return response.data !== undefined && response.data.ephemeride !== undefined ? response.data.ephemeride : null;     \n    }\n    \n    public async getForecasts(insee: string): Promise {       \n        const url = `${this.configService.get('METEO_API_URL')}/forecast/daily?insee=${insee}`;        \n        const response = await this.httpService.get(`${url}`).toPromise();\n        return response.data !== undefined && response.data.forecast !== undefined ? response.data.forecast : null;        \n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MeteoStats.html":{"url":"classes/MeteoStats.html","title":"class - MeteoStats","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MeteoStats\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/station/stats/models/meteo-stats.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                measurement\n                            \n                            \n                                ts\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            measurement\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Measurement\n\n                        \n                    \n                        \n                            \n                                    Defined in src/station/stats/models/meteo-stats.entity.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ts\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/station/stats/models/meteo-stats.entity.ts:9\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Measurement } from \"src/station/models/mesurement.entity\";\n\nexport class MeteoStats {\n    /*\n     * Timestamp\n     * @example 2156464561231\n     */\n\n    ts: number;\n \n    /*\n     * Measurement of meteo (temperature, pressure, humidity)     \n     */\n\n    measurement: Measurement;\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SharedModule.html":{"url":"modules/SharedModule.html","title":"module - SharedModule","body":"\n                   \n\n\n\n\n    Modules\n    SharedModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/shared/shared.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import {  Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { StationHttpModule } from 'src/http/station-http.module';\n\n@Module({\n    imports: [\n        ConfigModule.forRoot()        \n    ],\n    exports:[\n        ConfigModule       \n    ]\n})\nexport class SharedModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/StationController.html":{"url":"controllers/StationController.html","title":"controller - StationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  StationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/station/station.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                station\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getDevice\n                            \n                            \n                                    Async\n                                getDevices\n                            \n                            \n                                    Async\n                                getHesterState\n                            \n                            \n                                    Async\n                                meteo\n                            \n                            \n                                    Async\n                                reset\n                            \n                            \n                                    Async\n                                switchRessource\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getDevice\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDevice()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('device')\n                \n            \n\n            \n                \n                    Defined in src/station/station.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getDevices\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDevices()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('devices')\n                \n            \n\n            \n                \n                    Defined in src/station/station.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getHesterState\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getHesterState(ressource: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('device/:ressource/state')\n                \n            \n\n            \n                \n                    Defined in src/station/station.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ressource\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            meteo\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    meteo()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('device/mesurement')@ApiResponse({status: 200, type: Measurement, description: 'Measurement of temperature, humidity, pressure'})\n                \n            \n\n            \n                \n                    Defined in src/station/station.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reset()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('reset')\n                \n            \n\n            \n                \n                    Defined in src/station/station.controller.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            switchRessource\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    switchRessource(switchOnOFF: SwitchState, ressource: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('device/:ressource')\n                \n            \n\n            \n                \n                    Defined in src/station/station.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    switchOnOFF\n                                    \n                                                SwitchState\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ressource\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Post, Put } from '@nestjs/common';\nimport { ApiHeader, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { SwitchState } from './models/switch-state.interface';\nimport { Measurement } from './models/mesurement.entity';\nimport { StationService } from './station.service';\n\n@ApiTags('Station')\n@ApiHeader({\n  name: 'Authorization',\n  description: 'Bearer xxxxxxxxxxxxxxxxxxxxxxxx',\n})\n@Controller('station')\nexport class StationController {\n    constructor(private readonly stationService: StationService) { }\n    \n    @Get('devices')\n    async getDevices(): Promise {      \n      return await this.stationService.getDevices();\n    }\n\n    @Get('device')\n    async getDevice(): Promise {      \n      return await this.stationService.getDevice();\n    }\n\n    @Get('device/:ressource/state')\n    async getHesterState(@Param('ressource') ressource: string): Promise {\n      return await this.stationService.getState(ressource);\n    }\n\n    @Get('device/mesurement')    \n    @ApiResponse({\n        status: 200,\n        type: Measurement,\n        description: 'Measurement of temperature, humidity, pressure' }\n    )\n    async meteo(): Promise {\n      return await this.stationService.getMeteo();\n    }\n\n    @Post('device/:ressource')\n    async switchRessource(@Body() switchOnOFF: SwitchState, @Param('ressource') ressource: string ): Promise {\n      return await this.stationService.switchRessource(ressource,switchOnOFF);\n    }\n    \n    @Put('reset')\n    async reset(): Promise {\n        return await this.stationService.reset();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StationHttpModule.html":{"url":"modules/StationHttpModule.html","title":"module - StationHttpModule","body":"\n                   \n\n\n\n\n    Modules\n    StationHttpModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/http/station-http.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { HttpService, Logger, Module, OnModuleInit, HttpModule as BaseHttpModule } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { HttpModule } from './http.module';\n\n@Module({\n    imports: [\n        BaseHttpModule.registerAsync({\n            imports: [ConfigModule],\n            useFactory: async (configService: ConfigService) => ({\n              headers: {          \n                Authorization: `Bearer ${configService.get('THINGER_IO_API_BEARER')}`\n              },\n              timeout: 7000,\n              maxRedirects: 5\n            }),\n            inject: [ConfigService]\n          }),  \n        ConfigModule,      \n    ],\n    exports: [\n        BaseHttpModule,\n    ],\n})\nexport class StationHttpModule extends HttpModule {   \n}\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StationModule.html":{"url":"modules/StationModule.html","title":"module - StationModule","body":"\n                   \n\n\n\n\n    Modules\n    StationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_StationModule\n\n\n\ncluster_StationModule_imports\n\n\n\ncluster_StationModule_providers\n\n\n\n\nSharedModule\n\nSharedModule\n\n\n\nStationModule\n\nStationModule\n\nStationModule -->\n\nSharedModule->StationModule\n\n\n\n\n\nStationHttpModule\n\nStationHttpModule\n\nStationModule -->\n\nStationHttpModule->StationModule\n\n\n\n\n\nStationService\n\nStationService\n\nStationModule -->\n\nStationService->StationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/station/station.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            StationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            SharedModule\n                        \n                        \n                            StationHttpModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { StationHttpModule } from 'src/http/station-http.module';\nimport { SharedModule } from 'src/shared/shared.module';\nimport { StationController } from './station.controller';\nimport { StationService } from './station.service';\n\n@Module({\n  imports:[\n    SharedModule,\n    StationHttpModule\n  ],\n  controllers: [StationController],\n  providers: [StationService]\n})\nexport class StationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StationService.html":{"url":"injectables/StationService.html","title":"injectable - StationService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  StationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/station/station.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                deviceId\n                            \n                            \n                                    Private\n                                devicesUrl\n                            \n                            \n                                    Private\n                                ressourcesUrl\n                            \n                            \n                                    Private\n                                rootUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                getDevice\n                            \n                            \n                                    Public\n                                    Async\n                                getDevices\n                            \n                            \n                                    Private\n                                    Async\n                                getDeviceState\n                            \n                            \n                                    Public\n                                    Async\n                                getMeteo\n                            \n                            \n                                    Public\n                                    Async\n                                getState\n                            \n                            \n                                    Public\n                                    Async\n                                reset\n                            \n                            \n                                    Private\n                                    Async\n                                switchDevice\n                            \n                            \n                                    Public\n                                switchRessource\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/station/station.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getDevice\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDevice()\n                \n            \n\n\n            \n                \n                    Defined in src/station/station.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getDevices\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDevices()\n                \n            \n\n\n            \n                \n                    Defined in src/station/station.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            getDeviceState\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDeviceState(ressource: string)\n                \n            \n\n\n            \n                \n                    Defined in src/station/station.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ressource\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getMeteo\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMeteo()\n                \n            \n\n\n            \n                \n                    Defined in src/station/station.service.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getState\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getState(resource: string)\n                \n            \n\n\n            \n                \n                    Defined in src/station/station.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    resource\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reset()\n                \n            \n\n\n            \n                \n                    Defined in src/station/station.service.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            switchDevice\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    switchDevice(path: string, switchState: SwitchState)\n                \n            \n\n\n            \n                \n                    Defined in src/station/station.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    switchState\n                                    \n                                                SwitchState\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            switchRessource\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    switchRessource(ressource: string, switchOnOFF: SwitchState)\n                \n            \n\n\n            \n                \n                    Defined in src/station/station.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ressource\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    switchOnOFF\n                                    \n                                                SwitchState\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            deviceId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/station/station.service.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            devicesUrl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/station/station.service.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            ressourcesUrl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/station/station.service.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            rootUrl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/station/station.service.ts:9\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { HttpService, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { SwitchState } from './models/switch-state.interface';\nimport { Measurement } from './models/mesurement.entity';\n\n@Injectable()\nexport class StationService {\n\n    private rootUrl: string;\n    private ressourcesUrl: string;\n    private devicesUrl: string;\n    private deviceId: string;\n\n    constructor(\n        private readonly httpService: HttpService,\n        private readonly configService: ConfigService) {\n        this.rootUrl = this.configService.get('THINGER_IO_API_URL');\n        this.ressourcesUrl = this.configService.get('THINGER_IO_API_RESSOURCES_PATH');\n        this.devicesUrl = this.configService.get('THINGER_IO_API_DEVICES_PATH');\n        this.deviceId = this.configService.get('THINGER_IO_API_DEVICE_ID');\n    }\n\n    private async getDeviceState(ressource: string): Promise {       \n        const response = await this.httpService.get(`${this.rootUrl}${this.ressourcesUrl}${ressource}-state`).toPromise();\n        return response.data;\n    }\n\n    private async switchDevice(path: string, switchState: SwitchState): Promise {\n        const response = await this.httpService.post(`${this.rootUrl}${this.ressourcesUrl}${path}`, { in: switchState.state === 'ON' }).toPromise();\n        return response.data;\n    }\n\n    public async getDevices(): Promise {\n        const response = await this.httpService.get(`${this.rootUrl}${this.devicesUrl}`).toPromise();\n        return response.data; \n    }\n\n    public async getDevice(): Promise {\n        const response = await this.httpService.get(`${this.rootUrl}${this.devicesUrl}/${this.deviceId}`).toPromise();\n        return response.data; \n    }\n\n    public switchRessource(ressource: string, switchOnOFF: SwitchState): Promise {\n        return this.switchDevice(ressource, switchOnOFF);\n    }\n\n    public async getState(resource: string): Promise {\n        return this.getDeviceState(`${resource}`);\n    }\n\n    public async getMeteo(): Promise {\n        const response = await this.httpService.get(`${this.rootUrl}${this.ressourcesUrl}meteo`).toPromise();\n        return response.data;\n    }\n\n    public async reset(): Promise {\n        await this.httpService.post(`${this.rootUrl}${this.ressourcesUrl}reseting`).toPromise();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/StatsController.html":{"url":"controllers/StatsController.html","title":"controller - StatsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  StatsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/station/stats/stats.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                station/stats\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getStatsDaily\n                            \n                            \n                                getStatsH24\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getStatsDaily\n                        \n                        \n                    \n                \n            \n            \n                \ngetStatsDaily()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('daily')\n                \n            \n\n            \n                \n                    Defined in src/station/stats/stats.controller.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getStatsH24\n                        \n                        \n                    \n                \n            \n            \n                \ngetStatsH24()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('h24')\n                \n            \n\n            \n                \n                    Defined in src/station/stats/stats.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { ApiHeader, ApiTags } from '@nestjs/swagger';\nimport { MeteoStats } from './models/meteo-stats.entity';\nimport { StatsService } from './stats.service';\n@ApiHeader({\n  name: 'Authorization',\n  description: 'Bearer xxxxxxxxxxxxxxxxxxxxxxxx',\n})\n@ApiTags('Stats')\n@Controller('station/stats')\nexport class StatsController {\n\n  constructor(\n    private readonly statsService: StatsService,   \n  ){}\n    \n  @Get('daily')\n  getStatsDaily(): Promise{\n    return this.statsService.getMeteoStatsDaily();\n  }\n\n  @Get('h24')\n  getStatsH24(): Promise{\n    return this.statsService.getMeteoStatsH24();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StatsModule.html":{"url":"modules/StatsModule.html","title":"module - StatsModule","body":"\n                   \n\n\n\n\n    Modules\n    StatsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_StatsModule\n\n\n\ncluster_StatsModule_providers\n\n\n\ncluster_StatsModule_imports\n\n\n\n\nSharedModule\n\nSharedModule\n\n\n\nStatsModule\n\nStatsModule\n\nStatsModule -->\n\nSharedModule->StatsModule\n\n\n\n\n\nStationHttpModule\n\nStationHttpModule\n\nStatsModule -->\n\nStationHttpModule->StatsModule\n\n\n\n\n\nStatsService\n\nStatsService\n\nStatsModule -->\n\nStatsService->StatsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/station/stats/stats.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StatsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            StatsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            SharedModule\n                        \n                        \n                            StationHttpModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { StationHttpModule } from 'src/http/station-http.module';\nimport { SharedModule } from 'src/shared/shared.module';\nimport { StatsController } from './stats.controller';\nimport { StatsService } from './stats.service';\n\n@Module({\n  imports:[\n    SharedModule,\n    StationHttpModule\n  ],\n  controllers: [StatsController],\n  providers: [StatsService]\n})\nexport class StatsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StatsService.html":{"url":"injectables/StatsService.html","title":"injectable - StatsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  StatsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/station/stats/stats.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                bucketDaily\n                            \n                            \n                                    Private\n                                    Readonly\n                                bucketH24\n                            \n                            \n                                    Private\n                                    Readonly\n                                rootUrl\n                            \n                            \n                                    Private\n                                    Readonly\n                                rootUrlBuckets\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                getMeteoStatsDaily\n                            \n                            \n                                    Public\n                                    Async\n                                getMeteoStatsH24\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/station/stats/stats.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getMeteoStatsDaily\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMeteoStatsDaily()\n                \n            \n\n\n            \n                \n                    Defined in src/station/stats/stats.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getMeteoStatsH24\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMeteoStatsH24()\n                \n            \n\n\n            \n                \n                    Defined in src/station/stats/stats.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            bucketDaily\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/station/stats/stats.service.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            bucketH24\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/station/stats/stats.service.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            rootUrl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/station/stats/stats.service.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            rootUrlBuckets\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/station/stats/stats.service.ts:9\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { HttpService, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { MeteoStats } from './models/meteo-stats.entity';\n\n@Injectable()\nexport class StatsService {\n\n  private readonly rootUrl: string;\n  private readonly rootUrlBuckets: string;\n  private readonly bucketH24: string;\n  private readonly bucketDaily: string\n\n  constructor(\n    private readonly httpService: HttpService,\n    private readonly configService: ConfigService\n  ) {\n    this.rootUrl = this.configService.get('THINGER_IO_API_URL');\n    this.rootUrlBuckets = this.rootUrl + this.configService.get('THINGER_IO_API_BUCKETS_PATH');\n    this.bucketH24 = this.configService.get('THINGER_IO_BUCKET_H24');\n    this.bucketDaily = this.configService.get('THINGER_IO_BUCKET_DAILY');\n  }\n\n  public async getMeteoStatsH24(): Promise {    \n    const url = `${this.rootUrlBuckets}/${this.bucketH24}/data`;    \n    const response = await this.httpService.get(`${url}`).toPromise();\n    return response.data;\n  }\n\n  public async getMeteoStatsDaily(): Promise {\n    const url = `${this.rootUrlBuckets}/${this.bucketDaily}/data`;\n    const response = await this.httpService.get(`${url}`).toPromise();\n    return response.data;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SwitchState.html":{"url":"interfaces/SwitchState.html","title":"interface - SwitchState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SwitchState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/station/models/switch-state.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        state\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        state\n                                    \n                                \n                                \n                                    \n                                        state:     \"ON\" | \"OFF\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"ON\" | \"OFF\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface SwitchState {\n    state: 'ON' | 'OFF';\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/hello.entity.ts\n            \n            class\n            Hello\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/logger.middleware.ts\n            \n            injectable\n            LoggerMiddleware\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            PORT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meteo/meteo.controller.ts\n            \n            controller\n            MeteoController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/meteo/meteo.service.ts\n            \n            injectable\n            MeteoService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/meteo/models/city.entity.ts\n            \n            class\n            City\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/meteo/models/ephemeride.entity.ts\n            \n            class\n            Ephemeride\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/meteo/models/forecast.entity.ts\n            \n            class\n            Forecast\n            \n                20 %\n                (2/10)\n            \n        \n        \n            \n                \n                src/meteo/models/meteo.entity.ts\n            \n            class\n            Meteo\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/station/models/mesurement.entity.ts\n            \n            class\n            Measurement\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/station/models/switch-state.interface.ts\n            \n            interface\n            SwitchState\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/station/station.controller.ts\n            \n            controller\n            StationController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/station/station.service.ts\n            \n            injectable\n            StationService\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/station/stats/models/meteo-stats.entity.ts\n            \n            class\n            MeteoStats\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/station/stats/stats.controller.ts\n            \n            controller\n            StatsController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/station/stats/stats.service.ts\n            \n            injectable\n            StatsService\n            \n                0 %\n                (0/8)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^7.5.1\n        \n            @nestjs/config : ^0.6.3\n        \n            @nestjs/core : ^7.5.1\n        \n            @nestjs/platform-express : ^7.5.1\n        \n            @nestjs/swagger : ^4.7.12\n        \n            helmet : ^4.4.1\n        \n            morgan : ^1.10.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.6.3\n        \n            swagger-ui-express : ^4.1.6\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nMeteo Station Back End\nUseful Documentations\nnestjs\n\nhttps://docs.nestjs.com/\n\nopenapi\n\nhttps://docs.nestjs.com/openapi/introduction\n\nmorgan\n\nhttps://www.npmjs.com/package/morgan\n\nothers topics\nRedefine your own HttpModule\n\nhttps://github.com/paztek/nestjs-http-service-example/blob/master/src/http/http.module.ts\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HttpModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MeteoHttpModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MeteoModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SharedModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StationHttpModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StatsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_MeteoModule\n\n\n\ncluster_MeteoModule_imports\n\n\n\ncluster_MeteoModule_providers\n\n\n\ncluster_StationModule\n\n\n\ncluster_StationModule_imports\n\n\n\ncluster_StationModule_providers\n\n\n\ncluster_StatsModule\n\n\n\ncluster_StatsModule_providers\n\n\n\n\nMeteoModule\n\nMeteoModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nMeteoModule->AppModule\n\n\n\n\n\nSharedModule\n\nSharedModule\n\nMeteoModule -->\n\nSharedModule->MeteoModule\n\n\n\n\n\nStationModule\n\nStationModule\n\nStationModule -->\n\nSharedModule->StationModule\n\n\n\n\n\nStatsModule\n\nStatsModule\n\nStatsModule -->\n\nSharedModule->StatsModule\n\n\n\nAppModule -->\n\nSharedModule->AppModule\n\n\n\nAppModule -->\n\nStationModule->AppModule\n\n\n\nAppModule -->\n\nStatsModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nMeteoHttpModule\n\nMeteoHttpModule\n\nMeteoModule -->\n\nMeteoHttpModule->MeteoModule\n\n\n\n\n\nMeteoService\n\nMeteoService\n\nMeteoModule -->\n\nMeteoService->MeteoModule\n\n\n\n\n\nStationHttpModule\n\nStationHttpModule\n\nStationModule -->\n\nStationHttpModule->StationModule\n\n\n\nStatsModule -->\n\nStationHttpModule->StatsModule\n\n\n\n\n\nStationService\n\nStationService\n\nStationModule -->\n\nStationService->StationModule\n\n\n\n\n\nStatsService\n\nStatsService\n\nStatsModule -->\n\nStatsService->StatsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        8 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PORT   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            PORT\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : process.env.PORT || 80\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
